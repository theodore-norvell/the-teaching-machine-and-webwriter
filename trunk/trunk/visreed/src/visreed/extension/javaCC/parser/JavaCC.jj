options {
  JAVA_UNICODE_ESCAPE = true;
  STATIC = false;
}

PARSER_BEGIN(JavaCCParser)

package visreed.extension.javaCC.parser;

import java.util.List;
import java.util.ArrayList;

import org.javacc.parser.JavaCCErrors;

import visreed.model.*;
import visreed.model.payload.*;
import visreed.extension.javaCC.model.*;
import visreed.extension.javaCC.model.payload.*;

public class JavaCCParser {
    private JavaCCBuilder builder;
    private JavaCCWholeGraph wg;
    int class_nesting = 0;
    String parser_class_name;
    boolean processing_cu = false;
    
    public static VisreedNode parse(
        JavaCCWholeGraph wg,
        java.io.Reader reader
    ) throws ParseException {
        JavaCCParser parser = new JavaCCParser(reader);
        parser.wg = wg;
        parser.builder = new JavaCCBuilder(wg);
        try{
            parser.javacc_input();
            parser.makeRoot();
            return parser.result();
        }
        catch (Exception e){
            System.out.println("Parsing Exception, message: " + e.getMessage());
            throw new ParseException(e.getMessage());
        }
        catch (Error e){
            System.out.println("Parsing Error, message: " + e.getMessage());
            throw new ParseException(e.getMessage());
        }
    }
    
    /*
     * Returns true if the next token is not in the FOLLOW list of "expansion".
     * It is used to decide when the end of an "expansion" has been reached.
     */
    private boolean notTailOfExpansionUnit() {
        Token t;
        t = getToken(1);
        if (t.kind == BIT_OR || t.kind == COMMA || t.kind == RPAREN || t.kind == RBRACE || t.kind == RBRACKET) return false;
        return true;
    }

    public VisreedNode result(){
        return builder.pop();
    }

    private void makeRoot(){
        builder.makeRoot();
    }

    

   /**
    * Class to hold modifiers.
    */
   static public final class ModifierSet
   {
     /* Definitions of the bits in the modifiers field.  */
     public static final int PUBLIC = 0x0001;
     public static final int PROTECTED = 0x0002;
     public static final int PRIVATE = 0x0004;
     public static final int ABSTRACT = 0x0008;
     public static final int STATIC = 0x0010;
     public static final int FINAL = 0x0020;
     public static final int SYNCHRONIZED = 0x0040;
     public static final int NATIVE = 0x0080;
     public static final int TRANSIENT = 0x0100;
     public static final int VOLATILE = 0x0200;
     public static final int STRICTFP = 0x1000;

     /** A set of accessors that indicate whether the specified modifier
         is in the set. */

     public boolean isPublic(int modifiers)
     {
       return (modifiers & PUBLIC) != 0;
     }

     public boolean isProtected(int modifiers)
     {
       return (modifiers & PROTECTED) != 0;
     }

     public boolean isPrivate(int modifiers)
     {
       return (modifiers & PRIVATE) != 0;
     }

     public boolean isStatic(int modifiers)
     {
       return (modifiers & STATIC) != 0;
     }

     public boolean isAbstract(int modifiers)
     {
       return (modifiers & ABSTRACT) != 0;
     }

     public boolean isFinal(int modifiers)
     {
       return (modifiers & FINAL) != 0;
     }

     public boolean isNative(int modifiers)
     {
       return (modifiers & NATIVE) != 0;
     }

     public boolean isStrictfp(int modifiers)
     {
       return (modifiers & STRICTFP) != 0;
     }

     public boolean isSynchronized(int modifiers)
     {
       return (modifiers & SYNCHRONIZED) != 0;
     }

     public boolean isTransient(int modifiers)
      {
       return (modifiers & TRANSIENT) != 0;
     }

     public boolean isVolatile(int modifiers)
     {
       return (modifiers & VOLATILE) != 0;
     }

     /**
      * Removes the given modifier.
      */
     static int removeModifier(int modifiers, int mod)
     {
        return modifiers & ~mod;
     }
   }

   private void eatUptoCloseBrace() {
     int b = 1;
     while(getToken(1).kind != RBRACE || --b != 0) {
       if (getToken(1).kind == EOF) break;
       if (getNextToken().kind == LBRACE) b++;
     }
   }
}

PARSER_END(JavaCCParser)

TOKEN_MGR_DECLS :
{
   int beginLine[] = new int[10];
   int beginCol[] = new int[10];
   int depth = 0;
   int size = 10;

   void saveBeginLineCol(int l, int c)
   {
      if (depth == size)
      {
         size += 5;
         int tmpbeginLine[] = new int[size];
         int tmpbeginCol[] = new int[size];

         System.arraycopy(beginLine, 0, beginLine = tmpbeginLine, 0, depth);
         System.arraycopy(beginCol, 0, beginCol = tmpbeginCol, 0, depth);
      }

      beginLine[depth] = l;
      beginCol[depth] = c;
      depth++;
   }

   void restoreBeginLineCol()
   {
      depth--;
      input_stream.adjustBeginLineColumn(beginLine[depth], beginCol[depth]);
   }
}


/**********************************************
 * THE JAVACC TOKEN SPECIFICATION STARTS HERE *
 **********************************************/

/* JAVACC RESERVED WORDS: These are the only tokens in JavaCC but not in Java */

TOKEN :
{
// "options" is no longer reserved (see issue 126).
//  < _OPTIONS: "options" >
  < _LOOKAHEAD: "LOOKAHEAD" >
| < _IGNORE_CASE: "IGNORE_CASE" >
| < _PARSER_BEGIN: "PARSER_BEGIN" >
| < _PARSER_END: "PARSER_END" >
| < _JAVACODE: "JAVACODE" >
| < _TOKEN: "TOKEN" >
| < _SPECIAL_TOKEN: "SPECIAL_TOKEN" >
| < _MORE: "MORE" >
| < _SKIP: "SKIP" >
| < _TOKEN_MGR_DECLS: "TOKEN_MGR_DECLS" >
| < _EOF: "EOF" >
}

/*
 * The remainder of the tokens are exactly (except for the removal of tokens
 * containing ">>" and "<<") as in the Java grammar and must be diff equivalent
 * (again with the exceptions above) to it.
 */

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
| "/*@egen*/" : AFTER_EGEN

}

<AFTER_EGEN> SKIP :
{
  <~[]> { restoreBeginLineCol(); input_stream.backup(1); } : DEFAULT
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
|
  "/*@bgen(jjtree"
     {
        saveBeginLineCol(input_stream.getBeginLine(),
                         input_stream.getBeginColumn());
     } : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* JAVA RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ABSTRACT: "abstract" >
| < ASSERT: "assert" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < ENUM: "enum" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < STRICTFP: "strictfp" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
}

/* JAVA LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        <DECIMAL_FLOATING_POINT_LITERAL>
      | <HEXADECIMAL_FLOATING_POINT_LITERAL>
  >
|
  < #DECIMAL_FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<DECIMAL_EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<DECIMAL_EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <DECIMAL_EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<DECIMAL_EXPONENT>)? ["f","F","d","D"]
  >
|
  < #DECIMAL_EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < #HEXADECIMAL_FLOATING_POINT_LITERAL:
        "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])+ (".")? <HEXADECIMAL_EXPONENT> (["f","F","d","D"])?
      | "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])* "." (["0"-"9","a"-"f","A"-"F"])+ <HEXADECIMAL_EXPONENT> (["f","F","d","D"])?
  >
|
  < #HEXADECIMAL_EXPONENT: ["p","P"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
//| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
//	| < LSHIFT: "<<" >
//	| < RSIGNEDSHIFT: ">>" >
//	| < RUNSIGNEDSHIFT: ">>>" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
//	| < LSHIFTASSIGN: "<<=" >
//	| < RSIGNEDSHIFTASSIGN: ">>=" >
//	| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
}

/* >'s need special attention due to generics syntax. */
TOKEN :
{
  < RUNSIGNEDSHIFT: ">>>" >
  {
     matchedToken.kind = GT;
     ((Token.GTToken)matchedToken).realKind = RUNSIGNEDSHIFT;
     input_stream.backup(2);
     matchedToken.image = ">";
  }
| < RSIGNEDSHIFT: ">>" >
  {
     matchedToken.kind = GT;
     ((Token.GTToken)matchedToken).realKind = RSIGNEDSHIFT;
     input_stream.backup(1);
     matchedToken.image = ">";
  }
| < GT: ">" >
}


/*
   // handling simplified java code
TOKEN:
{
    < WITH_NO_BRACES : (~["{", "}"])* >}

*/


/************************************************
 * THE JAVACC GRAMMAR SPECIFICATION STARTS HERE *
 ************************************************/

void javacc_input() :
	{
	  String id1, id2;
	}
{
  javacc_options()
  "PARSER_BEGIN"
  "("
  id1=identifier()
	{
	  this.wg.setParserName(id1);
	}
  ")"
  CompilationUnit()
  "PARSER_END"
  "("
  id2=identifier()
	{
      if (!id2.equals(id1)) {
        JavaCCErrors.parse_error(getToken(0), "Name " + id2 + " must be the same as that used at PARSER_BEGIN (" + id1 + ")");
      }
	}
  ")"
  ( production() )+
  <EOF>
}

void javacc_options() :
{}
{
  [ LOOKAHEAD({ getToken(1).image.equals("options") }) <IDENTIFIER>  "{" ( option_binding() )* "}" ]
	{
	  this.wg.getOptions().normalize();
	}
}

void option_binding() :
	{
	  String option_name;
	  int int_val;
	  boolean bool_val;
	  String string_val;
	  Token t = getToken(1);
	}
{
  ( <IDENTIFIER> | "LOOKAHEAD" | "IGNORE_CASE" | "static" )
	{
	  option_name = t.image;
	}
  "="
  (
    int_val = IntegerLiteral()
	{
	  this.wg.getOptions().set(option_name, int_val);
	}
  |
    bool_val = BooleanLiteral()
	{
	  this.wg.getOptions().set(option_name, bool_val);
	}
  |
    string_val = StringLiteral()
	{
	  this.wg.getOptions().set(option_name, string_val);
	}
  )
  ";"
}

void production() :
{}
{
  LOOKAHEAD(1)
  /*
   * Since JAVACODE is both a JavaCC reserved word and a Java identifier,
   * we need to give preference to "javacode_production" over
   * "bnf_production".
   */
  javacode_production()
|
  LOOKAHEAD(1)
  /*
   * Since SKIP, TOKEN, etc. are both JavaCC reserved words and Java
   * identifiers, we need to give preference to "regular_expression_production"
   * over "bnf_production".
   */
  regular_expr_production()
|
  LOOKAHEAD(1)
  /*
   * Since TOKEN_MGR_DECLS is both a JavaCC reserved word and a Java identifier,
   * we need to give preference to "token_manager_decls" over
   * "bnf_production".
   */
  token_manager_decls()
|
  bnf_production()
}

/*
// block -> { with_in_block ({with_in_block})* }
String block() :
    {
        StringBuilder sb = new StringBuilder();
        String content = "";    }
{
    "{"
      content = with_in_block()
      {
        sb.append(content);      }
    (
      "{"
      content = with_in_block()
      {
        sb.append("{");
        sb.append(content);
        sb.append("}");      }
      "}"
    )*
    "}"

    {
      return sb.toString();    }}

String with_in_block():
    {
        Token t;    }
{
    t = < WITH_NO_BRACES >
    {
        return t.image;    }}
*/

void javacode_production() :
	{
	   JavaCodeProductionPayload pl = new JavaCodeProductionPayload();
	   String production_name = "";
	   String java_code = "";
       Token t = getToken(1);
	   List<Token> excName = new ArrayList<Token>();
	   pl.setLine(t.beginLine);
	   pl.setColumn(t.beginColumn);
	}
{
  "JAVACODE"
  AccessModifier(pl)
  ResultType(pl.getReturnTypeTokens())
  production_name = identifier() {pl.setName(production_name);}
  [ "throws"
    Name(excName)
    {pl.getThrowsList().addAll(excName);}
    (
	  {excName.clear();}
      "," Name(excName)
	  {pl.getThrowsList().addAll(excName);}
    )*
  ]
  "{"
  Block(pl.getCodeList())
  "}"

    {
        builder.buildAndPushNodeWithNoSeq(pl, 1);
    }
    
}

void bnf_production() :
	{
	   String production_name = "";
	   BNFProductionPayload pl = new BNFProductionPayload();
	   Token t = getToken(1);
	   pl.setLine(t.beginLine);
	   pl.setColumn(t.beginColumn);
	   List<Token> excName = new ArrayList<Token>();
	}
{
  AccessModifier(pl)
  ResultType(pl.getReturnTypeTokens())
  production_name = identifier()  {pl.setName(production_name);}
  FormalParameters(pl.getParameterListTokens())
  [ "throws"
    Name(excName)
	{pl.getThrowsList().addAll(excName);}
    (
	  {excName.clear();}
      "," Name(excName)
	  {pl.getThrowsList().addAll(excName);}
    )*
  ]
  ":"
  Block(null)
  "{" expansion_choices() "}"
	{
	   builder.buildSequence(1);
	   builder.buildAndPushNodeWithNoSeq(pl, 1);
	}
}

void AccessModifier(ProductionPayload p) :
	{
	  Token t = null;
	}
{
	( t = "public" | t = "protected" | t = "private" )?
	{
	  if(t != null){
	    p.setModifier(t.image);
	  }
	}
}

void regular_expr_production() :
	{
	   RegexpProductionPayload pl = new RegexpProductionPayload("Regexp");
	   RegexpProductionPayload.Kind kind = RegexpProductionPayload.Kind.TOKEN;
	   int count_regexpr = 1;
    
       List<String> states = new ArrayList<String>();
    
	   Token t = getToken(1);
	   pl.setLine(t.beginLine);
	   pl.setColumn(t.beginColumn);
	}
{
	{
	  // set p.lexStates assuming there is no state spec.
	  // and then override if necessary.
	  pl.lexStates = new String[] {"DEFAULT"};
	}
  [
    LOOKAHEAD(2) "<" "*" ">"
	{
	  pl.lexStates = null;
	}
  |
    "<"
      t=<IDENTIFIER>
	{
	  states.add(t.image);
	}
      ( "," t=<IDENTIFIER>
	{
	  states.add(t.image);
	}
      )*
    ">"
	{
	  pl.lexStates = new String[states.size()];
	  for (int i = 0; i < states.size(); i++) {
	    pl.lexStates[i] = (String)states.get(i);
	  }
	}
  ]
  regexpr_kind(pl)
  [
    "[" t="IGNORE_CASE" "]"
	{
	  pl.setIgnoreCase(true);
	}
  ]
  ":"
  "{" regexpr_spec(pl)
    ( "|"
        regexpr_spec(pl)
        {
          count_regexpr++;        }
    )*
  t="}"
	{
        pl.setLastToken(t);
        if(count_regexpr > 1)        {
            builder.buildAlternation(count_regexpr);        } else {        }
        builder.buildAndPushNodeWithNoSeq(pl, 1);
    }
}

void token_manager_decls() :
	{
	  List<Token> decls = new ArrayList<Token>();
	}
{
  "TOKEN_MGR_DECLS" ":"
  ClassOrInterfaceBody(false, decls)
	{
	  this.wg.setTokenManagerDeclarations(decls);
	}
}

void regexpr_kind(RegexpProductionPayload p) :
{}
{
  "TOKEN"
	{
	  p.setKind(RegexpProductionPayload.Kind.TOKEN);
	}
|
  "SPECIAL_TOKEN"
	{
	  p.setKind(RegexpProductionPayload.Kind.SPECIAL_TOKEN);
	}
|
  "SKIP"
	{
	  p.setKind(RegexpProductionPayload.Kind.SKIP);
	}
|
  "MORE"
	{
	  p.setKind(RegexpProductionPayload.Kind.MORE);
	}
}

void regexpr_spec(RegexpProductionPayload p) :
	{
	  Token t;
	}
{
  regular_expression()
  [
    Block(null)
  ]
  [
    ":" t=<IDENTIFIER>
  ]
}

// shall result in an alternation node
void expansion_choices() :
	{
	  int num_of_choices = 1;
	}
{
  expansion()
  (
     "|"
     expansion()
     {
       num_of_choices ++;     }
  )*
	{
	    if(num_of_choices == 1)	    {
	        // do nothing, as the SEQ is already handled	    } else {            builder.buildAlternation(num_of_choices);        }    
	}
}

void expansion() :
	{
	}
{
  ( LOOKAHEAD(1)
    "LOOKAHEAD" "(" local_lookahead() ")"
  )?
  ( LOOKAHEAD(0, { notTailOfExpansionUnit() } )
    expansion_unit()
  )+
}

void local_lookahead() :
	{
	}
{
  [
    /*
     * The lookahead of 1 is to turn off the warning message that lets
     * us know that an expansion choice can also start with an integer
     * literal because a primary expression can do the same.  But we
     * know that this is what we want.
     */
    LOOKAHEAD(1)
    IntegerLiteral()
  ]
  [ LOOKAHEAD(0, { (getToken(1).kind != RPAREN) } )
    ","
  ]
  [ LOOKAHEAD(0, { getToken(1).kind != RPAREN && getToken(1).kind != LBRACE } )
    expansion_choices()
  ]
  [ LOOKAHEAD(0, { (getToken(1).kind != RPAREN) } )
    ","
  ]
  [ LOOKAHEAD(0)
    "{"
        [ Expression(null) ]
    "}"
  ]
}

void expansion_unit() :
	{
	}
{
  LOOKAHEAD(1)
  /*
   * We give this priority over primary expressions which use LOOKAHEAD as the
   * name of its identifier.
   */
  "LOOKAHEAD" "(" local_lookahead() ")"
|
  Block(null)
|
  "[" expansion_choices() "]"
	{
	  builder.buildOptional();
	}
|
  LOOKAHEAD(
    identifier()
  |
    StringLiteral()
  |
    "<"
  |
    PrimaryExpression() "="
  )
  [
    LOOKAHEAD(PrimaryExpression() "=")
    PrimaryExpression()
    "="
  ]
  (
	LOOKAHEAD( identifier() "(")
   identifier() Arguments(null)
  |
    regular_expression()
	[ "." <IDENTIFIER> ]
  )
|
  "(" expansion_choices() ")"
  (  "+" { builder.buildKleenePlus(); }
   | "*" { builder.buildKleeneStar(); }
   | "?" { builder.buildOptional(); }
  )?
}

void regular_expression() :
    {
      String image = null;
      boolean private_rexp = false;
      Token t = getToken(1);
    }
{
  image = StringLiteral()
  {
      builder.buildSequence(0);
      builder.buildAndPushNodeWithSeq(new RegexpSpecPayload(image), 1);  }
|
  LOOKAHEAD(3)
  < LANGLE: "<" >
  [
    [ "#" {private_rexp = true;} ]
    image = identifier() ":"
  ]
  complex_regular_expression_choices()
  < RANGLE: ">" >
  {
      if(image != null)      {
          builder.buildSequence(1);
          builder.buildAndPushNodeWithSeq(new RegexpSpecPayload(image), 1);      }     }
|
  LOOKAHEAD(2)
  "<" image = identifier() ">"
  {
      builder.buildSequence(0);
      builder.buildAndPushNodeWithSeq(new RegexpSpecPayload(image), 1);  }
|
  "<" "EOF" ">"
}

void complex_regular_expression_choices() :
    {
      int count = 1;
    }
{
  complex_regular_expression()
  ( "|" complex_regular_expression()
    {
      count++;
    }
  )*
    {
      if (count > 1) {
        builder.buildAlternation(count);
      }
    }
}

void complex_regular_expression() :
    {
      int count = 0;
    }
{
  ( complex_regular_expression_unit()
    {
      count++;
    }
  )+
    {
      if (count > 1) {
          builder.buildSequence(count);
      }
    }
}

void complex_regular_expression_unit() :
    {
      String image;
      Token t = getToken(1);
      int r1 = 0, r2 = -1;
      boolean hasMax = false;
    }
{
  image=StringLiteral()
    {
      builder.buildTerminal(image);
    }
|
  "<" image=identifier() ">"
    {
      builder.buildTerminal(image);
    }
|
  character_list()
|
  "(" complex_regular_expression_choices() ")"
  (  "+"
    {
        builder.buildKleenePlus();
      // c.member = new ROneOrMore(t, (RegularExpression)c.member);
    }
   | "*"
    {
        builder.buildKleeneStar();
      // c.member = new RZeroOrMore(t, (RegularExpression)c.member);
    }
   | "?"
    {
        builder.buildOptional();
    }
   | "{" r1 = IntegerLiteral()
         [ "," { hasMax = true; } [ r2 = IntegerLiteral() ] ]
     "}"
    {
        RepeatRangePayload pl = null;
        if(hasMax) {
            pl = new RepeatRangePayload(r1, r2);        } else {
            pl = new RepeatRangePayload(r1);        }
        builder.buildAndPushNodeWithSeq(pl, 1);
    }
  )?
}

void character_list() :
    {
        int count = 0;
    }
{
  ["~"
    {
    }
  ]
  "[" [ character_descriptor()
        { count ++; }
        ( "," character_descriptor()
            { count ++; }
        )*
      ]
  "]"
  {
      builder.buildSequence(count);  }
}

void character_descriptor() :
    {
        String s1 = "" , s2 = "";
        boolean isInRange = false;
    }
{
  s1 = StringLiteral()
  [ "-" s2 = StringLiteral()
    {
        isInRange = true;    }
  ]
  {
      if(isInRange) {
          builder.buildAndPushNodeWithNoSeq(new CharacterRangePayload(s1, s2, false), 0);      } else {
          builder.buildAndPushNodeWithNoSeq(new CharacterRangePayload(s1), 0);      }
            }
}

String identifier() :
	{
	  Token t;
	}
{
  t=<IDENTIFIER>
	{
	  return t.image;
	}
}

/**********************************************
 * THE JAVA GRAMMAR SPECIFICATION STARTS HERE *
 **********************************************/

/*
 * The Java grammar is modified to use sequences of tokens
 * for the missing tokens - those that include "<<" and ">>".
 */

/*
 * The following production defines Java identifiers - it
 * includes the reserved words of JavaCC also.
 */

Token JavaIdentifier() :
{}
{
(
  <IDENTIFIER>
| "LOOKAHEAD"
| "IGNORE_CASE"
| "PARSER_BEGIN"
| "PARSER_END"
| "JAVACODE"
| "TOKEN"
| "SPECIAL_TOKEN"
| "MORE"
| "SKIP"
| "TOKEN_MGR_DECLS"
| "EOF"
)
    {
      Token retval = getToken(0);
      retval.kind = IDENTIFIER;
      return retval;
    }
}

/*
 * Program structuring syntax follows.
 */

void CompilationUnit() :
/*
 * The <EOF> is deleted since the compilation unit is embedded
 * within grammar code.
 */
    {
    }
{
  [ LOOKAHEAD( ( Annotation() )* "package" ) PackageDeclaration() ]
  ( ImportDeclaration() )*
  ( TypeDeclaration() )*
}

void PackageDeclaration() :
{}
{
  Modifiers() "package" Name(null) ";"
}

void ImportDeclaration() :
{}
{
  "import" [ "static" ] Name(null) [ "." "*" ] ";"
}

/*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 */

int Modifiers():
{
   int modifiers = 0;
}
{
 (
  LOOKAHEAD(2)
  (
   "public" { modifiers |= ModifierSet.PUBLIC; }
  |
   "static" { modifiers |= ModifierSet.STATIC; }
  |
   "protected" { modifiers |= ModifierSet.PROTECTED; }
  |
   "private" { modifiers |= ModifierSet.PRIVATE; }
  |
   "final" { modifiers |= ModifierSet.FINAL; }
  |
   "abstract" { modifiers |= ModifierSet.ABSTRACT; }
  |
   "synchronized" { modifiers |= ModifierSet.SYNCHRONIZED; }
  |
   "native" { modifiers |= ModifierSet.NATIVE; }
  |
   "transient" { modifiers |= ModifierSet.TRANSIENT; }
  |
   "volatile" { modifiers |= ModifierSet.VOLATILE; }
  |
   "strictfp" { modifiers |= ModifierSet.STRICTFP; }
  |
   Annotation()
  )
 )*

 {
    return modifiers;
 }
}

/*
 * Declaration syntax follows.
 */
void TypeDeclaration():
{
   int modifiers;
}
{
  ";"
|
  modifiers = Modifiers()
  (
     ClassOrInterfaceDeclaration(modifiers, null)
   |
     EnumDeclaration(modifiers)
   |
     AnnotationTypeDeclaration(modifiers)
  )
}


void ClassOrInterfaceDeclaration(int modifiers, List tokens):
{
   boolean isInterface = false;
      class_nesting++;
      Token t;
      boolean is_parser_class = false;
  if (tokens == null)
    tokens = new ArrayList();
}
{
  ( "class" | "interface" { isInterface = true; } )
  t=<IDENTIFIER>
  [ TypeParameters() ]
  [ ExtendsList(isInterface) ]
  [ ImplementsList(isInterface) ]
    {
      if (t.image.equals(parser_class_name) && class_nesting == 1 && processing_cu) {
        is_parser_class = true;
        // setinsertionpoint(getToken(1), 1);
      }
    }
  ClassOrInterfaceBody(isInterface, null)
    {
      if (is_parser_class) {
        // setinsertionpoint(getToken(0), 2);
      }
      class_nesting--;
    }
}

void ExtendsList(boolean isInterface):
{
   boolean extendsMoreThanOne = false;
}
{
   "extends" ClassOrInterfaceType()
   ( "," ClassOrInterfaceType() { extendsMoreThanOne = true; } )*
   {
      if (extendsMoreThanOne && !isInterface)
         throw new ParseException("A class cannot extend more than one other class");
   }
}

void ImplementsList(boolean isInterface):
{}
{
   "implements" ClassOrInterfaceType()
   ( "," ClassOrInterfaceType() )*
   {
      if (isInterface)
         throw new ParseException("An interface cannot implement other interfaces");
   }
}

void EnumDeclaration(int modifiers):
{}
{
  "enum" <IDENTIFIER>
  [ ImplementsList(false) ]
  EnumBody()
}

void EnumBody():
{}
{
   "{"
   [ EnumConstant() ( LOOKAHEAD(2) "," EnumConstant() )* ]
   [ "," ]
   [ ";" ( ClassOrInterfaceBodyDeclaration(false) )* ]
   "}"
}

void EnumConstant():
{}
{
  Modifiers() <IDENTIFIER> [ Arguments(null) ] [ ClassOrInterfaceBody(false, null) ]
}

void TypeParameters():
{}
{
   "<" TypeParameter() ( "," TypeParameter() )* ">"
}

void TypeParameter():
{}
{
   <IDENTIFIER> [ TypeBound() ]
}

void TypeBound():
{}
{
   "extends" ClassOrInterfaceType() ( "&" ClassOrInterfaceType() )*
}

void ClassOrInterfaceBody(boolean isInterface, List tokens):
/*
 * Parsing this fills "tokens" with all tokens of the block
 * excluding the braces at each end.
 */
    {
      Token first, last;
      if (tokens == null)
        tokens = new ArrayList();
    }
{
  "{"
    {
      first = getToken(1);
    }
  ( ClassOrInterfaceBodyDeclaration(isInterface) )*
    {
      last = getToken(0);
    }
  "}"
    {
      if (last.next != first) { // i.e., this is not an empty sequence
        Token t = first;
        while (true) {
          tokens.add(t);
          if (t == last) break;
          t = t.next;
        }
      }
    }
}

void ClassOrInterfaceBodyDeclaration(boolean isInterface):
{
   int modifiers;
}
{
  LOOKAHEAD(2)
  Initializer()
  {
     if (isInterface)
        throw new ParseException("An interface cannot have initializers");
  }
|
  modifiers = Modifiers() // Just get all the modifiers out of the way. If you want to do
              // more checks, pass the modifiers down to the member
  (
      ClassOrInterfaceDeclaration(modifiers, null)
    |
      EnumDeclaration(modifiers)
    |
      LOOKAHEAD( [ TypeParameters() ] <IDENTIFIER> "(" )
      ConstructorDeclaration()
    |
      LOOKAHEAD( Type() <IDENTIFIER> ( "[" "]" )* ( "," | "=" | ";" ) )
      FieldDeclaration(modifiers)
    |
      MethodDeclaration(modifiers)
  )
|
  ";"
}

void FieldDeclaration(int modifiers):
{}
{
  // Modifiers are already matched in the caller
  Type() VariableDeclarator() ( "," VariableDeclarator() )* ";"
}

void VariableDeclarator():
{}
{
  VariableDeclaratorId() [ "=" VariableInitializer() ]
}

void VariableDeclaratorId():
{}
{
  <IDENTIFIER> ( "[" "]" )*
}

void VariableInitializer():
{}
{
  ArrayInitializer()
|
  Expression(null)
}

void ArrayInitializer():
{}
{
  "{" [ VariableInitializer() ( LOOKAHEAD(2) "," VariableInitializer() )* ] [ "," ] "}"
}

void MethodDeclaration(int modifiers):
{}
{
  // Modifiers already matched in the caller!
  [ TypeParameters() ]
  ResultType(null)
  MethodDeclarator() [ "throws" NameList() ]
  ( Block(null) | ";" )
}

void MethodDeclarator():
{}
{
  <IDENTIFIER> FormalParameters(null) ( "[" "]" )*
}

void FormalParameters(List tokens) :
/*
 * Parsing this fills "tokens" with all tokens of the formal
 * parameters excluding the parentheses at each end.
 */
    {
      Token first, last;
      if (tokens == null)
        tokens = new ArrayList();
    }
{
  "("
    {
      first = getToken(1);
    }
  [ FormalParameter() ( "," FormalParameter() )* ]
    {
      last = getToken(0);
    }
  ")"
    {
      if (last.next != first) { // i.e., this is not an empty sequence
        Token t = first;
        while (true) {
          tokens.add(t);
          if (t == last) break;
          t = t.next;
        }
      }
    }
}

void FormalParameter():
{}
{
  Modifiers() Type() [ "..." ] VariableDeclaratorId()
}

void ConstructorDeclaration():
{}
{
  [ TypeParameters() ]
  // Modifiers matched in the caller
  <IDENTIFIER> FormalParameters(null) [ "throws" NameList() ]
  "{"
    [ LOOKAHEAD(ExplicitConstructorInvocation()) ExplicitConstructorInvocation() ]
    ( BlockStatement() )*
  "}"
}

void ExplicitConstructorInvocation():
{}
{
  LOOKAHEAD("this" Arguments(null) ";")
  "this" Arguments(null) ";"
|
  [ LOOKAHEAD(2) PrimaryExpression() "." ] "super" Arguments(null) ";"
}

void Initializer():
{}
{
  [ "static" ] Block(null)
}


/*
 * Type, name and expression syntax follows.
 */

void Type():
{}
{
   LOOKAHEAD(2) ReferenceType()
 |
   PrimitiveType()
}

void ReferenceType():
{}
{
   PrimitiveType() ( LOOKAHEAD(2) "[" "]" )+
  |
   ( ClassOrInterfaceType() ) ( LOOKAHEAD(2) "[" "]" )*
}

void ClassOrInterfaceType():
{}
{
  <IDENTIFIER> [ LOOKAHEAD(2) TypeArguments() ]
  ( LOOKAHEAD(2) "." <IDENTIFIER> [ LOOKAHEAD(2) TypeArguments() ] )*
}

void TypeArguments():
{}
{
   "<" TypeArgument() ( "," TypeArgument() )* ">"
}

void TypeArgument():
{}
{
   ReferenceType()
 |
   "?" [ WildcardBounds() ]
}

void WildcardBounds():
{}
{
   "extends" ReferenceType()
 |
   "super" ReferenceType()
}


void PrimitiveType():
{}
{
  "boolean"
|
  "char"
|
  "byte"
|
  "short"
|
  "int"
|
  "long"
|
  "float"
|
  "double"
}


void ResultType(List<Token> tokens) :
    {
      Token first = getToken(1);
      if (tokens == null)
        tokens = new ArrayList<Token>();
    }
{
(
  "void"
|
  Type()
)
    {
      Token last = getToken(0);
      Token t = first;
      while (true) {
        tokens.add(t);
        if (t == last) break;
        t = t.next;
      }
    }
}

void Name(List<Token> tokens) :
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
    {
      if (tokens == null)
        tokens = new ArrayList<Token>();
      Token first = getToken(1);
    }
{
  JavaIdentifier()
  ( LOOKAHEAD(2) "." JavaIdentifier()
  )*
    {
      Token last = getToken(0);
      Token t = first;
      while (true) {
        tokens.add(t);
        if (t == last) break;
        t = t.next;
      }
    }
}


void NameList():
{}
{
  Name(null) ( "," Name(null) )*
}


/*
 * Expression syntax follows.
 */

void Expression(List<Token> tokens) :
/*
 * This expansion has been written this way instead of:
 *   Assignment() | ConditionalExpression()
 * for performance reasons.
 * However, it is a weakening of the grammar for it allows the LHS of
 * assignments to be any conditional expression whereas it can only be
 * a primary expression.  Consider adding a semantic predicate to work
 * around this.
 */
    {
      Token first = getToken(1);
      if (tokens == null)
        tokens = new ArrayList<Token>();
    }
{
  ConditionalExpression()
  [
    LOOKAHEAD(2)
    AssignmentOperator() Expression(null)
  ]
    {
      Token last = getToken(0);
      Token t = first;
      while (true) {
        tokens.add(t);
        if (t == last) break;
        t = t.next;
      }
    }
}


void AssignmentOperator():
{}
{
  "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|="
}

void ConditionalExpression():
{}
{
  ConditionalOrExpression() [ "?" Expression(null) ":" Expression(null) ]
}

void ConditionalOrExpression():
{}
{
  ConditionalAndExpression() ( "||" ConditionalAndExpression() )*
}

void ConditionalAndExpression():
{}
{
  InclusiveOrExpression() ( "&&" InclusiveOrExpression() )*
}

void InclusiveOrExpression():
{}
{
  ExclusiveOrExpression() ( "|" ExclusiveOrExpression() )*
}

void ExclusiveOrExpression():
{}
{
  AndExpression() ( "^" AndExpression() )*
}

void AndExpression():
{}
{
  EqualityExpression() ( "&" EqualityExpression() )*
}

void EqualityExpression():
{}
{
  InstanceOfExpression() ( ( "==" | "!=" ) InstanceOfExpression() )*
}

void InstanceOfExpression():
{}
{
  RelationalExpression() [ "instanceof" Type() ]
}

void RelationalExpression():
{}
{
  ShiftExpression() ( ( "<" | ">" | "<=" | ">=" ) ShiftExpression() )*
}

void ShiftExpression():
{}
{
  AdditiveExpression() ( ( "<<" | RSIGNEDSHIFT() | RUNSIGNEDSHIFT() ) AdditiveExpression() )*
}

void AdditiveExpression():
{}
{
  MultiplicativeExpression() ( ( "+" | "-" ) MultiplicativeExpression() )*
}

void MultiplicativeExpression():
{}
{
  UnaryExpression() ( ( "*" | "/" | "%" ) UnaryExpression() )*
}

void UnaryExpression():
{}
{
  ( "+" | "-" ) UnaryExpression()
|
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  UnaryExpressionNotPlusMinus()
}

void PreIncrementExpression():
{}
{
  "++" PrimaryExpression()
}

void PreDecrementExpression():
{}
{
  "--" PrimaryExpression()
}

void UnaryExpressionNotPlusMinus():
{}
{
  ( "~" | "!" ) UnaryExpression()
|
  LOOKAHEAD( CastLookahead() )
  CastExpression()
|
  PostfixExpression()
}

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
void CastLookahead():
{}
{
  LOOKAHEAD(2)
  "(" PrimitiveType()
|
  LOOKAHEAD("(" Type() "[")
  "(" Type() "[" "]"
|
  "(" Type() ")" ( "~" | "!" | "(" | <IDENTIFIER> | "this" | "super" | "new" | Literal() )
}

void PostfixExpression():
{}
{
  PrimaryExpression() [ "++" | "--" ]
}

void CastExpression():
{}
{
  LOOKAHEAD("(" PrimitiveType())
  "(" Type() ")" UnaryExpression()
|
  "(" Type() ")" UnaryExpressionNotPlusMinus()
}

void PrimaryExpression():
{}
{
  PrimaryPrefix() ( LOOKAHEAD(2) PrimarySuffix() )*
}

void MemberSelector():
{}
{
  "." TypeArguments() <IDENTIFIER>
}

void PrimaryPrefix():
{}
{
  Literal()
|
  "this"
|
  "super" "." <IDENTIFIER>
|
  "(" Expression(null) ")"
|
  AllocationExpression()
|
  LOOKAHEAD( ResultType(null) "." "class" )
  ResultType(null) "." "class"
|
  Name(null)
}

void PrimarySuffix():
{}
{
  LOOKAHEAD(2)
  "." "this"
|
  LOOKAHEAD(2)
  "." AllocationExpression()
|
  LOOKAHEAD(3)
  MemberSelector()
|
  "[" Expression(null) "]"
|
  "." <IDENTIFIER>
|
  Arguments(null)
}

void Literal():
{}
{
  <INTEGER_LITERAL>
|
  <FLOATING_POINT_LITERAL>
|
  <CHARACTER_LITERAL>
|
  <STRING_LITERAL>
|
  BooleanLiteral()
|
  NullLiteral()
}

int IntegerLiteral() :
{}
{
  <INTEGER_LITERAL>
    {
      try {
        return Integer.parseInt(token.image);
      } catch (NumberFormatException e) {
        throw new Error();
      }
    }
}

boolean BooleanLiteral() :
{}
{
  "true"
    {
      return true;
    }
|
  "false"
    {
      return false;
    }
}

String StringLiteral() :
    {
      Token t;
    }
{
  t=<STRING_LITERAL>
    {
      return JavaCCParserHelper.remove_escapes_and_quotes(t, t.image);
    }
}

void NullLiteral() :
{}
{
  "null"
}

void Arguments(java.util.List tokens) :
/*
 * Parsing this fills "tokens" with all tokens of the arguments
 * excluding the parentheses at each end.
 */
    {
      Token first, last;
      if (tokens == null)
        tokens = new ArrayList();
    }
{
  "("
    {
      first = getToken(1);
    }
  [ ArgumentList() ]
    {
      last = getToken(0);
    }
  ")"
    {
      if (last.next != first) { // i.e., this is not an empty sequence
        Token t = first;
        while (true) {
          tokens.add(t);
          if (t == last) break;
          t = t.next;
        }
      }
    }
}

void ArgumentList():
{}
{
  Expression(null) ( "," Expression(null) )*
}

void AllocationExpression():
{}
{
  LOOKAHEAD(2)
  "new" PrimitiveType() ArrayDimsAndInits()
|
  "new" ClassOrInterfaceType() [ TypeArguments() ]
    (
      ArrayDimsAndInits()
    |
      Arguments(null) [ ClassOrInterfaceBody(false, null) ]
    )
}

/*
 * The third LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
void ArrayDimsAndInits():
{}
{
  LOOKAHEAD(2)
  ( LOOKAHEAD(2) "[" Expression(null) "]" )+ ( LOOKAHEAD(2) "[" "]" )*
|
  ( "[" "]" )+ ArrayInitializer()
}


/*
 * Statement syntax follows.
 */

void Statement():
{}
{
  LOOKAHEAD(2)
  LabeledStatement()
|
  AssertStatement()
|
  Block(null)
|
  EmptyStatement()
|
  StatementExpression() ";"
|
  SwitchStatement()
|
  IfStatement()
|
  WhileStatement()
|
  DoStatement()
|
  ForStatement()
|
  BreakStatement()
|
  ContinueStatement()
|
  ReturnStatement()
|
  ThrowStatement()
|
  SynchronizedStatement()
|
  TryStatement()
}

void AssertStatement():
{}
{
  "assert" Expression(null) [ ":" Expression(null) ] ";"
}

void LabeledStatement():
{}
{
  <IDENTIFIER> ":" Statement()
}

void Block(List<Token> tokens) :
/*
 * Parsing this fills "tokens" with all tokens of the block
 * excluding the braces at each end.
 */
    {
      Token first, last;
      if (tokens == null)
        tokens = new ArrayList<Token>();
    }
{
  "{"
    {
      first = getToken(1);
    }
  ( BlockStatement() )*
    {
      last = getToken(0);
    }
  "}"
    {
      if (last.next != first) { // i.e., this is not an empty sequence
        Token t = first;
        while (true) {
          tokens.add(t);
          if (t == last) break;
          t = t.next;
        }
      }
    }
}

void BlockStatement():
{}
{
  LOOKAHEAD( Modifiers() Type() <IDENTIFIER> )
  LocalVariableDeclaration() ";"
|
  Statement()
|
  ClassOrInterfaceDeclaration(0, null)
}

void LocalVariableDeclaration():
{}
{
  Modifiers() Type() VariableDeclarator() ( "," VariableDeclarator() )*
}

void EmptyStatement():
{}
{
  ";"
}

void StatementExpression():
/*
 * The last expansion of this production accepts more than the legal
 * Java expansions for StatementExpression.  This expansion does not
 * use PostfixExpression for performance reasons.
 */
{}
{
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  PrimaryExpression()
  [
    "++"
  |
    "--"
  |
    AssignmentOperator() Expression(null)
  ]
}

void SwitchStatement():
{}
{
  "switch" "(" Expression(null) ")" "{"
    ( SwitchLabel() ( BlockStatement() )* )*
  "}"
}

void SwitchLabel():
{}
{
  "case" Expression(null) ":"
|
  "default" ":"
}

void IfStatement():
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{}
{
  "if" "(" Expression(null) ")" Statement() [ LOOKAHEAD(1) "else" Statement() ]
}

void WhileStatement():
{}
{
  "while" "(" Expression(null) ")" Statement()
}

void DoStatement():
{}
{
  "do" Statement() "while" "(" Expression(null) ")" ";"
}

void ForStatement():
{}
{
  "for" "("

  (
      LOOKAHEAD(Modifiers() Type() <IDENTIFIER> ":")
      Modifiers() Type() <IDENTIFIER> ":" Expression(null)
    |
     [ ForInit() ] ";" [ Expression(null) ] ";" [ ForUpdate() ]
  )

  ")" Statement()
}

void ForInit():
{}
{
  LOOKAHEAD( Modifiers() Type() <IDENTIFIER> )
  LocalVariableDeclaration()
|
  StatementExpressionList()
}

void StatementExpressionList():
{}
{
  StatementExpression() ( "," StatementExpression() )*
}

void ForUpdate():
{}
{
  StatementExpressionList()
}

void BreakStatement():
{}
{
  "break" [ <IDENTIFIER> ] ";"
}

void ContinueStatement():
{}
{
  "continue" [ <IDENTIFIER> ] ";"
}

void ReturnStatement() :
    {
    }
{
  "return"
  [
    Expression(null)
  ]
  ";"
}

void ThrowStatement() :
    {
    }
{
  "throw"
  Expression(null)
  ";"
}

void SynchronizedStatement():
{}
{
  "synchronized" "(" Expression(null) ")" Block(null)
}

void TryStatement():
/*
 * Semantic check required here to make sure that at least one
 * finally/catch is present.
 */
{}
{
  "try" Block(null)
  ( "catch" "(" FormalParameter() ")" Block(null) )*
  [ "finally" Block(null) ]
}

/* We use productions to match >>>, >> and > so that we can keep the
 * type declaration syntax with generics clean
 */

void RUNSIGNEDSHIFT():
{}
{
  ( LOOKAHEAD({ getToken(1).kind == GT &&
                ((Token.GTToken)getToken(1)).realKind == RUNSIGNEDSHIFT} )
   ">" ">" ">"
  )
}

void RSIGNEDSHIFT():
{}
{
  ( LOOKAHEAD({ getToken(1).kind == GT &&
                ((Token.GTToken)getToken(1)).realKind == RSIGNEDSHIFT} )
  ">" ">"
  )
}

/* Annotation syntax follows. */

void Annotation():
{}
{
   LOOKAHEAD( "@" Name(null) "(" ( <IDENTIFIER> "=" | ")" ))
   NormalAnnotation()
 |
   LOOKAHEAD( "@" Name(null) "(" )
   SingleMemberAnnotation()
 |
   MarkerAnnotation()
}

void NormalAnnotation():
{}
{
   "@" Name(null) "(" [ MemberValuePairs() ] ")"
}

void MarkerAnnotation():
{}
{
  "@" Name(null)
}

void SingleMemberAnnotation():
{}
{
  "@" Name(null) "(" MemberValue() ")"
}

void MemberValuePairs():
{}
{
   MemberValuePair() ( "," MemberValuePair() )*
}

void MemberValuePair():
{}
{
    <IDENTIFIER> "=" MemberValue()
}

void MemberValue():
{}
{
   Annotation()
 |
   MemberValueArrayInitializer()
 |
   ConditionalExpression()
}

void  MemberValueArrayInitializer():
{}
{
  "{" MemberValue() ( LOOKAHEAD(2) "," MemberValue() )* [ "," ] "}"
}


/* Annotation Types. */

void AnnotationTypeDeclaration(int modifiers):
{}
{
  "@" "interface" <IDENTIFIER> AnnotationTypeBody()
}

void AnnotationTypeBody():
{}
{
  "{" ( AnnotationTypeMemberDeclaration() )* "}"
}

void AnnotationTypeMemberDeclaration():
{
   int modifiers;
}
{
 modifiers = Modifiers()
 (
   LOOKAHEAD(Type() <IDENTIFIER> "(")
   Type() <IDENTIFIER> "(" ")" [ DefaultValue() ] ";"
  |
   ClassOrInterfaceDeclaration(modifiers, null)
  |
   EnumDeclaration(modifiers)
  |
   AnnotationTypeDeclaration(modifiers)
  |
   FieldDeclaration(modifiers)
 )
 |
   ( ";" )
}

void DefaultValue():
{}
{
  "default" MemberValue()
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<PART_LETTER>)* >
|
  < #LETTER:
      [  // all chars for which Character.isIdentifierStart is true
         "$",
         "A"-"Z",
         "_",
         "a"-"z"
      ]
  >
|
  < #PART_LETTER:
      [  // all chars for which Character.isIdentifierPart is true
         "$",
         "0"-"9",
         "A"-"Z",
         "_",
         "a"-"z"
      ]
  >
}

TOKEN: // just to be safe, in actions, we might get random stuff for non-java?
{
 <ACT_TOK: ~[]>
}
