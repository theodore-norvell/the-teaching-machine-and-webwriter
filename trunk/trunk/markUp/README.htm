<html>

<head>
<title>New Page 1</title>
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">
</head>

<body>

<h1>MarkUpCPP</h1>

<p>This Applet contains a <font color="#008080"><em>String</em></font> to <font
color="#008080"><em>String</em></font> function called <font color="#008080"><em>markUpString</em></font>
which converts a dull looking plain ascii C++ program into a glorious <font
color="#FF0000">tech</font><font color="#008000">nico</font><font color="#0000FF">lour</font>
HTML string suitable for placing in a PRE element.</p>

<p>Note this Applet does not fetch the strings from a server. The URL2String applet
already does that.</p>

<p><strong>Files you might want to change</strong> 

<ul>
  <li>MarkUp.java&nbsp; --- This is the Applet.</li>
  <li>cpp.jj&nbsp; --- This is a JavaCC specification of the lexical syntax of C++ with extra
    code for HTML markup.</li>
</ul>

<p><strong>Files you don't want to change.</strong> These are generated by JavaCC from
cpp.jj.&nbsp; So don't edit them. If you don't like something, edit cpp.jj and rerun
JavaCC. 

<ul>
  <li>ASCII_CharStream.java -- turns a Reader into what the lexical analizer wants.</li>
  <li>cppparserTokenManager.java -- This is the lexical analyser.</li>
  <li>cppparserConstants.java -- just a bunch of constants declarations.</li>
  <li>ParseException.java -- Not used. No need to jar its .class file.</li>
  <li>Token.java -- Token objects each represent one token of input.</li>
  <li>TokenMgrError.java -- execption in case of lexical errors.</li>
</ul>

<p><strong>JavaCC</strong> -- You can get JavaCC from metamata from <a
href="http://www.metamata.com/download/javacc_form.html">this page</a>. Make sure you get
the documentation as well as the program itself. Once JavaCC is installed, make sure the
directory containing <strong>javacc.bat</strong> is on your path. The following command
will then generate the lexical analyser and associated files:</p>

<pre>    javacc cpp.jj</pre>

<p><strong>What's New.</strong> The original version in the teaching machine is built for
speed and correctness. In an application like colourinzing, you don't have to do a perfect
job, and you don't have to classify every token precisely. In an Applet, space is probably
a priority over speed, since download time predominates.</p>

<p>Operators and punctuation tokens are no longer recognized individually, they will be
treated as miscellaneous characters.&nbsp; The syntax of numbers is (over) simplifed.
Keywords are distinguished from identifiers using a set of strings, rather than in the
automaton. These optimizations reduce the size of the token manager .class file from 37 to
16 kB and the constants file from 8 to 2 kB.&nbsp; This is probably close to a
hand-crafted function to do the same job.</p>
</body>
</html>
