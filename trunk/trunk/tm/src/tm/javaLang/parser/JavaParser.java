/* Generated By:JJTree&JavaCC: Do not edit this line. JavaParser.java */
package tm.javaLang.parser;

import java.util.* ;
import java.io.Reader ;

import tm.clc.analysis.IdTable ;
import tm.clc.analysis.ScopedName ;
import tm.clc.parser.* ;
import tm.javaLang.analysis.Java_SpecifierSet ;
import tm.javaLang.analysis.Java_Specifiers ;
import tm.javaLang.analysis.Java_ScopedName ;
import tm.virtualMachine.CodeStore ;
import tm.interfaces.SourceCoords ;
import tm.utilities.Assert ;
import tm.utilities.Debug ;
import tm.utilities.TMException ;
import tm.utilities.TMFile ;

public class JavaParser/*@bgen(jjtree)*/implements JavaParserTreeConstants, JavaParserConstants {/*@bgen(jjtree)*/
  protected JJTJavaParserState jjtree = new JJTJavaParserState();
    IdTable idTable = new IdTable() ;

    TMFile file ;

    public JavaParser( Reader reader, CodeStore codeStore, TMFile file ) {
        this( reader ) ;
        this.file = file ;
        codeStore.startNewFile( file ) ;
        token_source.setCodeStore( codeStore, file ) ; }

    void jjtreeOpenNodeScope(Node n) {
        ((SimpleNode)n).setCoords( new SourceCoords( file, getToken(1).beginLine ) ) ;
    }
    void jjtreeCloseNodeScope(Node n) {
    }

    // These flags describe the syntactic context
    // of declarations.
    static final int TOP_LEVEL = 1 ;
    static final int CONCRETE_CLASS_MEMBER = 2 ;
    static final int ABSTRACT_CLASS_MEMBER = 4 ;
    static final int INTERFACE_MEMBER = 8 ;
    static final int LOCAL = 16 ;

/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */
  final public SimpleNode CompilationUnit() throws ParseException {
 /*@bgen(jjtree) CompilationUnit */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCOMPILATIONUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      try {
        OptPackageDeclaration();
        ImportDeclarations();
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ABSTRACT:
          case CLASS:
          case FINAL:
          case INTERFACE:
          case PRIVATE:
          case PROTECTED:
          case PUBLIC:
          case STATIC:
          case STRICTFP:
          case SEMICOLON:
            ;
            break;
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
          TypeDeclaration();
        }
        jj_consume_token(0);
                      jjtn000.setString( file.getFileName() ) ;
                      {if (true) return jjtn000;}
      } catch (TMException e) {
        int lineNumber ;
        if( e instanceof ParseException && ((ParseException)e).currentToken != null) {
            lineNumber = ((ParseException)e).currentToken.next.beginLine ; }
        else {
            lineNumber = getToken(0).beginLine ; }
      e.setSourceCoords( new SourceCoords( file, lineNumber ) ) ;
      {if (true) throw e ;}
      } catch (RuntimeException e) {
       Debug.getInstance().msg(Debug.COMPILE, "Exception thrown while parsing line "+getToken(0).beginLine+" of file "+file.getFileName());
       {if (true) throw e ;}
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void OptPackageDeclaration() throws ParseException {
 /*@bgen(jjtree) OptPackageDeclaration */
    SimpleNode jjtn000 = new SimpleNode(this, JJTOPTPACKAGEDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);ScopedName name ;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PACKAGE:
        jj_consume_token(PACKAGE);
        name = Name();
        jj_consume_token(SEMICOLON);
              jjtn000.setName( name ) ;
              jjtn000.setBoolean( true ) ;
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void ImportDeclarations() throws ParseException {
 /*@bgen(jjtree) ImportDeclarations */
  SimpleNode jjtn000 = new SimpleNode(this, JJTIMPORTDECLARATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPORT:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        ImportDeclaration();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
    }
  }

  final public void ImportDeclaration() throws ParseException {
 /*@bgen(jjtree) ImportDeclaration */
    SimpleNode jjtn000 = new SimpleNode(this, JJTIMPORTDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);ScopedName name ;
    try {
      jj_consume_token(IMPORT);
      name = Name();
         jjtn000.setName( name ) ;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        jj_consume_token(STAR);
             jjtn000.setBoolean( true );
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void TypeDeclaration() throws ParseException {
    if (jj_2_1(2147483647)) {
      ClassDeclaration(TOP_LEVEL);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case INTERFACE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case STRICTFP:
        InterfaceDeclaration(TOP_LEVEL);
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*
 * Declaration syntax follows.
 */
  final public void ClassDeclaration(int context) throws ParseException {
    Java_SpecifierSet specSet = new Java_SpecifierSet() ;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case STRICTFP:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        Static(specSet, context==CONCRETE_CLASS_MEMBER || context==ABSTRACT_CLASS_MEMBER || context==INTERFACE_MEMBER);
        break;
      case ABSTRACT:
        Abstract(specSet, true);
        break;
      case FINAL:
        Final(specSet, true);
        break;
      case PUBLIC:
        Public(specSet, context==CONCRETE_CLASS_MEMBER || context==ABSTRACT_CLASS_MEMBER || context==INTERFACE_MEMBER || context==TOP_LEVEL);
        break;
      case PROTECTED:
        Protected(specSet, context==CONCRETE_CLASS_MEMBER || context==ABSTRACT_CLASS_MEMBER);
        break;
      case PRIVATE:
        Private(specSet, context==CONCRETE_CLASS_MEMBER || context==ABSTRACT_CLASS_MEMBER);
        break;
      case STRICTFP:
        Strictfp(specSet, true);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    // Add implicit modifiers
    if( context==INTERFACE_MEMBER ) {
        specSet.add( Java_Specifiers.SP_PUBLIC ) ; }
    UnmodifiedClassDeclaration(specSet);
  }

  final public void UnmodifiedClassDeclaration(Java_SpecifierSet specSet) throws ParseException {
 /*@bgen(jjtree) UnmodifiedClassDeclaration */
    SimpleNode jjtn000 = new SimpleNode(this, JJTUNMODIFIEDCLASSDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);ScopedName name ;
    try {
    jjtn000.setSpecSet( specSet ) ;
      jj_consume_token(CLASS);
      name = SimpleName();
    jjtn000.setName( name ) ;
      OptClassExtendsClause();
      OptImplementsClause();
      ClassBody(specSet.contains( Java_Specifiers.SP_ABSTRACT )
                 ? ABSTRACT_CLASS_MEMBER
                 : CONCRETE_CLASS_MEMBER);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void OptClassExtendsClause() throws ParseException {
 /*@bgen(jjtree) OptClassExtendsClause */
    SimpleNode jjtn000 = new SimpleNode(this, JJTOPTCLASSEXTENDSCLAUSE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);ScopedName name ;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        name = Name();
      jjtn000.setName( name ) ;
      jjtn000.setBoolean( true ) ;
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void OptImplementsClause() throws ParseException {
 /*@bgen(jjtree) OptImplementsClause */
  SimpleNode jjtn000 = new SimpleNode(this, JJTOPTIMPLEMENTSCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLEMENTS:
        jj_consume_token(IMPLEMENTS);
        NameList();
      jjtn000.setBoolean( true ) ;
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void ClassBody(int context) throws ParseException {
 /*@bgen(jjtree) ClassBody */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCLASSBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);boolean hasConstructor = false ;
  boolean isConstructor ;
    try {
      jj_consume_token(LBRACE);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case CLASS:
        case DOUBLE:
        case FINAL:
        case FLOAT:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOID:
        case VOLATILE:
        case STRICTFP:
        case IDENTIFIER:
        case LBRACE:
        case SEMICOLON:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
        isConstructor = ClassBodyDeclaration(context);
          hasConstructor = hasConstructor || isConstructor ;
      }
      jj_consume_token(RBRACE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.setBoolean( hasConstructor ) ;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public boolean ClassBodyDeclaration(int context) throws ParseException {
    if (jj_2_2(2147483647)) {
      InitializerBlock();
    {if (true) return false ;}
    } else if (jj_2_3(2147483647)) {
      ClassDeclaration(context);
    {if (true) return false ;}
    } else if (jj_2_4(2147483647)) {
      InterfaceDeclaration(context);
    {if (true) return false ;}
    } else if (jj_2_5(2147483647)) {
      ConstructorDeclaration();
    {if (true) return true ;}
    } else if (jj_2_6(2147483647)) {
      MethodDeclaration(context);
    {if (true) return false ;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case TRANSIENT:
      case VOLATILE:
      case IDENTIFIER:
        FieldDeclaration(context);
    {if (true) return false ;}
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
    {if (true) return false ;}
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

// This production is to determine lookahead only.
  final public void MethodDeclarationLookahead() throws ParseException {
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case SYNCHRONIZED:
      case STRICTFP:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      case STATIC:
        jj_consume_token(STATIC);
        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
        break;
      case FINAL:
        jj_consume_token(FINAL);
        break;
      case NATIVE:
        jj_consume_token(NATIVE);
        break;
      case SYNCHRONIZED:
        jj_consume_token(SYNCHRONIZED);
        break;
      case STRICTFP:
        jj_consume_token(STRICTFP);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    ResultType(null);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
  }

  final public void InterfaceDeclaration(int context) throws ParseException {
    Java_SpecifierSet specSet = new Java_SpecifierSet() ;
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case STRICTFP:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        Static(specSet, context==CONCRETE_CLASS_MEMBER || context==ABSTRACT_CLASS_MEMBER ||  context==INTERFACE_MEMBER);
        break;
      case ABSTRACT:
        Abstract(specSet, true);
        break;
      case PUBLIC:
        Public(specSet, true);
        break;
      case PROTECTED:
        Protected(specSet, context==CONCRETE_CLASS_MEMBER || context==ABSTRACT_CLASS_MEMBER);
        break;
      case PRIVATE:
        Private(specSet, context==CONCRETE_CLASS_MEMBER || context==ABSTRACT_CLASS_MEMBER);
        break;
      case STRICTFP:
        Strictfp(specSet, true);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    // Add implicit modifiers
    specSet.add( Java_Specifiers.SP_ABSTRACT ) ;
    if( context==INTERFACE_MEMBER ) {
        specSet.add( Java_Specifiers.SP_PUBLIC ) ; }
    UnmodifiedInterfaceDeclaration(specSet);
  }

  final public void UnmodifiedInterfaceDeclaration(Java_SpecifierSet specSet) throws ParseException {
 /*@bgen(jjtree) UnmodifiedInterfaceDeclaration */
    SimpleNode jjtn000 = new SimpleNode(this, JJTUNMODIFIEDINTERFACEDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);ScopedName name ;
    try {
    jjtn000.setSpecSet( specSet ) ;
      jj_consume_token(INTERFACE);
      name = SimpleName();
    jjtn000.setName( name ) ;
      OptInterfaceExtendsClause();
      InterfaceBody();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void InterfaceBody() throws ParseException {
 /*@bgen(jjtree) InterfaceBody */
  SimpleNode jjtn000 = new SimpleNode(this, JJTINTERFACEBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case CLASS:
        case DOUBLE:
        case FINAL:
        case FLOAT:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOID:
        case VOLATILE:
        case STRICTFP:
        case IDENTIFIER:
        case SEMICOLON:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_7;
        }
        InterfaceMemberDeclaration();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void OptInterfaceExtendsClause() throws ParseException {
 /*@bgen(jjtree) OptInterfaceExtendsClause */
  SimpleNode jjtn000 = new SimpleNode(this, JJTOPTINTERFACEEXTENDSCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        NameList();
      jjtn000.setBoolean( true ) ;
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void InterfaceMemberDeclaration() throws ParseException {
    if (jj_2_7(2147483647)) {
      ClassDeclaration(INTERFACE_MEMBER);
    } else if (jj_2_8(2147483647)) {
      InterfaceDeclaration(INTERFACE_MEMBER);
    } else if (jj_2_9(2147483647)) {
      MethodDeclaration(INTERFACE_MEMBER);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case TRANSIENT:
      case VOLATILE:
      case IDENTIFIER:
        FieldDeclaration(INTERFACE_MEMBER);
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void FieldDeclaration(int context) throws ParseException {
    Java_SpecifierSet specSet = new Java_SpecifierSet() ;
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case TRANSIENT:
      case VOLATILE:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        Public(specSet, true);
        break;
      case PROTECTED:
        Protected(specSet, context==CONCRETE_CLASS_MEMBER || context==ABSTRACT_CLASS_MEMBER);
        break;
      case PRIVATE:
        Private(specSet, context==CONCRETE_CLASS_MEMBER || context==ABSTRACT_CLASS_MEMBER);
        break;
      case STATIC:
        Static(specSet, true);
        break;
      case FINAL:
        Final(specSet, true);
        break;
      case TRANSIENT:
        Transient(specSet, context==CONCRETE_CLASS_MEMBER || context==ABSTRACT_CLASS_MEMBER);
        break;
      case VOLATILE:
        Volatile(specSet, context==CONCRETE_CLASS_MEMBER || context==ABSTRACT_CLASS_MEMBER);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    // Add implicit modifiers
    if( context==INTERFACE_MEMBER ) {
        specSet.add( Java_Specifiers.SP_PUBLIC ) ;
        specSet.add( Java_Specifiers.SP_FINAL ) ;
        specSet.add( Java_Specifiers.SP_STATIC ) ; }
    Type(specSet);
    VariableDeclarator(specSet);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      VariableDeclarator(specSet);
    }
    jj_consume_token(SEMICOLON);
  }

  final public void VariableDeclarator(Java_SpecifierSet specSet) throws ParseException {
 /*@bgen(jjtree) VariableDeclarator */
    SimpleNode jjtn000 = new SimpleNode(this, JJTVARIABLEDECLARATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);ScopedName name ;
    int arrayDimCount = 0 ;
    try {
    jjtn000.setSpecSet( specSet ) ;
      name = SimpleName();
    jjtn000.setName( name ) ;
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_10;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
              arrayDimCount++ ;
      }
    jjtn000.setInt( arrayDimCount ) ;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        VariableInitializer();
        break;
      default:
        jj_la1[22] = jj_gen;
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      if( specSet.contains( Java_Specifiers.SP_FINAL )
       && specSet.contains( Java_Specifiers.SP_STATIC ) ) {
        Assert.error( "static final fields must have initializers" ) ; }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void VariableInitializer() throws ParseException {
 /*@bgen(jjtree) VariableInitializer */
  SimpleNode jjtn000 = new SimpleNode(this, JJTVARIABLEINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      VariableInitializerVoid();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void VariableInitializerVoid() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      ArrayInitializer();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case DECIMAL_LITERAL:
    case HEX_LITERAL:
    case OCTAL_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      Expression();
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ArrayInitializer() throws ParseException {
 /*@bgen(jjtree) ArrayInitializer */
  SimpleNode jjtn000 = new SimpleNode(this, JJTARRAYINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case DECIMAL_LITERAL:
      case HEX_LITERAL:
      case OCTAL_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        VariableInitializerVoid();
        label_11:
        while (true) {
          if (jj_2_10(2)) {
            ;
          } else {
            break label_11;
          }
          jj_consume_token(COMMA);
          VariableInitializerVoid();
        }
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void ConstructorDeclaration() throws ParseException {
 /*@bgen(jjtree) ConstructorDeclaration */
    SimpleNode jjtn000 = new SimpleNode(this, JJTCONSTRUCTORDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);Java_SpecifierSet specSet = new Java_SpecifierSet() ;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          Public(specSet, true);
          break;
        case PROTECTED:
          Protected(specSet, true);
          break;
        case PRIVATE:
          Private(specSet, true);
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      ConstructorDeclarator(specSet);
      OptThrowsClause();
      ConstructorBody();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void ConstructorDeclarator(Java_SpecifierSet specSet) throws ParseException {
 /*@bgen(jjtree) ConstructorDeclarator */
    SimpleNode jjtn000 = new SimpleNode(this, JJTCONSTRUCTORDECLARATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);ScopedName name ;
    int arrayDimCount = 0 ;
    try {
    jjtn000.setSpecSet( specSet ) ;
      name = SimpleName();
    jjtn000.setName( name ) ;
      FormalParameters();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void OptThrowsClause() throws ParseException {
 /*@bgen(jjtree) OptThrowsClause */
  SimpleNode jjtn000 = new SimpleNode(this, JJTOPTTHROWSCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case THROWS:
        jj_consume_token(THROWS);
        NameList();
      jjtn000.setBoolean( true ) ;
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void MethodDeclaration(int context) throws ParseException {
 /*@bgen(jjtree) MethodDeclaration */
    SimpleNode jjtn000 = new SimpleNode(this, JJTMETHODDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);Java_SpecifierSet specSet = new Java_SpecifierSet() ;
    try {
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case FINAL:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case STATIC:
        case SYNCHRONIZED:
        case STRICTFP:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_12;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          Public(specSet, true);
          break;
        case PROTECTED:
          Protected(specSet, context==CONCRETE_CLASS_MEMBER || context==ABSTRACT_CLASS_MEMBER);
          break;
        case PRIVATE:
          Private(specSet, context==CONCRETE_CLASS_MEMBER || context==ABSTRACT_CLASS_MEMBER);
          break;
        case STATIC:
          Static(specSet, context==CONCRETE_CLASS_MEMBER || context==ABSTRACT_CLASS_MEMBER);
          break;
        case ABSTRACT:
          Abstract(specSet, context==ABSTRACT_CLASS_MEMBER || context==INTERFACE_MEMBER);
          break;
        case FINAL:
          Final(specSet, context==CONCRETE_CLASS_MEMBER || context==ABSTRACT_CLASS_MEMBER);
          break;
        case NATIVE:
          Native(specSet, context==CONCRETE_CLASS_MEMBER || context==ABSTRACT_CLASS_MEMBER);
          break;
        case SYNCHRONIZED:
          Synchronized(specSet, context==CONCRETE_CLASS_MEMBER || context==ABSTRACT_CLASS_MEMBER);
          break;
        case STRICTFP:
          Strictfp(specSet, context==CONCRETE_CLASS_MEMBER || context==ABSTRACT_CLASS_MEMBER);
          break;
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    if(  specSet.contains( Java_Specifiers.SP_ABSTRACT )
      && (  specSet.contains( Java_Specifiers.SP_PRIVATE )
         || specSet.contains( Java_Specifiers.SP_STATIC )
         || specSet.contains( Java_Specifiers.SP_FINAL )
         || specSet.contains( Java_Specifiers.SP_NATIVE )
         || specSet.contains( Java_Specifiers.SP_STRICTFP )
         || specSet.contains( Java_Specifiers.SP_SYNCHRONIZED ) ) ) {
            Assert.error( "abstract method can not be private, static, final, native, strictfp, or synchronized" ) ; }

    if(   specSet.contains( Java_Specifiers.SP_NATIVE )
       && specSet.contains( Java_Specifiers.SP_STRICTFP ) ) {
            Assert.error( "native method can not be strictfp" ) ; }
    // Add implicit modifiers
    if( context==INTERFACE_MEMBER ) {
        specSet.add( Java_Specifiers.SP_PUBLIC ) ;
        specSet.add( Java_Specifiers.SP_ABSTRACT ) ; }
      ResultType(specSet);
      MethodDeclarator(specSet);
      OptThrowsClause();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        MethodBody();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      if( specSet.contains( Java_Specifiers.SP_ABSTRACT ) ) {
        Assert.error( "Abstract method has body" ) ; }
      else if( specSet.contains( Java_Specifiers.SP_NATIVE ) ) {
        Assert.error( "Native method has body" ) ; }
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      if( ! specSet.contains( Java_Specifiers.SP_NATIVE )
       && ! specSet.contains( Java_Specifiers.SP_ABSTRACT ) ) {
        Assert.error( "Method must have a body unless abstact or native" ) ; }
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void MethodDeclarator(Java_SpecifierSet specSet) throws ParseException {
 /*@bgen(jjtree) MethodDeclarator */
    SimpleNode jjtn000 = new SimpleNode(this, JJTMETHODDECLARATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);ScopedName name ;
    int arrayDimCount = 0 ;
    try {
    jjtn000.setSpecSet( specSet ) ;
      name = SimpleName();
    jjtn000.setName( name ) ;
      FormalParameters();
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_13;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
              arrayDimCount++;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.setInt( arrayDimCount ) ;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void FormalParameters() throws ParseException {
 /*@bgen(jjtree) FormalParameters */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFORMALPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case IDENTIFIER:
        FormalParameter();
        label_14:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[33] = jj_gen;
            break label_14;
          }
          jj_consume_token(COMMA);
          FormalParameter();
        }
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void FormalParameter() throws ParseException {
 /*@bgen(jjtree) FormalParameter */
    SimpleNode jjtn000 = new SimpleNode(this, JJTFORMALPARAMETER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);Java_SpecifierSet specSet = new Java_SpecifierSet() ;
    ScopedName name ;
    int arrayDimCount = 0 ;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
        Final(specSet, true);
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      Type(specSet);
    jjtn000.setSpecSet( specSet ) ;
      name = SimpleName();
    jjtn000.setName( name ) ;
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[36] = jj_gen;
          break label_15;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
              arrayDimCount++ ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.setInt( arrayDimCount ) ;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void ConstructorBody() throws ParseException {
 /*@bgen(jjtree) ConstructorBody */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCONSTRUCTORBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      if (jj_2_11(2147483647)) {
        ExplicitConstructorInvocation();
        jjtn000.setBoolean( true ) ;
      } else {
        ;
      }
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CLASS:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case INTERFACE:
        case LONG:
        case NEW:
        case NULL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case RETURN:
        case SHORT:
        case STATIC:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRUE:
        case TRY:
        case VOID:
        case WHILE:
        case STRICTFP:
        case DECIMAL_LITERAL:
        case HEX_LITERAL:
        case OCTAL_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_16;
        }
        BlockStatement();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void ExplicitConstructorInvocation() throws ParseException {
    if (jj_2_12(2147483647)) {
      ThisExplicitConstructorInvocation();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case DECIMAL_LITERAL:
      case HEX_LITERAL:
      case OCTAL_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
        SuperExplicitConstructorInvocation();
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void ThisExplicitConstructorInvocation() throws ParseException {
 /*@bgen(jjtree) ThisExplicitConstructorInvocation */
  SimpleNode jjtn000 = new SimpleNode(this, JJTTHISEXPLICITCONSTRUCTORINVOCATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(THIS);
      Arguments();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void SuperExplicitConstructorInvocation() throws ParseException {
 /*@bgen(jjtree) SuperExplicitConstructorInvocation */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSUPEREXPLICITCONSTRUCTORINVOCATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      if (jj_2_13(2147483647)) {
        ExpressionNameOrPrimary();
        jj_consume_token(DOT);
        jjtn000.setBoolean( true ) ;
      } else {
        ;
      }
      jj_consume_token(SUPER);
      Arguments();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void MethodBody() throws ParseException {
 /*@bgen(jjtree) MethodBody */
  SimpleNode jjtn000 = new SimpleNode(this, JJTMETHODBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CLASS:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case INTERFACE:
        case LONG:
        case NEW:
        case NULL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case RETURN:
        case SHORT:
        case STATIC:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRUE:
        case TRY:
        case VOID:
        case WHILE:
        case STRICTFP:
        case DECIMAL_LITERAL:
        case HEX_LITERAL:
        case OCTAL_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[39] = jj_gen;
          break label_17;
        }
        BlockStatement();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void InitializerBlock() throws ParseException {
 /*@bgen(jjtree) InitializerBlock */
  SimpleNode jjtn000 = new SimpleNode(this, JJTINITIALIZERBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        jj_consume_token(STATIC);
              jjtn000.setBoolean( true ) ;
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
      Block();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

/*
 * Type, name and expression syntax follows.
 */
  final public void Type(Java_SpecifierSet specSet) throws ParseException {
    int arrayDimCount = 0 ;
    ScopedName name ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
      PrimitiveType(specSet);
      break;
    case IDENTIFIER:
      name = Name();
                     specSet.add_type_name( name ) ;
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[42] = jj_gen;
        break label_18;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
             arrayDimCount++;
    }
    specSet.setArrayDimCount( arrayDimCount ) ;
  }

  final public void PrimitiveType(Java_SpecifierSet specSet) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
                specSet.add( Java_Specifiers.SP_BOOLEAN ) ;
      break;
    case CHAR:
      jj_consume_token(CHAR);
                specSet.add( Java_Specifiers.SP_CHAR ) ;
      break;
    case BYTE:
      jj_consume_token(BYTE);
                specSet.add( Java_Specifiers.SP_BYTE ) ;
      break;
    case SHORT:
      jj_consume_token(SHORT);
                specSet.add( Java_Specifiers.SP_SHORT ) ;
      break;
    case INT:
      jj_consume_token(INT);
                specSet.add( Java_Specifiers.SP_INT ) ;
      break;
    case LONG:
      jj_consume_token(LONG);
                specSet.add( Java_Specifiers.SP_LONG ) ;
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
                specSet.add( Java_Specifiers.SP_FLOAT ) ;
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
                specSet.add( Java_Specifiers.SP_DOUBLE ) ;
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ResultType(Java_SpecifierSet specSet) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      jj_consume_token(VOID);
             specSet.add( Java_Specifiers.SP_VOID ) ;
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      Type(specSet);
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public ScopedName Name() throws ParseException {
    ScopedName name ;
    String id ;
    id = Identifier();
    name = new Java_ScopedName( id ) ;
    label_19:
    while (true) {
      if (jj_2_14(2)) {
        ;
      } else {
        break label_19;
      }
      jj_consume_token(DOT);
      id = Identifier();
      name.append( id ) ;
    }
    {if (true) return name ;}
    throw new Error("Missing return statement in function");
  }

  final public void NameList() throws ParseException {
    NameNode();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[45] = jj_gen;
        break label_20;
      }
      jj_consume_token(COMMA);
      NameNode();
    }
  }

  final public void NameNode() throws ParseException {
 /*@bgen(jjtree) NameNode */
    SimpleNode jjtn000 = new SimpleNode(this, JJTNAMENODE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);ScopedName name ;
    try {
      name = Name();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.setName( name ) ;
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

/*
 * Expression syntax follows.
 */
  final public void Expression() throws ParseException {
  Token t ;
    ConditionalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
    case PLUSASSIGN:
    case MINUSASSIGN:
    case STARASSIGN:
    case SLASHASSIGN:
    case ANDASSIGN:
    case ORASSIGN:
    case XORASSIGN:
    case REMASSIGN:
    case LSHIFTASSIGN:
    case RSIGNEDSHIFTASSIGN:
    case RUNSIGNEDSHIFTASSIGN:
      t = AssignmentOperator();
      Expression();
      SimpleNode jjtn001 = new SimpleNode(this, JJTBINOP);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
     jjtn001.setInt( t.kind ); jjtn001.setString( idTable.inter( t.image ) );
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
  }

  final public Token AssignmentOperator() throws ParseException {
  Token t ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      t = jj_consume_token(ASSIGN);
      break;
    case STARASSIGN:
      t = jj_consume_token(STARASSIGN);
      break;
    case SLASHASSIGN:
      t = jj_consume_token(SLASHASSIGN);
      break;
    case REMASSIGN:
      t = jj_consume_token(REMASSIGN);
      break;
    case PLUSASSIGN:
      t = jj_consume_token(PLUSASSIGN);
      break;
    case MINUSASSIGN:
      t = jj_consume_token(MINUSASSIGN);
      break;
    case LSHIFTASSIGN:
      t = jj_consume_token(LSHIFTASSIGN);
      break;
    case RSIGNEDSHIFTASSIGN:
      t = jj_consume_token(RSIGNEDSHIFTASSIGN);
      break;
    case RUNSIGNEDSHIFTASSIGN:
      t = jj_consume_token(RUNSIGNEDSHIFTASSIGN);
      break;
    case ANDASSIGN:
      t = jj_consume_token(ANDASSIGN);
      break;
    case XORASSIGN:
      t = jj_consume_token(XORASSIGN);
      break;
    case ORASSIGN:
      t = jj_consume_token(ORASSIGN);
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return t ;}
    throw new Error("Missing return statement in function");
  }

  final public void ConditionalExpression() throws ParseException {
    ConditionalOrExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
      jj_consume_token(HOOK);
      Expression();
      jj_consume_token(COLON);
                              SimpleNode jjtn001 = new SimpleNode(this, JJTCONDITIONAL);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                              jjtreeOpenNodeScope(jjtn001);
      try {
        ConditionalExpression();
      } catch (Throwable jjte001) {
                              if (jjtc001) {
                                jjtree.clearNodeScope(jjtn001);
                                jjtc001 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte001 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte001;}
                              }
                              if (jjte001 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte001;}
                              }
                              {if (true) throw (Error)jjte001;}
      } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  3);
                                jjtreeCloseNodeScope(jjtn001);
                              }
      }
      break;
    default:
      jj_la1[48] = jj_gen;
      ;
    }
  }

  final public void ConditionalOrExpression() throws ParseException {
  Token t;
    ConditionalAndExpression();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        ;
        break;
      default:
        jj_la1[49] = jj_gen;
        break label_21;
      }
      t = jj_consume_token(SC_OR);
      ConditionalAndExpression();
      SimpleNode jjtn001 = new SimpleNode(this, JJTBINOP);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
     jjtn001.setInt( t.kind ); jjtn001.setString( idTable.inter( t.image ) );
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
  }

  final public void ConditionalAndExpression() throws ParseException {
  Token t;
    InclusiveOrExpression();
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        ;
        break;
      default:
        jj_la1[50] = jj_gen;
        break label_22;
      }
      t = jj_consume_token(SC_AND);
      InclusiveOrExpression();
      SimpleNode jjtn001 = new SimpleNode(this, JJTBINOP);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
     jjtn001.setInt( t.kind ); jjtn001.setString( idTable.inter( t.image ) );
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
  }

  final public void InclusiveOrExpression() throws ParseException {
  Token t ;
    ExclusiveOrExpression();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[51] = jj_gen;
        break label_23;
      }
      t = jj_consume_token(BIT_OR);
      ExclusiveOrExpression();
      SimpleNode jjtn001 = new SimpleNode(this, JJTBINOP);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
     jjtn001.setInt( t.kind ); jjtn001.setString( idTable.inter( t.image ) );
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
  }

  final public void ExclusiveOrExpression() throws ParseException {
  Token t ;
    AndExpression();
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[52] = jj_gen;
        break label_24;
      }
      t = jj_consume_token(XOR);
      AndExpression();
         SimpleNode jjtn001 = new SimpleNode(this, JJTBINOP);
         boolean jjtc001 = true;
         jjtree.openNodeScope(jjtn001);
         jjtreeOpenNodeScope(jjtn001);
      try {
         jjtree.closeNodeScope(jjtn001,  2);
         jjtc001 = false;
         jjtreeCloseNodeScope(jjtn001);
        jjtn001.setInt( t.kind ); jjtn001.setString( idTable.inter( t.image ) );
      } finally {
         if (jjtc001) {
           jjtree.closeNodeScope(jjtn001,  2);
           jjtreeCloseNodeScope(jjtn001);
         }
      }
    }
  }

  final public void AndExpression() throws ParseException {
  Token t ;
    EqualityExpression();
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        jj_la1[53] = jj_gen;
        break label_25;
      }
      t = jj_consume_token(BIT_AND);
      EqualityExpression();
      SimpleNode jjtn001 = new SimpleNode(this, JJTBINOP);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
     jjtn001.setInt( t.kind ); jjtn001.setString( idTable.inter( t.image ) );
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
  }

  final public void EqualityExpression() throws ParseException {
  Token t ;
    InstanceOfExpression();
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        jj_la1[54] = jj_gen;
        break label_26;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        t = jj_consume_token(EQ);
        break;
      case NE:
        t = jj_consume_token(NE);
        break;
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      InstanceOfExpression();
      SimpleNode jjtn001 = new SimpleNode(this, JJTBINOP);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
     jjtn001.setInt( t.kind ); jjtn001.setString( idTable.inter( t.image ) );
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
  }

  final public void InstanceOfExpression() throws ParseException {
    Java_SpecifierSet specSet = new Java_SpecifierSet() ;
    RelationalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTANCEOF:
      jj_consume_token(INSTANCEOF);
      Type(specSet);
        SimpleNode jjtn001 = new SimpleNode(this, JJTINSTANCEOF);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtreeOpenNodeScope(jjtn001);
      try {
        jjtree.closeNodeScope(jjtn001,  1);
        jjtc001 = false;
        jjtreeCloseNodeScope(jjtn001);
        jjtn001.setSpecSet( specSet ) ;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  1);
          jjtreeCloseNodeScope(jjtn001);
        }
      }
      break;
    default:
      jj_la1[56] = jj_gen;
      ;
    }
  }

  final public void RelationalExpression() throws ParseException {
  Token t ;
    ShiftExpression();
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case LE:
      case GE:
        ;
        break;
      default:
        jj_la1[57] = jj_gen;
        break label_27;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        t = jj_consume_token(LT);
        break;
      case GT:
        t = jj_consume_token(GT);
        break;
      case LE:
        t = jj_consume_token(LE);
        break;
      case GE:
        t = jj_consume_token(GE);
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ShiftExpression();
      SimpleNode jjtn001 = new SimpleNode(this, JJTBINOP);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
     jjtn001.setInt( t.kind ); jjtn001.setString( idTable.inter( t.image ) );
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
    }
  }

  final public void ShiftExpression() throws ParseException {
  Token t ;
    AdditiveExpression();
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
      case RSIGNEDSHIFT:
      case RUNSIGNEDSHIFT:
        ;
        break;
      default:
        jj_la1[59] = jj_gen;
        break label_28;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
        t = jj_consume_token(LSHIFT);
        break;
      case RSIGNEDSHIFT:
        t = jj_consume_token(RSIGNEDSHIFT);
        break;
      case RUNSIGNEDSHIFT:
        t = jj_consume_token(RUNSIGNEDSHIFT);
        break;
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      AdditiveExpression();
       SimpleNode jjtn001 = new SimpleNode(this, JJTBINOP);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtreeOpenNodeScope(jjtn001);
      try {
       jjtree.closeNodeScope(jjtn001,  2);
       jjtc001 = false;
       jjtreeCloseNodeScope(jjtn001);
      jjtn001.setInt( t.kind ); jjtn001.setString( idTable.inter( t.image ) );
      } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001,  2);
         jjtreeCloseNodeScope(jjtn001);
       }
      }
    }
  }

  final public void AdditiveExpression() throws ParseException {
  Token t ;
    MultiplicativeExpression();
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[61] = jj_gen;
        break label_29;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[62] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
       SimpleNode jjtn001 = new SimpleNode(this, JJTBINOP);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtreeOpenNodeScope(jjtn001);
      try {
       jjtree.closeNodeScope(jjtn001,  2);
       jjtc001 = false;
       jjtreeCloseNodeScope(jjtn001);
      jjtn001.setInt( t.kind ); jjtn001.setString( idTable.inter( t.image ) );
      } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001,  2);
         jjtreeCloseNodeScope(jjtn001);
       }
      }
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
  Token t ;
    UnaryExpression();
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case REM:
        ;
        break;
      default:
        jj_la1[63] = jj_gen;
        break label_30;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        t = jj_consume_token(STAR);
        break;
      case SLASH:
        t = jj_consume_token(SLASH);
        break;
      case REM:
        t = jj_consume_token(REM);
        break;
      default:
        jj_la1[64] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
       SimpleNode jjtn001 = new SimpleNode(this, JJTBINOP);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtreeOpenNodeScope(jjtn001);
      try {
       jjtree.closeNodeScope(jjtn001,  2);
       jjtc001 = false;
       jjtreeCloseNodeScope(jjtn001);
      jjtn001.setInt( t.kind ); jjtn001.setString( idTable.inter( t.image ) );
      } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001,  2);
         jjtreeCloseNodeScope(jjtn001);
       }
      }
    }
  }

  final public void UnaryExpression() throws ParseException {
  Token t ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
    SimpleNode jjtn001 = new SimpleNode(this, JJTUNARY_PREFIX);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
      try {
    jjtree.closeNodeScope(jjtn001,  1);
    jjtc001 = false;
    jjtreeCloseNodeScope(jjtn001);
   jjtn001.setInt( t.kind ); jjtn001.setString( idTable.inter( t.image ) );
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  1);
      jjtreeCloseNodeScope(jjtn001);
    }
      }
      break;
    case INCR:
    case DECR:
      PreIncDecExpression();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case DECIMAL_LITERAL:
    case HEX_LITERAL:
    case OCTAL_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
      UnaryExpressionNotPlusMinus();
      break;
    default:
      jj_la1[66] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PreIncDecExpression() throws ParseException {
  Token t ;
    t = IncDecOperator();
    UnaryExpression();
      SimpleNode jjtn001 = new SimpleNode(this, JJTUNARY_PREFIX);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
    try {
      jjtree.closeNodeScope(jjtn001,  1);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
     jjtn001.setInt( t.kind ); jjtn001.setString( idTable.inter( t.image ) );
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  1);
        jjtreeCloseNodeScope(jjtn001);
      }
    }
  }

  final public Token IncDecOperator() throws ParseException {
  Token t ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
      t = jj_consume_token(INCR);
      break;
    case DECR:
      t = jj_consume_token(DECR);
      break;
    default:
      jj_la1[67] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return t ;}
    throw new Error("Missing return statement in function");
  }

  final public void UnaryExpressionNotPlusMinus() throws ParseException {
  Token t ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
    case TILDE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TILDE:
        t = jj_consume_token(TILDE);
        break;
      case BANG:
        t = jj_consume_token(BANG);
        break;
      default:
        jj_la1[68] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
    SimpleNode jjtn001 = new SimpleNode(this, JJTUNARY_PREFIX);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
      try {
    jjtree.closeNodeScope(jjtn001,  1);
    jjtc001 = false;
    jjtreeCloseNodeScope(jjtn001);
   jjtn001.setInt( t.kind ); jjtn001.setString( idTable.inter( t.image ) );
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  1);
      jjtreeCloseNodeScope(jjtn001);
    }
      }
      break;
    default:
      jj_la1[69] = jj_gen;
      if (jj_2_15(2147483647)) {
        CastExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case DECIMAL_LITERAL:
        case HEX_LITERAL:
        case OCTAL_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
          PostfixExpression();
          break;
        default:
          jj_la1[70] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there to suppress warnings.
  final public void CastLookahead() throws ParseException {
    if (jj_2_16(2)) {
      jj_consume_token(LPAREN);
      PrimitiveType(null);
    } else if (jj_2_17(2147483647)) {
      jj_consume_token(LPAREN);
      Name();
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        Name();
        jj_consume_token(RPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TILDE:
          jj_consume_token(TILDE);
          break;
        case BANG:
          jj_consume_token(BANG);
          break;
        case LPAREN:
          jj_consume_token(LPAREN);
          break;
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
          break;
        case THIS:
          jj_consume_token(THIS);
          break;
        case SUPER:
          jj_consume_token(SUPER);
          break;
        case NEW:
          jj_consume_token(NEW);
          break;
        case FALSE:
        case NULL:
        case TRUE:
        case DECIMAL_LITERAL:
        case HEX_LITERAL:
        case OCTAL_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
          Literal();
          break;
        default:
          jj_la1[71] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[72] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void CastExpression() throws ParseException {
 /*@bgen(jjtree) CastExpression */
    SimpleNode jjtn000 = new SimpleNode(this, JJTCASTEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);Java_SpecifierSet specSet = new Java_SpecifierSet() ;
    try {
      if (jj_2_18(2147483647)) {
        jj_consume_token(LPAREN);
        Type(specSet);
        jj_consume_token(RPAREN);
        UnaryExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          Type(specSet);
          jj_consume_token(RPAREN);
          UnaryExpressionNotPlusMinus();
          break;
        default:
          jj_la1[73] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.setSpecSet( specSet ) ;
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void PostfixExpression() throws ParseException {
  Token t ;
    ExpressionNameOrPrimary();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
    case DECR:
      t = IncDecOperator();
      SimpleNode jjtn001 = new SimpleNode(this, JJTUNARY_POSTFIX);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
      jjtree.closeNodeScope(jjtn001,  1);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
     jjtn001.setInt( t.kind ); jjtn001.setString( idTable.inter( t.image ) );
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  1);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
      break;
    default:
      jj_la1[74] = jj_gen;
      ;
    }
  }

  final public void ExpressionNameOrPrimary() throws ParseException {
    if (jj_2_19(2147483647)) {
      Primary();
    } else if (jj_2_20(2147483647)) {
      ExpressionName();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case DECIMAL_LITERAL:
      case HEX_LITERAL:
      case OCTAL_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
        Primary();
        break;
      default:
        jj_la1[75] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

// An ExpressionName as an expression.
// See JLS chapters 6 and 15.
  final public void ExpressionName() throws ParseException {
 /*@bgen(jjtree) ExpressionName */
 SimpleNode jjtn000 = new SimpleNode(this, JJTEXPRESSIONNAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtreeOpenNodeScope(jjtn000);ScopedName name ;
    try {
      name = Name();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.setName( name ) ;
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void Primary() throws ParseException {
    PrimaryPrefix();
    label_31:
    while (true) {
      if (jj_2_21(2147483647)) {
        ;
      } else {
        break label_31;
      }
      PrimarySuffix();
    }
  }

  final public void PrimaryPrefix() throws ParseException {
  String id ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case NULL:
    case TRUE:
    case DECIMAL_LITERAL:
    case HEX_LITERAL:
    case OCTAL_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      Literal();
      break;
    case THIS:
      ThisExp();
      break;
    case NEW:
      AllocationExpression();
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      Expression();
                     SimpleNode jjtn001 = new SimpleNode(this, JJTPARENS);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                     jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(RPAREN);
      } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  1);
                       jjtreeCloseNodeScope(jjtn001);
                     }
      }
      break;
    case SUPER:
      SuperPrimaryPrefix();
      break;
    default:
      jj_la1[77] = jj_gen;
      if (jj_2_22(2147483647)) {
        ClassExp();
      } else if (jj_2_23(2147483647)) {
    SimpleNode jjtn002 = new SimpleNode(this, JJTSUBSCRIPT);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtreeOpenNodeScope(jjtn002);
        try {
          ExpressionName();
          jj_consume_token(LBRACKET);
          Expression();
          jj_consume_token(RBRACKET);
        } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte002;}
    }
    if (jjte002 instanceof ParseException) {
      {if (true) throw (ParseException)jjte002;}
    }
    {if (true) throw (Error)jjte002;}
        } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002,  2);
      jjtreeCloseNodeScope(jjtn002);
    }
        }
      } else if (jj_2_24(2147483647)) {
    SimpleNode jjtn003 = new SimpleNode(this, JJTQUALIFIEDALLOCATIONEXPRESSION);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
    jjtreeOpenNodeScope(jjtn003);
        try {
          ExpressionName();
          jj_consume_token(DOT);
          jj_consume_token(NEW);
          id = Identifier();
          Arguments();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACE:
            ClassBody(CONCRETE_CLASS_MEMBER);
            break;
          default:
            jj_la1[76] = jj_gen;
            ;
          }
      jjtree.closeNodeScope(jjtn003, true);
      jjtc003 = false;
      jjtreeCloseNodeScope(jjtn003);
      jjtn003.setString( id ) ;
        } catch (Throwable jjte003) {
    if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte003;}
    }
    if (jjte003 instanceof ParseException) {
      {if (true) throw (ParseException)jjte003;}
    }
    {if (true) throw (Error)jjte003;}
        } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
      jjtreeCloseNodeScope(jjtn003);
    }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          NamePrimaryPrefix();
          break;
        default:
          jj_la1[78] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void ThisExp() throws ParseException {
 /*@bgen(jjtree) ThisExp */
  SimpleNode jjtn000 = new SimpleNode(this, JJTTHISEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(THIS);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

// Primary prefixes starting with "super"
  final public void SuperPrimaryPrefix() throws ParseException {
    if (jj_2_25(2147483647)) {
      SuperMethodCall();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUPER:
        SuperExp();
        break;
      default:
        jj_la1[79] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void SuperMethodCall() throws ParseException {
 /*@bgen(jjtree) SuperMethodCall */
    SimpleNode jjtn000 = new SimpleNode(this, JJTSUPERMETHODCALL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);String id ;
    try {
      jj_consume_token(SUPER);
      jj_consume_token(DOT);
      id = Identifier();
          jjtn000.setString( id ) ;
      Arguments();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void SuperExp() throws ParseException {
 /*@bgen(jjtree) SuperExp */
    SimpleNode jjtn000 = new SimpleNode(this, JJTSUPEREXP);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);String id ;
    try {
      jj_consume_token(SUPER);
      jj_consume_token(DOT);
      id = Identifier();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.setString( id ) ;
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void ClassExp() throws ParseException {
 /*@bgen(jjtree) ClassExp */
    SimpleNode jjtn000 = new SimpleNode(this, JJTCLASSEXP);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);Java_SpecifierSet specSet = new Java_SpecifierSet() ;
    try {
      ResultType(specSet);
      jj_consume_token(DOT);
      jj_consume_token(CLASS);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.setSpecSet( specSet ) ;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

// Primary prefixes that start with a name other than subscripts
//  NamePrimaryPrefix --> Name . this
//                      | Name . super . Identifier
//                      | Name . super . Identifier ( ArgumentList_opt )
//                      | Name ( ArgumentList_opt )
  final public void NamePrimaryPrefix() throws ParseException {
  ScopedName name ;
  String id ;
    name = Name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
          SimpleNode jjtn001 = new SimpleNode(this, JJTMETHODNAMECALL);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtreeOpenNodeScope(jjtn001);
      try {
        Arguments();
                        jjtree.closeNodeScope(jjtn001,  1);
                        jjtc001 = false;
                        jjtreeCloseNodeScope(jjtn001);
                        jjtn001.setName( name ) ;
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  1);
            jjtreeCloseNodeScope(jjtn001);
          }
      }
      break;
    case DOT:
      jj_consume_token(DOT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case THIS:
              SimpleNode jjtn002 = new SimpleNode(this, JJTTHISEXP);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
              jjtreeOpenNodeScope(jjtn002);
        try {
          jj_consume_token(THIS);
                      jjtree.closeNodeScope(jjtn002,  0);
                      jjtc002 = false;
                      jjtreeCloseNodeScope(jjtn002);
                      jjtn002.setName( name ) ;
        } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  0);
                jjtreeCloseNodeScope(jjtn002);
              }
        }
        break;
      case SUPER:
        jj_consume_token(SUPER);
        jj_consume_token(DOT);
        id = Identifier();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
                  SimpleNode jjtn003 = new SimpleNode(this, JJTSUPERMETHODCALL);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
                  jjtreeOpenNodeScope(jjtn003);
          try {
            Arguments();
                    jjtn003.setName( name ) ;
                    jjtree.closeNodeScope(jjtn003,  1);
                    jjtc003 = false;
                    jjtreeCloseNodeScope(jjtn003);
                    jjtn003.setString( id ) ;
          } catch (Throwable jjte003) {
                  if (jjtc003) {
                    jjtree.clearNodeScope(jjtn003);
                    jjtc003 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte003 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte003;}
                  }
                  if (jjte003 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte003;}
                  }
                  {if (true) throw (Error)jjte003;}
          } finally {
                  if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003,  1);
                    jjtreeCloseNodeScope(jjtn003);
                  }
          }
          break;
        default:
          jj_la1[80] = jj_gen;
                  SimpleNode jjtn004 = new SimpleNode(this, JJTSUPEREXP);
                  boolean jjtc004 = true;
                  jjtree.openNodeScope(jjtn004);
                  jjtreeOpenNodeScope(jjtn004);
          try {
                    jjtn004.setName( name ) ;
                    jjtree.closeNodeScope(jjtn004,  0);
                    jjtc004 = false;
                    jjtreeCloseNodeScope(jjtn004);
                    jjtn004.setString( id ) ;
          } finally {
                  if (jjtc004) {
                    jjtree.closeNodeScope(jjtn004,  0);
                    jjtreeCloseNodeScope(jjtn004);
                  }
          }
        }
        break;
      default:
        jj_la1[81] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[82] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PrimarySuffixLookahead() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      break;
    case DOT:
      jj_consume_token(DOT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      case NEW:
        jj_consume_token(NEW);
        break;
      default:
        jj_la1[83] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[84] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PrimarySuffix() throws ParseException {
    String id ;
    int count =2 ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      SimpleNode jjtn001 = new SimpleNode(this, JJTSUBSCRIPT);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(LBRACKET);
        Expression();
        jj_consume_token(RBRACKET);
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
      break;
    case DOT:
      jj_consume_token(DOT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
              SimpleNode jjtn002 = new SimpleNode(this, JJTQUALIFIEDALLOCATIONEXPRESSION);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
              jjtreeOpenNodeScope(jjtn002);
        try {
          jj_consume_token(NEW);
          id = Identifier();
          Arguments();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACE:
            ClassBody(CONCRETE_CLASS_MEMBER);
                                                    count++ ;
            break;
          default:
            jj_la1[85] = jj_gen;
            ;
          }
                 jjtree.closeNodeScope(jjtn002,  count);
                 jjtc002 = false;
                 jjtreeCloseNodeScope(jjtn002);
                 jjtn002.setString( id ) ;
        } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte002;}
              }
              if (jjte002 instanceof ParseException) {
                {if (true) throw (ParseException)jjte002;}
              }
              {if (true) throw (Error)jjte002;}
        } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  count);
                jjtreeCloseNodeScope(jjtn002);
              }
        }
        break;
      case IDENTIFIER:
        id = Identifier();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
                  SimpleNode jjtn003 = new SimpleNode(this, JJTMETHODCALL);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
                  jjtreeOpenNodeScope(jjtn003);
          try {
            Arguments();
                    jjtree.closeNodeScope(jjtn003,  2);
                    jjtc003 = false;
                    jjtreeCloseNodeScope(jjtn003);
                    jjtn003.setString( id ) ;
          } catch (Throwable jjte003) {
                  if (jjtc003) {
                    jjtree.clearNodeScope(jjtn003);
                    jjtc003 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte003 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte003;}
                  }
                  if (jjte003 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte003;}
                  }
                  {if (true) throw (Error)jjte003;}
          } finally {
                  if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003,  2);
                    jjtreeCloseNodeScope(jjtn003);
                  }
          }
          break;
        default:
          jj_la1[86] = jj_gen;
                  SimpleNode jjtn004 = new SimpleNode(this, JJTFIELDACCESS);
                  boolean jjtc004 = true;
                  jjtree.openNodeScope(jjtn004);
                  jjtreeOpenNodeScope(jjtn004);
          try {
                    jjtree.closeNodeScope(jjtn004,  1);
                    jjtc004 = false;
                    jjtreeCloseNodeScope(jjtn004);
                    jjtn004.setString( id ) ;
          } finally {
                  if (jjtc004) {
                    jjtree.closeNodeScope(jjtn004,  1);
                    jjtreeCloseNodeScope(jjtn004);
                  }
          }
        }
        break;
      default:
        jj_la1[87] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[88] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Literal() throws ParseException {
 /*@bgen(jjtree) Literal */
    SimpleNode jjtn000 = new SimpleNode(this, JJTLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);Token t ;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECIMAL_LITERAL:
        t = jj_consume_token(DECIMAL_LITERAL);
        break;
      case HEX_LITERAL:
        t = jj_consume_token(HEX_LITERAL);
        break;
      case OCTAL_LITERAL:
        t = jj_consume_token(OCTAL_LITERAL);
        break;
      case FLOATING_POINT_LITERAL:
        t = jj_consume_token(FLOATING_POINT_LITERAL);
        break;
      case CHARACTER_LITERAL:
        t = jj_consume_token(CHARACTER_LITERAL);
        break;
      case STRING_LITERAL:
        t = jj_consume_token(STRING_LITERAL);
        break;
      case TRUE:
        t = jj_consume_token(TRUE);
        break;
      case FALSE:
        t = jj_consume_token(FALSE);
        break;
      case NULL:
        t = jj_consume_token(NULL);
        break;
      default:
        jj_la1[89] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtn000.setInt( t.kind ) ;
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.setString( idTable.inter( t.image ) ) ;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void Arguments() throws ParseException {
 /*@bgen(jjtree) Arguments */
  SimpleNode jjtn000 = new SimpleNode(this, JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case DECIMAL_LITERAL:
      case HEX_LITERAL:
      case OCTAL_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        Expression();
        label_32:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[90] = jj_gen;
            break label_32;
          }
          jj_consume_token(COMMA);
          Expression();
        }
        break;
      default:
        jj_la1[91] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

// AllocationExpression -->
//	new PrimitiveType DimExprs Dimsopt
//	new PrimitiveType Dims ArrayInitializer 
//	new TypeName DimExprs Dimsopt
//	new TypeName Dims ArrayInitializer
//	new ClassOrInterfaceType ( ArgumentListopt ) ClassBodyopt
  final public void AllocationExpression() throws ParseException {
 /*@bgen(jjtree) AllocationExpression */
    SimpleNode jjtn000 = new SimpleNode(this, JJTALLOCATIONEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);Java_SpecifierSet specSet = new Java_SpecifierSet() ;
    ScopedName name ;
    try {
      if (jj_2_26(2)) {
        jj_consume_token(NEW);
        PrimitiveType(specSet);
        ArrayDimsAndInits();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          jj_consume_token(NEW);
          name = Name();
        specSet.add_type_name( name ) ;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ArrayDimsAndInits();
            break;
          case LPAREN:
            Arguments();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACE:
              ClassBody(CONCRETE_CLASS_MEMBER);
              break;
            default:
              jj_la1[92] = jj_gen;
              ;
            }
           jjtn000.setBoolean( true ) ;
            break;
          default:
            jj_la1[93] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[94] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
     jjtn000.setSpecSet( specSet );
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

/*
 * The second LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
  final public void ArrayDimsAndInits() throws ParseException {
 /*@bgen(jjtree) ArrayDimsAndInits */
    SimpleNode jjtn000 = new SimpleNode(this, JJTARRAYDIMSANDINITS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);int arrayDimCount = 0 ;
    try {
      if (jj_2_29(2)) {
        label_33:
        while (true) {
          jj_consume_token(LBRACKET);
          Expression();
          jj_consume_token(RBRACKET);
          if (jj_2_27(2)) {
            ;
          } else {
            break label_33;
          }
        }
        label_34:
        while (true) {
          if (jj_2_28(2)) {
            ;
          } else {
            break label_34;
          }
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
                          ++arrayDimCount;
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
   jjtn000.setInt( arrayDimCount ) ;
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          label_35:
          while (true) {
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
             ++arrayDimCount;
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACKET:
              ;
              break;
            default:
              jj_la1[95] = jj_gen;
              break label_35;
            }
          }
          ArrayInitializer();
   jjtn000.setInt( arrayDimCount ) ;
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.setBoolean( true ) ;
          break;
        default:
          jj_la1[96] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

/*
 * Statement syntax follows.
 */
  final public void Statement() throws ParseException {
    if (jj_2_30(2)) {
      LabeledStatement();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        Block();
        break;
      case SEMICOLON:
        EmptyStatement();
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case DECIMAL_LITERAL:
      case HEX_LITERAL:
      case OCTAL_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        ExpressionStatement();
        break;
      case SWITCH:
        SwitchStatement();
        break;
      case IF:
        IfStatement();
        break;
      case WHILE:
        WhileStatement();
        break;
      case DO:
        DoStatement();
        break;
      case FOR:
        ForStatement();
        break;
      case BREAK:
        BreakStatement();
        break;
      case CONTINUE:
        ContinueStatement();
        break;
      case RETURN:
        ReturnStatement();
        break;
      case THROW:
        ThrowStatement();
        break;
      case SYNCHRONIZED:
        SynchronizedStatement();
        break;
      case TRY:
        TryStatement();
        break;
      default:
        jj_la1[97] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void LabeledStatement() throws ParseException {
 /*@bgen(jjtree) LabeledStatement */
    SimpleNode jjtn000 = new SimpleNode(this, JJTLABELEDSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);String label ;
    try {
      label = Identifier();
      jj_consume_token(COLON);
      Statement();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.setString( label ) ;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void Block() throws ParseException {
 /*@bgen(jjtree) Block */
  SimpleNode jjtn000 = new SimpleNode(this, JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      label_36:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CLASS:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case INTERFACE:
        case LONG:
        case NEW:
        case NULL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case RETURN:
        case SHORT:
        case STATIC:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRUE:
        case TRY:
        case VOID:
        case WHILE:
        case STRICTFP:
        case DECIMAL_LITERAL:
        case HEX_LITERAL:
        case OCTAL_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[98] = jj_gen;
          break label_36;
        }
        BlockStatement();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void BlockStatement() throws ParseException {
    if (jj_2_31(2147483647)) {
      ClassDeclaration(LOCAL);
    } else if (jj_2_32(2147483647)) {
      InterfaceDeclaration(LOCAL);
    } else if (jj_2_33(2147483647)) {
      LocalVariableDeclaration();
      jj_consume_token(SEMICOLON);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case DECIMAL_LITERAL:
      case HEX_LITERAL:
      case OCTAL_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        Statement();
        break;
      default:
        jj_la1[99] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void LocalVariableDeclaration() throws ParseException {
    Java_SpecifierSet specSet = new Java_SpecifierSet() ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      Final(specSet, true);
      break;
    default:
      jj_la1[100] = jj_gen;
      ;
    }
    Type(specSet);
    VariableDeclarator(specSet);
    label_37:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[101] = jj_gen;
        break label_37;
      }
      jj_consume_token(COMMA);
      VariableDeclarator(specSet);
    }
  }

  final public void EmptyStatement() throws ParseException {
 /*@bgen(jjtree) EmptyStatement */
  SimpleNode jjtn000 = new SimpleNode(this, JJTEMPTYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(SEMICOLON);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void ExpressionStatement() throws ParseException {
 /*@bgen(jjtree) ExpressionStatement */
  SimpleNode jjtn000 = new SimpleNode(this, JJTEXPRESSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      StatementExpression();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void StatementExpression() throws ParseException {
  Token t ;
    Expression();
  }

  final public void AssertStatement() throws ParseException {
 /*@bgen(jjtree) AssertStatement */
  SimpleNode jjtn000 = new SimpleNode(this, JJTASSERTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(ASSERT);
      Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        jj_consume_token(COLON);
        Expression();
                       jjtn000.setBoolean( true );
        break;
      default:
        jj_la1[102] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void SwitchStatement() throws ParseException {
 /*@bgen(jjtree) SwitchStatement */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSWITCHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(SWITCH);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      label_38:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
        case _DEFAULT:
          ;
          break;
        default:
          jj_la1[103] = jj_gen;
          break label_38;
        }
        Case();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void Case() throws ParseException {
 /*@bgen(jjtree) Case */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      SwitchLabel();
      label_39:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CLASS:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case INTERFACE:
        case LONG:
        case NEW:
        case NULL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case RETURN:
        case SHORT:
        case STATIC:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRUE:
        case TRY:
        case VOID:
        case WHILE:
        case STRICTFP:
        case DECIMAL_LITERAL:
        case HEX_LITERAL:
        case OCTAL_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[104] = jj_gen;
          break label_39;
        }
        BlockStatement();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void SwitchLabel() throws ParseException {
 /*@bgen(jjtree) SwitchLabel */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSWITCHLABEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        jj_consume_token(CASE);
        Expression();
        jj_consume_token(COLON);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.setBoolean( true ) ;
        break;
      case _DEFAULT:
        jj_consume_token(_DEFAULT);
        jj_consume_token(COLON);
        break;
      default:
        jj_la1[105] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void IfStatement() throws ParseException {
 /*@bgen(jjtree) IfStatement */
  SimpleNode jjtn000 = new SimpleNode(this, JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      Statement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        Statement();
        break;
      default:
        jj_la1[106] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void WhileStatement() throws ParseException {
 /*@bgen(jjtree) WhileStatement */
  SimpleNode jjtn000 = new SimpleNode(this, JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      Statement();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void DoStatement() throws ParseException {
 /*@bgen(jjtree) DoStatement */
  SimpleNode jjtn000 = new SimpleNode(this, JJTDOSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(DO);
      Statement();
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void ForStatement() throws ParseException {
 /*@bgen(jjtree) ForStatement */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
      jj_consume_token(LPAREN);
      OptForInit();
      jj_consume_token(SEMICOLON);
      OptExpression();
      jj_consume_token(SEMICOLON);
      OptForUpdate();
      jj_consume_token(RPAREN);
      Statement();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void OptForInit() throws ParseException {
 /*@bgen(jjtree) OptForInit */
  SimpleNode jjtn000 = new SimpleNode(this, JJTOPTFORINIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case DECIMAL_LITERAL:
      case HEX_LITERAL:
      case OCTAL_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        ForInit();
                  jjtn000.setBoolean( true ) ;
        break;
      default:
        jj_la1[107] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void ForInit() throws ParseException {
 /*@bgen(jjtree) ForInit */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFORINIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      if (jj_2_34(2147483647)) {
        LocalVariableDeclaration();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
   jjtn000.setBoolean( true ) ;
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case DECIMAL_LITERAL:
        case HEX_LITERAL:
        case OCTAL_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
          StatementExpressionList();
          break;
        default:
          jj_la1[108] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void StatementExpressionList() throws ParseException {
    StatementExpression();
    label_40:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[109] = jj_gen;
        break label_40;
      }
      jj_consume_token(COMMA);
      StatementExpression();
    }
  }

  final public void OptExpression() throws ParseException {
 /*@bgen(jjtree) OptExpression */
  SimpleNode jjtn000 = new SimpleNode(this, JJTOPTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case DECIMAL_LITERAL:
      case HEX_LITERAL:
      case OCTAL_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        Expression();
                     jjtn000.setBoolean( true ) ;
        break;
      default:
        jj_la1[110] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void OptForUpdate() throws ParseException {
 /*@bgen(jjtree) OptForUpdate */
  SimpleNode jjtn000 = new SimpleNode(this, JJTOPTFORUPDATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case DECIMAL_LITERAL:
      case HEX_LITERAL:
      case OCTAL_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        StatementExpressionList();
        break;
      default:
        jj_la1[111] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void BreakStatement() throws ParseException {
 /*@bgen(jjtree) BreakStatement */
    SimpleNode jjtn000 = new SimpleNode(this, JJTBREAKSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);String label ;
    try {
      jj_consume_token(BREAK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        label = Identifier();
      jjtn000.setBoolean( true ) ; jjtn000.setString(label);
        break;
      default:
        jj_la1[112] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void ContinueStatement() throws ParseException {
 /*@bgen(jjtree) ContinueStatement */
    SimpleNode jjtn000 = new SimpleNode(this, JJTCONTINUESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);String label ;
    try {
      jj_consume_token(CONTINUE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        label = Identifier();
      jjtn000.setBoolean( true ) ; jjtn000.setString(label);
        break;
      default:
        jj_la1[113] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void ReturnStatement() throws ParseException {
 /*@bgen(jjtree) ReturnStatement */
  SimpleNode jjtn000 = new SimpleNode(this, JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case DECIMAL_LITERAL:
      case HEX_LITERAL:
      case OCTAL_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        Expression();
                   jjtn000.setBoolean( true );
        break;
      default:
        jj_la1[114] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void ThrowStatement() throws ParseException {
 /*@bgen(jjtree) ThrowStatement */
  SimpleNode jjtn000 = new SimpleNode(this, JJTTHROWSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(THROW);
      Expression();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void SynchronizedStatement() throws ParseException {
 /*@bgen(jjtree) SynchronizedStatement */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSYNCHRONIZEDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(SYNCHRONIZED);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      Block();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void TryStatement() throws ParseException {
 /*@bgen(jjtree) TryStatement */
  SimpleNode jjtn000 = new SimpleNode(this, JJTTRYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(TRY);
      Block();
      if (jj_2_35(2147483647)) {
        Catches();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FINALLY:
          jj_consume_token(FINALLY);
          Block();
                                                        jjtn000.setBoolean( true );
          break;
        default:
          jj_la1[115] = jj_gen;
          ;
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CATCH:
        case FINALLY:
          Catches();
          jj_consume_token(FINALLY);
          Block();
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                  jjtreeCloseNodeScope(jjtn000);
                                  jjtn000.setBoolean( true );
          break;
        default:
          jj_la1[116] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void Catches() throws ParseException {
 /*@bgen(jjtree) Catches */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCATCHES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      label_41:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CATCH:
          ;
          break;
        default:
          jj_la1[117] = jj_gen;
          break label_41;
        }
        Catch();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void Catch() throws ParseException {
 /*@bgen(jjtree) Catch */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCATCH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(CATCH);
      jj_consume_token(LPAREN);
      FormalParameter();
      jj_consume_token(RPAREN);
      Block();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public ScopedName SimpleName() throws ParseException {
    String id ;
    ScopedName name ;
    id = Identifier();
          name = new Java_ScopedName( id ) ;
          {if (true) return name ;}
    throw new Error("Missing return statement in function");
  }

  final public String Identifier() throws ParseException {
    Token t ;
    t = jj_consume_token(IDENTIFIER);
          {if (true) return idTable.inter( t.image ) ;}
    throw new Error("Missing return statement in function");
  }

  final public void Abstract(Java_SpecifierSet specSet, boolean cond) throws ParseException {
    jj_consume_token(ABSTRACT);
      if( ! cond || specSet.contains( Java_Specifiers.SP_ABSTRACT ) )
        Assert.error( "abstract not allowed" ) ;
      specSet.add( Java_Specifiers.SP_ABSTRACT ) ;
  }

  final public void Final(Java_SpecifierSet specSet, boolean cond) throws ParseException {
    jj_consume_token(FINAL);
      if( ! cond || specSet.contains( Java_Specifiers.SP_FINAL ) )
        Assert.error( "final not allowed" ) ;
      specSet.add( Java_Specifiers.SP_FINAL ) ;
  }

  final public void Native(Java_SpecifierSet specSet, boolean cond) throws ParseException {
    jj_consume_token(NATIVE);
      if( ! cond || specSet.contains( Java_Specifiers.SP_NATIVE ) )
        Assert.error( "native not allowed" ) ;
      specSet.add( Java_Specifiers.SP_NATIVE ) ;
  }

  final public void Public(Java_SpecifierSet specSet, boolean cond) throws ParseException {
    jj_consume_token(PUBLIC);
      if( ! cond || specSet.contains( Java_Specifiers.SP_PUBLIC )
        || specSet.contains( Java_Specifiers.SP_PROTECTED )
        || specSet.contains( Java_Specifiers.SP_PRIVATE ) )
        Assert.error( "public not allowed" ) ;
      specSet.add( Java_Specifiers.SP_PUBLIC ) ;
  }

  final public void Private(Java_SpecifierSet specSet, boolean cond) throws ParseException {
    jj_consume_token(PRIVATE);
      if( ! cond || specSet.contains( Java_Specifiers.SP_PUBLIC )
        || specSet.contains( Java_Specifiers.SP_PROTECTED )
        || specSet.contains( Java_Specifiers.SP_PRIVATE ) )
        Assert.error( "private not allowed" ) ;
      specSet.add( Java_Specifiers.SP_PRIVATE ) ;
  }

  final public void Protected(Java_SpecifierSet specSet, boolean cond) throws ParseException {
    jj_consume_token(PROTECTED);
      if( ! cond || specSet.contains( Java_Specifiers.SP_PUBLIC )
        || specSet.contains( Java_Specifiers.SP_PROTECTED )
        || specSet.contains( Java_Specifiers.SP_PRIVATE ) )
        Assert.error( "protected not allowed" ) ;
      specSet.add( Java_Specifiers.SP_PROTECTED ) ;
  }

  final public void Static(Java_SpecifierSet specSet, boolean cond) throws ParseException {
    jj_consume_token(STATIC);
      if( ! cond || specSet.contains( Java_Specifiers.SP_STATIC ) )
        Assert.error( "static not allowed" ) ;
      specSet.add( Java_Specifiers.SP_STATIC ) ;
  }

  final public void Strictfp(Java_SpecifierSet specSet, boolean cond) throws ParseException {
    jj_consume_token(STRICTFP);
      if( ! cond || specSet.contains( Java_Specifiers.SP_STRICTFP ) )
        Assert.error( "strictfp not allowed" ) ;
      specSet.add( Java_Specifiers.SP_STRICTFP ) ;
  }

  final public void Synchronized(Java_SpecifierSet specSet, boolean cond) throws ParseException {
    jj_consume_token(SYNCHRONIZED);
      if( ! cond || specSet.contains( Java_Specifiers.SP_SYNCHRONIZED ) )
        Assert.error( "synchronized not allowed" ) ;
      specSet.add( Java_Specifiers.SP_SYNCHRONIZED ) ;
  }

  final public void Transient(Java_SpecifierSet specSet, boolean cond) throws ParseException {
    jj_consume_token(TRANSIENT);
      if( ! cond || specSet.contains( Java_Specifiers.SP_TRANSIENT ) )
        Assert.error( "transient not allowed" ) ;
      specSet.add( Java_Specifiers.SP_TRANSIENT ) ;
  }

  final public void Volatile(Java_SpecifierSet specSet, boolean cond) throws ParseException {
    jj_consume_token(VOLATILE);
      if( ! cond || specSet.contains( Java_Specifiers.SP_VOLATILE ) )
        Assert.error( "volatile not allowed" ) ;
      specSet.add( Java_Specifiers.SP_VOLATILE ) ;
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_3R_299() {
    if (jj_3R_314()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_268() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_298() {
    if (jj_3R_313()) return true;
    return false;
  }

  private boolean jj_3R_297() {
    if (jj_3R_312()) return true;
    return false;
  }

  private boolean jj_3R_296() {
    if (jj_3R_182()) return true;
    return false;
  }

  private boolean jj_3R_283() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3R_296()) {
    jj_scanpos = xsp;
    if (jj_3R_297()) {
    jj_scanpos = xsp;
    if (jj_3R_298()) {
    jj_scanpos = xsp;
    if (jj_3R_299()) {
    jj_scanpos = xsp;
    if (jj_3R_300()) {
    jj_scanpos = xsp;
    if (jj_3R_301()) {
    jj_scanpos = xsp;
    if (jj_3R_302()) {
    jj_scanpos = xsp;
    if (jj_3R_303()) {
    jj_scanpos = xsp;
    if (jj_3R_304()) {
    jj_scanpos = xsp;
    if (jj_3R_305()) {
    jj_scanpos = xsp;
    if (jj_3R_306()) {
    jj_scanpos = xsp;
    if (jj_3R_307()) {
    jj_scanpos = xsp;
    if (jj_3R_308()) {
    jj_scanpos = xsp;
    if (jj_3R_309()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_30() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_246() {
    return false;
  }

  private boolean jj_3R_245() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_268()) return true;
    return false;
  }

  private boolean jj_3R_244() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_155() {
    Token xsp;
    if (jj_3R_162()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_162()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_3R_208()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_244()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_245()) {
    jj_scanpos = xsp;
    if (jj_3R_246()) return true;
    }
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_64()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_29() {
    Token xsp;
    if (jj_3_27()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_27()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_28()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_142() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) return true;
    }
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_3R_135()) return true;
    return false;
  }

  private boolean jj_3R_243() {
    if (jj_3R_267()) return true;
    return false;
  }

  private boolean jj_3R_242() {
    if (jj_3R_266()) return true;
    return false;
  }

  private boolean jj_3R_241() {
    if (jj_3R_252()) return true;
    return false;
  }

  private boolean jj_3R_240() {
    if (jj_3R_250()) return true;
    return false;
  }

  private boolean jj_3R_239() {
    if (jj_3R_255()) return true;
    return false;
  }

  private boolean jj_3R_238() {
    if (jj_3R_254()) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_3R_51()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_156()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_195() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_237()) {
    jj_scanpos = xsp;
    if (jj_3R_238()) {
    jj_scanpos = xsp;
    if (jj_3R_239()) {
    jj_scanpos = xsp;
    if (jj_3R_240()) {
    jj_scanpos = xsp;
    if (jj_3R_241()) {
    jj_scanpos = xsp;
    if (jj_3R_242()) {
    jj_scanpos = xsp;
    if (jj_3R_243()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_237() {
    if (jj_3R_253()) return true;
    return false;
  }

  private boolean jj_3R_178() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_195()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_68()) return true;
    if (jj_3R_196()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_197()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_8() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_48()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_7() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_47()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_57()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    return false;
  }

  private boolean jj_3R_287() {
    if (jj_3R_178()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_56()) return true;
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3R_286() {
    if (jj_3R_177()) return true;
    return false;
  }

  private boolean jj_3R_120() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) return true;
    }
    return false;
  }

  private boolean jj_3R_285() {
    if (jj_3R_175()) return true;
    return false;
  }

  private boolean jj_3R_284() {
    if (jj_3R_174()) return true;
    return false;
  }

  private boolean jj_3R_275() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_284()) {
    jj_scanpos = xsp;
    if (jj_3R_285()) {
    jj_scanpos = xsp;
    if (jj_3R_286()) {
    jj_scanpos = xsp;
    if (jj_3R_287()) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_259() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_262()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_64()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_97()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_217() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_259()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_260() {
    if (jj_3R_275()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_218() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_260()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_scan_token(INTERFACE)) return true;
    if (jj_3R_208()) return true;
    if (jj_3R_217()) return true;
    if (jj_3R_218()) return true;
    return false;
  }

  private boolean jj_3R_152() {
    return false;
  }

  private boolean jj_3R_216() {
    if (jj_3R_256()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_215() {
    if (jj_3R_255()) return true;
    return false;
  }

  private boolean jj_3R_214() {
    if (jj_3R_254()) return true;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_213() {
    if (jj_3R_253()) return true;
    return false;
  }

  private boolean jj_3R_212() {
    if (jj_3R_251()) return true;
    return false;
  }

  private boolean jj_3R_185() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_211()) {
    jj_scanpos = xsp;
    if (jj_3R_212()) {
    jj_scanpos = xsp;
    if (jj_3R_213()) {
    jj_scanpos = xsp;
    if (jj_3R_214()) {
    jj_scanpos = xsp;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_211() {
    if (jj_3R_250()) return true;
    return false;
  }

  private boolean jj_3R_175() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_185()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_186()) return true;
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_3R_135()) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_3R_54()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) return true;
    }
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_54()) return true;
    if (jj_3R_51()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_150()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_69()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_63()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) return true;
    }
    return false;
  }

  private boolean jj_3_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_64()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_113() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) return true;
    }
    return false;
  }

  private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_3R_178()) return true;
    return false;
  }

  private boolean jj_3_4() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_44()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    return false;
  }

  private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_3R_177()) return true;
    return false;
  }

  private boolean jj_3_3() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_43()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    }
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_3R_176()) return true;
    return false;
  }

  private boolean jj_3R_159() {
    return false;
  }

  private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(58)) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_3R_175()) return true;
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_3R_174()) return true;
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_54()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) return true;
    }
    return false;
  }

  private boolean jj_3R_157() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_3R_157()) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) return true;
    }
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_147()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_3R_57()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    }
    return false;
  }

  private boolean jj_3R_258() {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_262()) return true;
    return false;
  }

  private boolean jj_3R_210() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_258()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_257() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_3R_63()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_209() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_257()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_208()) return true;
    if (jj_3R_209()) return true;
    if (jj_3R_210()) return true;
    if (jj_3R_135()) return true;
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_54()) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_3R_146()) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_3R_145()) return true;
    return false;
  }

  private boolean jj_3R_121() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) return true;
    }
    return false;
  }

  private boolean jj_3R_207() {
    if (jj_3R_256()) return true;
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_3R_255()) return true;
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_3R_254()) return true;
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_3R_253()) return true;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_3R_252()) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_3R_251()) return true;
    return false;
  }

  private boolean jj_3R_183() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) {
    jj_scanpos = xsp;
    if (jj_3R_205()) {
    jj_scanpos = xsp;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_3R_250()) return true;
    return false;
  }

  private boolean jj_3R_174() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_183()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_184()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_57()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_3R_135()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_57()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3_1() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_42()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_63()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_3R_75()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_54()) return true;
    if (jj_3R_51()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_3R_75()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_64()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_64()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_98()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_99()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_57()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_116() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_355() {
    if (jj_3R_325()) return true;
    return false;
  }

  private boolean jj_3R_341() {
    if (jj_3R_116()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_355()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_349() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_311()) return true;
    return false;
  }

  private boolean jj_3R_348() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_280()) return true;
    return false;
  }

  private boolean jj_3R_340() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_348()) {
    jj_scanpos = xsp;
    if (jj_3R_349()) return true;
    }
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(96)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_3R_100()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_328() {
    if (jj_3R_341()) return true;
    return false;
  }

  private boolean jj_3R_327() {
    if (jj_3R_340()) return true;
    return false;
  }

  private boolean jj_3R_326() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(96)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) return true;
    }
    if (jj_3R_280()) return true;
    return false;
  }

  private boolean jj_3R_311() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_326()) {
    jj_scanpos = xsp;
    if (jj_3R_327()) {
    jj_scanpos = xsp;
    if (jj_3R_328()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_325() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) return true;
    }
    return false;
  }

  private boolean jj_3R_310() {
    if (jj_3R_325()) return true;
    if (jj_3R_280()) return true;
    return false;
  }

  private boolean jj_3R_292() {
    if (jj_3R_311()) return true;
    return false;
  }

  private boolean jj_3R_291() {
    if (jj_3R_310()) return true;
    return false;
  }

  private boolean jj_3R_290() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) return true;
    }
    if (jj_3R_280()) return true;
    return false;
  }

  private boolean jj_3R_280() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_290()) {
    jj_scanpos = xsp;
    if (jj_3R_291()) {
    jj_scanpos = xsp;
    if (jj_3R_292()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_293() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) return true;
    }
    }
    if (jj_3R_280()) return true;
    return false;
  }

  private boolean jj_3R_269() {
    if (jj_3R_280()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_293()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_281() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) return true;
    }
    if (jj_3R_269()) return true;
    return false;
  }

  private boolean jj_3R_247() {
    if (jj_3R_269()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_281()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_270() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    }
    if (jj_3R_247()) return true;
    return false;
  }

  private boolean jj_3R_198() {
    if (jj_3R_247()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_270()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_248() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) return true;
    }
    }
    }
    if (jj_3R_198()) return true;
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_3R_198()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_248()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_199() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_267() {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_3R_179()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_199()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_266() {
    if (jj_scan_token(TRANSIENT)) return true;
    return false;
  }

  private boolean jj_3R_180() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(99)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    }
    if (jj_3R_170()) return true;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_3R_170()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_180()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_264() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_160()) return true;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_3R_160()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_171()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_256() {
    if (jj_scan_token(STRICTFP)) return true;
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_153()) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_3R_153()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_161()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_250() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_140()) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_3R_140()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_154()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_254() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_3R_127()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_141()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_255() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_3R_115()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_131()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_64()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_3R_101()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_253() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  private boolean jj_3R_118() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(125)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) {
    jj_scanpos = xsp;
    if (jj_scan_token(127)) {
    jj_scanpos = xsp;
    if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(123)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_263() {
    if (jj_scan_token(NATIVE)) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_118()) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_252() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_90()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_251() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_347() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_182()) return true;
    return false;
  }

  private boolean jj_3R_278() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_279() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_278()) return true;
    return false;
  }

  private boolean jj_3R_262() {
    if (jj_3R_278()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_279()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_361() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_276()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_182()) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_scan_token(CATCH)) return true;
    return false;
  }

  private boolean jj_3R_354() {
    if (jj_3R_361()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_346() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_354()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_54()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_339() {
    if (jj_3R_346()) return true;
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_182()) return true;
    return false;
  }

  private boolean jj_3R_338() {
    if (jj_3R_346()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_347()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_324() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_182()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_338()) {
    jj_scanpos = xsp;
    if (jj_3R_339()) return true;
    }
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_323() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_64()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_182()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    return false;
  }

  private boolean jj_3R_322() {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_64()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3R_337() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  private boolean jj_3R_321() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_337()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3R_336() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_320() {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_336()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_360() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_329()) return true;
    return false;
  }

  private boolean jj_3R_335() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_93()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_319() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_335()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_345() {
    if (jj_3R_353()) return true;
    return false;
  }

  private boolean jj_3R_334() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_345()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_344() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3R_333() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_344()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_173() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_181()) jj_scanpos = xsp;
    if (jj_3R_182()) return true;
    return false;
  }

  private boolean jj_3R_265() {
    if (jj_3R_249()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_236() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_265()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(37)) jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_353() {
    if (jj_3R_329()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_360()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_331() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_283()) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_3R_116()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_359() {
    if (jj_3R_353()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) jj_scanpos = xsp;
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_358() {
    if (jj_3R_282()) return true;
    return false;
  }

  private boolean jj_3R_352() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_358()) {
    jj_scanpos = xsp;
    if (jj_3R_359()) return true;
    }
    return false;
  }

  private boolean jj_3R_343() {
    if (jj_3R_352()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_332() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_343()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_318() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_332()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_333()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_334()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_283()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_225() {
    if (jj_3R_249()) return true;
    return false;
  }

  private boolean jj_3R_317() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_283()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_64()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_224() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_277() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_276()) return true;
    return false;
  }

  private boolean jj_3R_316() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_64()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_283()) return true;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_224()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_225()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_315() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_64()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_283()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_331()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_289() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_351() {
    if (jj_3R_249()) return true;
    return false;
  }

  private boolean jj_3R_288() {
    if (jj_3R_252()) return true;
    return false;
  }

  private boolean jj_3R_276() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_288()) jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    if (jj_3R_208()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_289()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_357() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_261() {
    if (jj_3R_276()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_277()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_356() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_64()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_350() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_356()) {
    jj_scanpos = xsp;
    if (jj_3R_357()) return true;
    }
    return false;
  }

  private boolean jj_3R_222() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_261()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_342() {
    if (jj_3R_350()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_351()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_235() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_330() {
    if (jj_3R_342()) return true;
    return false;
  }

  private boolean jj_3R_314() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_64()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_330()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_3R_208()) return true;
    if (jj_3R_222()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_235()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_194() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_329() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_3R_236()) return true;
    return false;
  }

  private boolean jj_3R_313() {
    if (jj_3R_329()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_221() {
    if (jj_3R_255()) return true;
    return false;
  }

  private boolean jj_3R_312() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_295() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_196()) return true;
    return false;
  }

  private boolean jj_3R_294() {
    if (jj_3R_252()) return true;
    return false;
  }

  private boolean jj_3R_282() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_294()) jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    if (jj_3R_196()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_295()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(37)) jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_234() {
    if (jj_3R_256()) return true;
    return false;
  }

  private boolean jj_3R_233() {
    if (jj_3R_264()) return true;
    return false;
  }

  private boolean jj_3_32() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_67()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  private boolean jj_3R_232() {
    if (jj_3R_263()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_231() {
    if (jj_3R_252()) return true;
    return false;
  }

  private boolean jj_3R_230() {
    if (jj_3R_251()) return true;
    return false;
  }

  private boolean jj_3_31() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_66()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_229() {
    if (jj_3R_250()) return true;
    return false;
  }

  private boolean jj_3R_274() {
    if (jj_3R_283()) return true;
    return false;
  }

  private boolean jj_3R_228() {
    if (jj_3R_255()) return true;
    return false;
  }

  private boolean jj_3R_227() {
    if (jj_3R_254()) return true;
    return false;
  }

  private boolean jj_3R_191() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_226()) {
    jj_scanpos = xsp;
    if (jj_3R_227()) {
    jj_scanpos = xsp;
    if (jj_3R_228()) {
    jj_scanpos = xsp;
    if (jj_3R_229()) {
    jj_scanpos = xsp;
    if (jj_3R_230()) {
    jj_scanpos = xsp;
    if (jj_3R_231()) {
    jj_scanpos = xsp;
    if (jj_3R_232()) {
    jj_scanpos = xsp;
    if (jj_3R_233()) {
    jj_scanpos = xsp;
    if (jj_3R_234()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_226() {
    if (jj_3R_253()) return true;
    return false;
  }

  private boolean jj_3R_273() {
    if (jj_3R_282()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_177() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_191()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_63()) return true;
    if (jj_3R_192()) return true;
    if (jj_3R_189()) return true;
    xsp = jj_scanpos;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) return true;
    }
    return false;
  }

  private boolean jj_3R_272() {
    if (jj_3R_175()) return true;
    return false;
  }

  private boolean jj_3R_220() {
    if (jj_3R_254()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_271() {
    if (jj_3R_174()) return true;
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_3R_249()) return true;
    return false;
  }

  private boolean jj_3R_249() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_271()) {
    jj_scanpos = xsp;
    if (jj_3R_272()) {
    jj_scanpos = xsp;
    if (jj_3R_273()) {
    jj_scanpos = xsp;
    if (jj_3R_274()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_223() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_262()) return true;
    return false;
  }

  private boolean jj_3R_189() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_223()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_200()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_54()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_283()) return true;
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_3R_208()) return true;
    if (jj_3R_222()) return true;
    return false;
  }

  private boolean jj_3R_309() {
    if (jj_3R_324()) return true;
    return false;
  }

  private boolean jj_3R_308() {
    if (jj_3R_323()) return true;
    return false;
  }

  private boolean jj_3R_187() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_219()) {
    jj_scanpos = xsp;
    if (jj_3R_220()) {
    jj_scanpos = xsp;
    if (jj_3R_221()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_219() {
    if (jj_3R_253()) return true;
    return false;
  }

  private boolean jj_3R_307() {
    if (jj_3R_322()) return true;
    return false;
  }

  private boolean jj_3R_176() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_187()) jj_scanpos = xsp;
    if (jj_3R_188()) return true;
    if (jj_3R_189()) return true;
    if (jj_3R_190()) return true;
    return false;
  }

  private boolean jj_3R_197() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_196()) return true;
    return false;
  }

  private boolean jj_3R_306() {
    if (jj_3R_321()) return true;
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_3R_49()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_305() {
    if (jj_3R_320()) return true;
    return false;
  }

  private boolean jj_3R_304() {
    if (jj_3R_319()) return true;
    return false;
  }

  private boolean jj_3R_303() {
    if (jj_3R_318()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_172()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(90)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_302() {
    if (jj_3R_317()) return true;
    return false;
  }

  private boolean jj_3R_301() {
    if (jj_3R_316()) return true;
    return false;
  }

  private boolean jj_3R_300() {
    if (jj_3R_315()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_64()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public JavaParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[118];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10100000,0x0,0x0,0x0,0x100000,0x100000,0x100000,0x0,0x0,0x19500000,0x9400000,0x100000,0x100000,0x100000,0x100000,0x19500000,0x0,0x9400000,0x0,0x0,0x0,0x0,0x0,0x9400000,0x9400000,0x0,0x0,0x0,0x0,0x100000,0x100000,0x0,0x0,0x0,0x9400000,0x0,0x0,0x59d00000,0x9400000,0x59d00000,0x0,0x9400000,0x0,0x9400000,0x9400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9400000,0x0,0x0,0x0,0x9400000,0x0,0x0,0x0,0x0,0x9400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9400000,0x0,0x0,0x0,0x0,0x0,0x49c00000,0x59d00000,0x49c00000,0x0,0x0,0x0,0x82000000,0x59d00000,0x82000000,0x0,0x9400000,0x9400000,0x0,0x9400000,0x9400000,0x0,0x0,0x9400000,0x0,0x4000000,0x4000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4e08020,0x100000,0x1000,0x0,0x4e08000,0x4e00020,0x4e00020,0x8,0x800,0x26e3c0a2,0x6e140a2,0x24e20020,0x24e20020,0x4e00000,0x4e00000,0x26e3c0a2,0x8,0x6e140a2,0x4e00020,0x4e00020,0x0,0x0,0x0,0x4a0d4092,0x4a0d4092,0x0,0xe00000,0xe00000,0x0,0x24e20020,0x24e20020,0x0,0x0,0x0,0x20140a2,0x20,0x0,0xffedc5b3,0x4a0d4092,0xffedc5b3,0x4000000,0x2014082,0x0,0x2014082,0x2014082,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4a0d4092,0x0,0x0,0x0,0x4a0d4092,0x480c0010,0x0,0x0,0x0,0x4a0d4092,0x0,0x480c0010,0x0,0x8000000,0x0,0x48000000,0x0,0x40000,0x0,0x0,0x0,0x40000,0x0,0x80010,0x0,0x4a0d4092,0x0,0x0,0x40000,0x0,0x0,0xfb0d4593,0xffedc5b3,0xfb0d4593,0x20,0x0,0x0,0x0,0xffedc5b3,0x0,0x4,0x4a0d40b2,0x4a0d4092,0x0,0x4a0d4092,0x4a0d4092,0x0,0x0,0x4a0d4092,0x40,0x40,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x2000080,0x0,0x0,0x8000000,0x2000080,0x80,0x80,0x0,0x0,0x22100b2,0x2010022,0x80,0x80,0x80,0x80,0x20100b2,0x0,0x2010022,0x22,0x22,0x4000000,0x800000,0x10000000,0x80296f14,0x80296f14,0x4000000,0x0,0x0,0x1,0x80,0x80,0x2200000,0x800000,0x4000000,0x10000,0x0,0x800000,0x82296fdc,0x96f14,0x82296fdc,0x0,0x10000,0x800000,0x0,0x10010,0x4000000,0x10000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60000000,0x60000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80096f14,0x0,0x80000000,0x80000000,0x96f14,0x80096f04,0x80000,0x80000,0x0,0x96f14,0x200000,0x86f04,0x10000,0x0,0x80000,0x0,0x8080000,0x10000,0x8800000,0x200000,0x80000,0x10000,0x8800000,0x6f04,0x4000000,0x80096f14,0x200000,0x880000,0x0,0x800000,0x800000,0x82296f5c,0x82296fdc,0x82296f5c,0x0,0x4000000,0x0,0x0,0x82296fdc,0x0,0x0,0x80096f14,0x80096f14,0x4000000,0x80096f14,0x80096f14,0x10000,0x10000,0x80096f14,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1e01,0x1e01,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1e01,0x0,0x1e01,0x0,0x0,0x0,0x0,0x0,0x0,0xffc00000,0xffc00000,0x2,0x80,0x100,0x10000,0x20000,0x8000,0x48,0x48,0x0,0x30,0x30,0x380000,0x380000,0x1800,0x1800,0x46000,0x46000,0x1800,0x1e01,0x600,0x1,0x1,0x0,0x1,0x0,0x0,0x600,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1e01,0x0,0x0,0x0,0x0,0x0,0x1e01,0x1e01,0x1e01,0x0,0x0,0x4,0x0,0x1e01,0x0,0x0,0x1e01,0x1e01,0x0,0x1e01,0x1e01,0x0,0x0,0x1e01,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[35];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public JavaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JavaParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 118; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 118; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public JavaParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new JavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 118; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 118; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public JavaParser(JavaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 118; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JavaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 118; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[129];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 118; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 129; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 35; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
