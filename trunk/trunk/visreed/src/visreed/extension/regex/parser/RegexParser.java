/* Generated By:JavaCC: Do not edit this line. RegexParser.java */
package visreed.extension.regex.parser;

import visreed.model.VisreedNode;
import visreed.model.VisreedWholeGraph;

public class RegexParser implements RegexParserConstants {
    private RegexBuilder builder;

    public static VisreedNode parse(
        VisreedWholeGraph wg,
        java.io.Reader reader
    ) throws ParseException {
        RegexParser parser = new RegexParser(reader);
        parser.builder = new RegexBuilder(wg);
        try{
            parser.alternation();
            parser.makeRoot();
            return parser.result();
        }
        catch (Exception e){
            System.out.println("Parsing Exception, message: " + e.getMessage());
            throw new ParseException(e.getMessage());
        }
        catch (Error e){
            System.out.println("Parsing Error, message: " + e.getMessage());
            throw new ParseException(e.getMessage());
        }
    }

    public VisreedNode result(){
        return builder.pop();
    }

    private void makeRoot(){
        builder.makeRoot();
    }

  final public void terminal() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      t = jj_consume_token(STRING);
      builder.buildTerminal(t.image);
      break;
    case OPEN_PAR:
      jj_consume_token(OPEN_PAR);
      alternation();
      jj_consume_token(CLOSE_PAR);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void alternation() throws ParseException {
    int numOfChildren;
    seq();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALTERNATION:
          numOfChildren = 1;
      label_1:
      while (true) {
        jj_consume_token(ALTERNATION);
        seq();
            numOfChildren++;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALTERNATION:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
      }
          builder.buildAlternation(numOfChildren);
      break;
    default:
      jj_la1[2] = jj_gen;

    }
  }

  final public void non_seq() throws ParseException {
    terminal();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUESTION_MARK:
      jj_consume_token(QUESTION_MARK);
          builder.buildOptional();
      break;
    case PLUS:
      jj_consume_token(PLUS);
          builder.buildKleenePlus();
      break;
    case STAR:
      jj_consume_token(STAR);
          builder.buildKleeneStar();
      break;
    default:
      jj_la1[3] = jj_gen;

    }
  }

  final public void seq() throws ParseException {
    int numOfChildren;
    non_seq();
      numOfChildren = 1;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPEN_PAR:
      case SEMI_COLON:
      case STRING:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMI_COLON:
        jj_consume_token(SEMI_COLON);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      non_seq();
          numOfChildren ++;
    }
      builder.buildSequence(numOfChildren);
  }

  /** Generated Token Manager. */
  public RegexParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1200,0x100,0x100,0xe0,0x1a00,0x800,};
   }

  /** Constructor with InputStream. */
  public RegexParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RegexParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RegexParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public RegexParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RegexParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public RegexParser(RegexParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RegexParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[15];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 15; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
