//     Copyright 1998--2010 Michael Bruce-Lockhart and Theodore S. Norvell
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License. 
// You may obtain a copy of the License at 
//
//     http://www.apache.org/licenses/LICENSE-2.0 
//
// Unless required by applicable law or agreed to in writing, 
// software distributed under the License is distributed on an 
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
// either express or implied. See the License for the specific language 
// governing permissions and limitations under the License.

/**
 * C++ Preprocessor
 *
 * Given C++ source code, the Preprocessor generates two types of output.
 * The first is a tagged version of the source, generated as a Vector of String, 
 * which is suitable for code-colouring. 
 * The second is the preprocessed form of the source code, generated as a StringBuffer,
 * and intended for lexical and syntax analysis.
 * Currently only the first output is generated correctly. The preprocessing step at 
 * present only produces a version of the code stripped of comments and preprocessor
 * directives.
 *
 * @author Derek Reilly
 * @author Theodore Norvell
 * @version 1.0
 * @see Cpp.Parser.Parser
 *
 * (C) 1997--2001 Theodore Norvell and Michael Bruce-Lockhart
 * except for the lexer, which is based on a lexer
 * that is (C) sun microsystems.  However permission
 * was granted by sun for it to be used.
 *
 * Lexical grammar based on:
 *
 * Author: Sreenivasa Viswanadha, then of sun
 * Date: 3/20/97
 *
 * Derived in part from the following work:
 *
 * PUBLIC DOMAIN PCCTS-BASED C++ GRAMMAR (cplusplus.g, stat.g, expr.g)
 *
 * Authors: Sumana Srinivasan, Next Inc.;            sumana_srinivasan@next.com
 *          Terence Parr, Parr Research Corporation; parrt@parr-research.com
 *          Russell Quong, Purdue University;        quong@ecn.purdue.edu
 *
 */
options {
        STATIC = false ;
        ERROR_REPORTING = true ;
        COMMON_TOKEN_ACTION = true ;
        // DEBUG_PARSER = true ;
        // DEBUG_TOKEN_MANAGER = true ;
}

PARSER_BEGIN(Preprocessor)

package tm.cpp.preprocessor ;

import java.io.* ;
import java.util.* ;
import tm.clc.parser.* ;
import tm.cpp.analysis.FileMap ;
import tm.utilities.Assert ;
import tm.utilities.TMFile ;
import tm.utilities.FileSource ;
import tm.virtualMachine.CodeStore ;

public class Preprocessor {
        
    int currentLine = 1 ;
        
    FileMap fileMap  ;
    TMFile file ;
    FileSource stdFileSource ;
    CodeStore codeStore ;

    public Preprocessor( Reader reader, TMFile file, FileMap fileMap, CodeStore codeStore, FileSource stdFileSource ) {
        this( reader ) ;
        this.file = file ;
        this.fileMap = fileMap ;
        this.codeStore = codeStore ;
        this.stdFileSource = stdFileSource ;
        fileMap.put( file ) ;
        codeStore.startNewFile( file ) ;
        token_source.setCodeStore( codeStore, file ) ; }
    
    void includeStandardFile( StringBuffer sb, String fileName ) 
    throws ParseException { 
        TMFile includedFile = new TMFile( stdFileSource, fileName ) ;
        Reader reader =  includedFile.toReader() ;
        Assert.error( reader != null,
            "Can not find include file <" + fileName + ">" ) ;
        includeFile( sb, includedFile, reader ) ; }
    
    void includeFile( StringBuffer sb, String fileName )
    throws ParseException { 
        TMFile includedFile = new TMFile( file.getFileSource(), fileName ) ;
        Reader reader = includedFile.toReader() ;
        if( reader == null ) {
            includedFile = new TMFile( stdFileSource, fileName ) ;
            reader = includedFile.toReader() ;
            Assert.error( reader != null,
                "Can not find include file \"" + fileName + "\"" ) ; }
        includeFile( sb, includedFile, reader ) ; }
    
    void includeFile( StringBuffer sb, TMFile includedFile, Reader reader  )
    throws ParseException { 
        Preprocessor pp = new Preprocessor( reader, includedFile, fileMap, codeStore, stdFileSource ) ;
        pp.translation_unit( sb ) ;
        
        sb.append( "#line "+ getToken(1).beginLine + " \"" +file.getUniqueNumber() +"\"\n" ) ;
    }
        

    void output_token (Token keep, StringBuffer sb)
    {
        //System.out.println( "Keeping token of kind "+keep.kind+". Image is <"+keep.image+">. Line num is "+keep.beginLine ) ;
        if (keep.beginLine > currentLine) { 
                if (keep.beginLine > currentLine + 1) {
                        // emit line directive
                        sb.append ("\n"); sb.append ("#line "); 
                        sb.append (keep.beginLine);
                }
                // emit a newline
                sb.append ("\n");
        }
        // emit the token image
        sb.append (keep.image);

        // update the current line number
        currentLine = keep.beginLine;
    }
}

PARSER_END(Preprocessor)

TOKEN_MGR_DECLS : {
    private Colourizer colourizer  ;
    
    void setCodeStore( CodeStore codeStore, TMFile tmFile ) {
        colourizer = new Colourizer( codeStore, tmFile ) ; }
    
    final static int PLAIN = Colourizer.PLAIN,
                     KEYWORD = Colourizer.KEYWORD,
                     COMMENT = Colourizer.COMMENT,
                     CONSTANT = Colourizer.CONSTANT,
                     PREPROCESSOR = Colourizer.PREPROCESSOR,
                     MARKUP = Colourizer.MARKUP ;
    
    private int colourClass = PLAIN ;  // Used to communicate from lex actions

    private boolean invisible = false ; // This is true when we are within invisible code. I.e. between /*#I and */
    
    void CommonTokenAction(Token token) {
        colourizer.addToken( token.image, colourClass ) ;
        colourClass = PLAIN ;
    }        
}

<*> TOKEN: // Ensure the file ends with a newline. The colourizer demands this.
{
      < EOF > { matchedToken.image = "\n" ; } : DEFAULT
}

// The following set of productions is duplicated in JavaParser.jjt
// Except for the first line
<DEFAULT, MIDLINE> SPECIAL_TOKEN :
{
//    <PEDAGOGICALMARKUP0: "/*#D*/" | "/*#/H*/" >
//                        { colourClass = MARKUP ;
//                          colourizer.startAllSelections() ; }
//|   <PEDAGOGICALMARKUP1: "/*#H*/"| "/*#/D*/" >
//                        { colourClass = MARKUP ;
//                          colourizer.endAllSelections() ; }
//|
    <PEDAGOGICALMARKUP2: "/*#T" (" ")* (["a"-"z","A"-"Z","0"-"9"])+ (" ")* "*/" >
                        { //colourClass = MARKUP ;
                          colourizer.startSelection(
                              CommonParserHelper.extractTagName( matchedToken.image ) ) ; }
|   <PEDAGOGICALMARKUP3: "/*#/T" (" ")* (["a"-"z","A"-"Z","0"-"9"])+ (" ")* "*/" >
                        { //colourClass = MARKUP ;
                          colourizer.endSelection(
                              CommonParserHelper.extractTagName( matchedToken.image ) ) ; }
|   <PEDAGOGICALMARKUP4: "/*#" >
                        // { colourClass = MARKUP ; }
                        : IN_PEDAGOGICAL_COMMENT
}

<DEFAULT,MIDLINE> SKIP  :
{
    <PEDAGOGICALMARKUP_INVISIBLE_ALL: "/*#I" >
    { colourizer.startSelection("s") ;
      invisible = true ; }
}


// Catch the end of an invisible section.
<DEFAULT, MIDLINE >SKIP :
{
  "*/" { if( invisible ) { colourizer.endSelection( "s" ) ; invisible = false ; }
         else { throw new ParseException( "Stray */ in code." ) ; } }
}

<IN_PEDAGOGICAL_COMMENT> SKIP:
{
   "*/"
   : MIDLINE
}

// Newlines in Pedagogical comments are a bit special. To keep
// The lines in the CodeStore and the lines output by the preprocessor
// synchronized, we send these to the CodeStore.
// This means that pedagogical comments can not be used to hide newlines.
<IN_PEDAGOGICAL_COMMENT> SPECIAL_TOKEN:
{
  "\n"
  {colourClass = PLAIN; CommonTokenAction( matchedToken ) ; } 
}

<IN_PEDAGOGICAL_COMMENT> SKIP:
{
  < ~[] >
}  

<DEFAULT, MIDLINE> TOKEN :
{
  <KEEP_SPACE : " " | "\t" | "\f" > 
| 
  <CSTYLECOMMENTSTART : "/*" > {colourClass = COMMENT ; }
  : IN_C_COMMENT
|
  <NEWLINE: "\n" | "\r\n" >
  : DEFAULT
|
  <LINECOMMENTSTART :"//" > {colourClass = COMMENT ; }
  : IN_LINE_COMMENT
|
  <STARTDIRECTIVE : "#" >
  {colourClass = PREPROCESSOR; }
  : DIRECTIVE0
}

<IN_LINE_COMMENT> SPECIAL_TOKEN:
{
   "\n" 
   {colourClass = COMMENT; CommonTokenAction( matchedToken ) ; } 
   : DEFAULT
}

<IN_LINE_COMMENT> MORE:
{
  < ~[] >
}

<IN_C_COMMENT> SPECIAL_TOKEN:
{
   "*/"
   {colourClass = COMMENT; CommonTokenAction( matchedToken ) ; }
   : MIDLINE
}

<IN_C_COMMENT> MORE:
{
  < ~[] >
}

// Deviation.  I'm not allowing comments within directives.
<DIRECTIVE0, AFTERINCLUDE> SPECIAL_TOKEN: {
    <" " | "\t">
    { colourClass = PREPROCESSOR; CommonTokenAction( matchedToken ); }
}

<DIRECTIVE0> TOKEN:
{
   < PPINCLUDE : "include" >
   {colourClass = PREPROCESSOR; }
   : AFTERINCLUDE
|
   < PPIF : "if" >
   {colourClass = PREPROCESSOR; }
   : MIDLINE
|
   < PPIFDEF : "ifdef" >
   {colourClass = PREPROCESSOR; }
   : MIDLINE
|
   < PPIFNDEF : "ifndef" >
   {colourClass = PREPROCESSOR; }
   : MIDLINE
|
   < PPELIF : "elif" >
   {colourClass = PREPROCESSOR; }
   : MIDLINE
|
   < PPELSE : "else" >
   {colourClass = PREPROCESSOR; }
   : MIDLINE
|
   < PPENDIF : "endif" >
   {colourClass = PREPROCESSOR; }
   : MIDLINE
|
   < PPDEFINE : "define" >
   {colourClass = PREPROCESSOR; }
   : MIDLINE
|
   < PPUNDEF : "undef" >
   {colourClass = PREPROCESSOR; }
   : MIDLINE
|
   < PPLINE : "line" >
   {colourClass = PREPROCESSOR; }
   : MIDLINE
|
   < PPERROR : "error" >
   {colourClass = PREPROCESSOR; }
   : MIDLINE
|
   < PPPRAGMA : "pragma" >
   {colourClass = PREPROCESSOR; }
   : MIDLINE
| < UNEXPECTED : ~[] >
   {colourClass = PREPROCESSOR; }
   : MIDLINE
}

<AFTERINCLUDE>TOKEN :
{ < DQFILENAME : "\""
                ( ( ~["\"","\n","\r"])
                )*
               "\"" >
  { colourClass = PREPROCESSOR ; }
  : MIDLINE
}

<AFTERINCLUDE>TOKEN :
{ < AQFILENAME : "<"
                ( ( ~[">","\n","\r"])
                )*
              ">" >
  { colourClass = PREPROCESSOR ; }
  : MIDLINE
}

<DEFAULT, MIDLINE>TOKEN :
{
  < KEEP_KEYWORD: "asm" 
                | "auto"
                | "bool"
                | "break"
                | "case"
                | "catch"
                | "char"
                | "class"
                | "const"
                | "const_cast"
                | "continue"
                | "default"
                | "delete"
                | "do"
                | "double"
                | "dynamic_cast"
                | "else"
                | "enum"
                | "explicit"
                | "export"
                | "extern"
                | "false"
                | "float"
                | "for"
                | "friend"
                | "goto"
                | "if"
                | "inline"
                | "int"
                | "long"
                | "mutable"
                | "namespace"
                | "new"
                | "operator"
                | "private"
                | "protected"
                | "public"
                | "register"
                | "reinterpret_cast"
                | "return"
                | "short"
                | "signed"
                | "sizeof"
                | "static"
                | "static_cast"
                | "struct"
                | "switch"
                | "template"
                | "this"
                | "throw"
                | "true"
                | "try"
                | "typedef"
                | "typeid"
                | "typename"
                | "union"
                | "unsigned"
                | "using"
                | "virtual"
                | "void"
                | "volatile"
                | "wchar_t"
                | "while" >
            { colourClass = KEYWORD ; }
            : MIDLINE
}

<DEFAULT, MIDLINE>TOKEN [IGNORE_CASE] :
{
  < KEEP_NCONST : <INT> | <FLOATCONST> > { colourClass = CONSTANT ; } : MIDLINE

| < #INT : "0" (["0"-"7"])* <INTSUFFIX>
        | ["1"-"9"] (["0"-"9"])* <INTSUFFIX>
        | "0x" (["0"-"9","a"-"f"])+  <INTSUFFIX> > 
| <  #INTSUFFIX : ("l" | "u" | "lu" | "ul")? > 

| <  #FLOATCONST : <LOCAL_FLOATCONST> ("f" | "l")?> 
| <  #LOCAL_FLOATCONST :    <DIGITS> "." (<DIGITS>)? (<EXPPART>)?// Digit before decimal
                          | "." <DIGITS>             (<EXPPART>)?// No digit before decimal
                          | <DIGITS>                 <EXPPART>   // No decimal
  > 
| <  #DIGITS :          (["0"-"9"])+ >
| <  #EXPPART  :        "e" (["-","+"])? (["0"-"9"])+  >
}

<DEFAULT, MIDLINE>TOKEN :
{
  < KEEP_ACONST : <CHARACTER> | <STRING> >
  { colourClass = CONSTANT ; }
  : MIDLINE
|
  < #CHARACTER : ("L")? "'"
                 ( (~["'","\\","\n","\r"])
                   | <SIMPLEESCAPESEQ>
                   | <OCTALESCAPESEQ>
                   | <HEXESCAPESEQ>
                   | <UCODENAME>
                 )+
                 "'" >
|
  < #STRING : ("L")? "\""
                ( ( ~["\"","\\","\n","\r"])
                  | <SIMPLEESCAPESEQ>
                  | <OCTALESCAPESEQ>
                  | <HEXESCAPESEQ>
                  | <UCODENAME>
                )*
              "\"" >
|  < #SIMPLEESCAPESEQ : "\\" ["n","t","v","b","r","f","a","\\","?","'","\""] >
|  < #OCTALESCAPESEQ :  "\\" ["0"-"7"] (["0"-"7"])? (["0"-"7"])? >
|  < #HEXESCAPESEQ :    "\\"  "x" (<HEXDIG>)+ >
|  < #UCODENAME :       "\\" ["u","U"] <HEXQUAD> (<HEXQUAD>)? >
|  < #HEXQUAD :         <HEXDIG> <HEXDIG> <HEXDIG> <HEXDIG> >
|  < #HEXDIG :          ["0"-"9","a"-"f","A"-"F"] >
}

<DEFAULT, MIDLINE>TOKEN :
{
  <  KEEP_ID : ["a"-"z","A"-"Z", "_"] (["a"-"z","A"-"Z","0"-"9","_"])* >
     : MIDLINE
}

// Finally a catch all to collect tokens with 'default' colouring
<DEFAULT, MIDLINE>TOKEN :
{
  <  KEEP_REST : ~[] >
  : MIDLINE
}


///////////////////////////////////////////////////////////////////
// Here begins the context free grammar
// This grammar follows the ISO standard grammar to
// the extent possible.
// Deviations are noted.
///////////////////////////////////////////////////////////////////


// translation_unit --> group ? EOF
void translation_unit( StringBuffer sb ) :
{
}
{
    { sb.append( "#line "+ 1 + " \"" +file.getUniqueNumber() +"\"\n" ) ; }
    opt_group( true, sb ) <EOF>
    { sb.append( "\n" ) ; }
}

// opt_group --> group_part *
void opt_group( boolean record, StringBuffer sb ) :
{
}
{
    ( group_part( record, sb ) )*
}

// group_part --> pp-token | new_line | if-section | control-line
void group_part( boolean record, StringBuffer sb ) :
{
}
{
    pp_token(record, sb)
|  
    newline()
|
    LOOKAHEAD( <STARTDIRECTIVE> (<PPIF> | <PPIFDEF> | <PPIFNDEF> ) )
    if_section(record, sb)
|
    control_line(record, sb)
}

// if_section --> if_group elif_groups * else_group ? endif-line
void if_section( boolean record, StringBuffer sb ) :
{
}
{
    if_group( record, sb )
    (LOOKAHEAD(<STARTDIRECTIVE> <PPELIF>) elif_group(record, sb))*
    (LOOKAHEAD(<STARTDIRECTIVE> <PPELSE>) else_group(record, sb))?
    endif_line()
}

// if_group
void if_group( boolean record, StringBuffer sb ) :
{
}
{
    LOOKAHEAD(<STARTDIRECTIVE> <PPIF>)
    <STARTDIRECTIVE> <PPIF> { Assert.apology( "#if is not supported" ) ; }
|
    LOOKAHEAD(<STARTDIRECTIVE> <PPIFDEF>)
    <STARTDIRECTIVE> <PPIFDEF>  { Assert.apology( "#ifdef is not supported" ) ; }
|
    LOOKAHEAD(<STARTDIRECTIVE> <PPIFNDEF>)
    <STARTDIRECTIVE> <PPIFNDEF>  { Assert.apology( "#ifndef is not supported" ) ; }
}

// elif_group
void elif_group( boolean record, StringBuffer sb ) :
{
}
{
    <STARTDIRECTIVE> <PPELIF> /*...*/
}

// else_group
void else_group( boolean record, StringBuffer sb ) :
{
}
{
    <STARTDIRECTIVE> <PPELSE> /*...*/
}

// endif_line
void endif_line( ) :
{
}
{
    <STARTDIRECTIVE> <PPENDIF> /*...*/
}

// control_line
void control_line( boolean record, StringBuffer sb ) :
{
}
{
    <STARTDIRECTIVE> 
    (
        <PPINCLUDE> more_include( record, sb ) 
    |
        <PPDEFINE> { Assert.apology( "#define is not supported" ) ; }
    |
        <PPUNDEF> { Assert.apology( "#undef is not supported" ) ; }
    |
        <PPLINE> { Assert.apology( "#line is not supported" ) ; }
    |
        <PPPRAGMA> { Assert.apology( "#pragma is not supported" ) ; }
    |
        <NEWLINE>
    )
}


// more_include
void more_include( boolean record, StringBuffer sb ) :
{
    Token t ;
}
{
    (
        t=<DQFILENAME>
        spaces( )
        newline( )
        { includeFile( sb, t.image.substring( 1, t.image.length()-1 ) ) ; }
    |
        t=<AQFILENAME>
        spaces( )
        newline()
        { includeStandardFile( sb, t.image.substring( 1, t.image.length()-1 ) ) ; }
    |
        { Assert.apology( "Fancy includes are not supported" ) ; }
     )
}
    

// pp_token 
void pp_token( boolean record, StringBuffer sb ) :
{
   Token keep ;
}
{
          keep = <KEEP_KEYWORD> { if( record )output_token( keep, sb) ; }
        | keep = <KEEP_NCONST> { output_token( keep, sb) ; }
        | keep = <KEEP_ACONST> { output_token( keep, sb) ; }
        | keep = <KEEP_ID> { output_token( keep, sb) ; }
        | keep = <KEEP_REST> { output_token( keep, sb) ; }
        | keep = <KEEP_SPACE> { output_token( keep, sb) ; }
        | keep = <CSTYLECOMMENTSTART> { keep.image = " " ; output_token( keep, sb) ; }
        | keep = <LINECOMMENTSTART> { keep.image = " " ; output_token( keep, sb) ; }
//        | keep = <PEDAGOGICALMARKUP0> { keep.image = " " ; output_token( keep, sb) ; }
//        | keep = <PEDAGOGICALMARKUP1> { keep.image = " " ; output_token( keep, sb) ; }
//        | keep = <PEDAGOGICALMARKUP2> { keep.image = " " ; output_token( keep, sb) ; }
//        | keep = <PEDAGOGICALMARKUP3> { keep.image = " " ; output_token( keep, sb) ; }
//        | keep = <PEDAGOGICALMARKUP4> { keep.image = " " ; output_token( keep, sb) ; }
        
}


// newline
void newline( ) :
{
   Token keep ;
}
{
        keep = <NEWLINE>
}


// spaces
void spaces(  ) :
{
}
{
        ( <KEEP_SPACE> | <CSTYLECOMMENTSTART> | <LINECOMMENTSTART>)*
}