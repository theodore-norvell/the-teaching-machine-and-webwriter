//     Copyright 1998--2010 Michael Bruce-Lockhart and Theodore S. Norvell
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License. 
// You may obtain a copy of the License at 
//
//     http://www.apache.org/licenses/LICENSE-2.0 
//
// Unless required by applicable law or agreed to in writing, 
// software distributed under the License is distributed on an 
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
// either express or implied. See the License for the specific language 
// governing permissions and limitations under the License.

package tm.clc.analysis;

import tm.utilities.Assert;

/**
 * A rule node that applies a different rule to each operand, 
 * followed by a final rule associated with this node.
 */
public class CGROperandBranchNode extends CGRNode {
	private static final String OPERAND_RULE_MISMATCH = 
		"Given {0,number} operands, but have {1,number} operand rules.";

	private CodeGenRule [] operandrules;

	/**
	 * Creates a new <code>CGROperandBranchNode</code> instance.
	 *
	 * @param rule the <code>CodeGenRule</code> to apply after operand rules
	 * @param operandrules one rule is defined for each operand expected, in 
	 * left-to-right order.
	 */
	public CGROperandBranchNode (CodeGenRule rule, CodeGenRule [] operandrules) {
		super (rule);
		this.operandrules = operandrules;
	}

	/**
	 * Applies the operand rules first, followed by the node rule.
	 *
	 * @param exp will hold the expression if generated by the node rule
	 */
	public void apply (ExpressionPtr exp) {
		if (exp.operandCount () > operandrules.length) 
			Assert.apology (OPERAND_RULE_MISMATCH, 
							new Object [] { new Integer (exp.operandCount ()),
											new Integer (operandrules.length) });

		for (int i = 0; i < exp.operandCount (); i++) {
		    ExpressionPtr opep = 
			new ExpressionPtr (exp.get (i), exp.op (), null);
		    applyRule (operandrules[i], opep);
		    exp.set (opep.get (), i);
		}
		applyRule (rule, exp);
	}
}
