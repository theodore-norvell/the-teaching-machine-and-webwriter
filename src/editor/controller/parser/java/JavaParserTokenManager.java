//     Copyright 2007 Hao Sun
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License. 
// You may obtain a copy of the License at 
//
//     http://www.apache.org/licenses/LICENSE-2.0 
//
// Unless required by applicable law or agreed to in writing, 
// software distributed under the License is distributed on an 
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
// either express or implied. See the License for the specific language 
// governing permissions and limitations under the License.

/* Generated By:JavaCC: Do not edit this line. JavaParserTokenManager.java */
package editor.controller.parser.java;
import java.io.* ;
import java.util.* ;
import javax.swing.text.SimpleAttributeSet;
import editor.controller.parser.Token;
import editor.controller.parser.TokenStyleConstants;

public class JavaParserTokenManager implements JavaParserConstants
{
    private static final Integer dummy = new Integer(0);
    private static Hashtable<String,Integer> keywords = new Hashtable<String,Integer>() ;
    private static boolean hashtable_initialized = false ;

    private static void initialize_the_hashtable() {
        keywords.put( "abstract"  , dummy ) ;
        keywords.put( "boolean"  , dummy ) ;
        keywords.put( "break"  , dummy ) ;
        keywords.put( "byte"  , dummy ) ;
        keywords.put( "case"  , dummy ) ;
        keywords.put( "catch"  , dummy ) ;
        keywords.put( "char"  , dummy ) ;
        keywords.put( "class"  , dummy ) ;
        keywords.put( "const"  , dummy ) ;
        keywords.put( "continue"  , dummy ) ;
        keywords.put( "default"  , dummy ) ;
        keywords.put( "do"  , dummy ) ;
        keywords.put( "double"  , dummy ) ;
        keywords.put( "else"  , dummy ) ;
        keywords.put( "extends"  , dummy ) ;
        keywords.put( "false"  , dummy ) ;
        keywords.put( "final"  , dummy ) ;
        keywords.put( "finally"  , dummy ) ;
        keywords.put( "float"  , dummy ) ;
        keywords.put( "for"  , dummy ) ;
        keywords.put( "goto"  , dummy ) ;
        keywords.put( "if"  , dummy ) ;
        keywords.put( "implements"  , dummy ) ;
        keywords.put( "import"  , dummy ) ;
        keywords.put( "instanceof"  , dummy ) ;
        keywords.put( "int"  , dummy ) ;
        keywords.put( "interface"  , dummy ) ;
        keywords.put( "long"  , dummy ) ;
        keywords.put( "native"  , dummy ) ;
        keywords.put( "new"  , dummy ) ;
        keywords.put( "null"  , dummy ) ;
        keywords.put( "package" , dummy ) ;
        keywords.put( "private"  , dummy ) ;
        keywords.put( "protected"  , dummy ) ;
        keywords.put( "public"  , dummy ) ;
        keywords.put( "return"  , dummy ) ;
        keywords.put( "short"  , dummy ) ;
        keywords.put( "static"  , dummy ) ;
        keywords.put( "super"  , dummy ) ;
        keywords.put( "switch"  , dummy ) ;
        keywords.put( "synchronized"  , dummy ) ;
        keywords.put( "this"  , dummy ) ;
        keywords.put( "throw"  , dummy ) ;
        keywords.put( "throws"  , dummy ) ;
        keywords.put( "transient"  , dummy ) ;
        keywords.put( "true"  , dummy ) ;
        keywords.put( "try"  , dummy ) ;
        keywords.put( "void"  , dummy ) ;
        keywords.put( "volatile"  , dummy ) ;
        keywords.put( "while"  , dummy ) ;
        keywords.put( "strictfp"  , dummy ) ;

        hashtable_initialized = true ; }

    private static final SimpleAttributeSet PLAIN = TokenStyleConstants.PLAINTEXT_COLOR ;
    private static final SimpleAttributeSet KEYWORD = TokenStyleConstants.KEYWORD_COLOR ;
    private static final SimpleAttributeSet COMMENT = TokenStyleConstants.COMMENT_COLOR ;
    private static final SimpleAttributeSet CONSTANT = TokenStyleConstants.CONSTANT_COLOR ;
    private static final SimpleAttributeSet PREPROCESSOR = TokenStyleConstants.PREPROCESSOR_COLOR ;
    private static final SimpleAttributeSet OPERATORS = TokenStyleConstants.OPERATOR_COLOR ;
        private static final SimpleAttributeSet IDENTIFIERS = TokenStyleConstants.IDENTIFIER_COLOR ;
        private static final SimpleAttributeSet METHODS = TokenStyleConstants.METHOD_COLOR ;

    void CommonTokenAction(Token token) {
        if( ! hashtable_initialized ) {
            initialize_the_hashtable() ; }

        if( token.kind == ID_OR_KEYWORD
         && keywords.containsKey( token.image ) ) {
            token.style = KEYWORD ; }
//        if( token.kind == METHOD_OR_FIELD){//        	token.style = METHODS ;//        }
        if(token.style == null)
            token.style = PLAIN ;
    }
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x20000000L) != 0L)
            return 10;
         if ((active0 & 0x801000000000080L) != 0L)
            return 0;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 33;
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
      case 37:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
      case 38:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_0(0x1000040000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 21);
      case 41:
         return jjStopAtPos(0, 22);
      case 42:
         jjmatchedKind = 47;
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x0L);
      case 43:
         jjmatchedKind = 45;
         return jjMoveStringLiteralDfa1_0(0x100080000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 28);
      case 45:
         jjmatchedKind = 46;
         return jjMoveStringLiteralDfa1_0(0x200100000000000L, 0x0L);
      case 46:
         return jjStartNfaWithStates_0(0, 29, 10);
      case 47:
         jjmatchedKind = 48;
         return jjMoveStringLiteralDfa1_0(0x800000000000080L, 0x0L);
      case 58:
         return jjStopAtPos(0, 36);
      case 59:
         return jjStopAtPos(0, 27);
      case 60:
         jjmatchedKind = 32;
         return jjMoveStringLiteralDfa1_0(0x20004000000000L, 0x1L);
      case 61:
         jjmatchedKind = 30;
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L);
      case 62:
         jjmatchedKind = 31;
         return jjMoveStringLiteralDfa1_0(0xc0008000000000L, 0x6L);
      case 63:
         return jjStopAtPos(0, 35);
      case 91:
         return jjStopAtPos(0, 25);
      case 93:
         return jjStopAtPos(0, 26);
      case 94:
         jjmatchedKind = 51;
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 23);
      case 124:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_0(0x2000020000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 24);
      case 126:
         return jjStopAtPos(0, 34);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         break;
      case 42:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      case 43:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         break;
      case 45:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         break;
      case 60:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1L);
      case 61:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 39);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         break;
      case 62:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L, active1, 0x6L);
      case 124:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(2, 64);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(2, 65);
         break;
      case 62:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, 0L, active1);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(3, 66);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, 0L, active1);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 56;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  else if (curChar == 36)
                  {
                     if (kind > 18)
                        kind = 18;
                     jjCheckNAdd(34);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 39)
                     jjAddStates(10, 11);
                  else if (curChar == 46)
                     jjCheckNAdd(10);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAddTwoStates(7, 8);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAddStates(12, 14);
                  }
                  break;
               case 0:
                  if (curChar != 47)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAddStates(15, 17);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAddStates(15, 17);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 3:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if (curChar == 46)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddStates(18, 20);
                  break;
               case 12:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(13, 14);
                  break;
               case 15:
                  if (curChar == 39)
                     jjAddStates(10, 11);
                  break;
               case 16:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 17:
                  if (curChar == 39 && kind > 15)
                     kind = 15;
                  break;
               case 19:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 20:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(21, 17);
                  break;
               case 21:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 22:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(21);
                  break;
               case 24:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  break;
               case 25:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 27:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 28:
                  if (curChar == 34 && kind > 16)
                     kind = 16;
                  break;
               case 29:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(21, 24);
                  break;
               case 30:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 31:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(30);
                  break;
               case 33:
                  if (curChar != 36)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(34);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 37:
                  if (curChar != 46)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddStates(25, 27);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddStates(25, 27);
                  break;
               case 40:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(41, 14);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 44:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(45);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(45, 14);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 48:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(49);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(49, 14);
                  break;
               case 50:
                  if (curChar != 48)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddStates(12, 14);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjAddStates(31, 32);
                  break;
               case 54:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(54, 55);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 34:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(34);
                  break;
               case 1:
                  if (kind > 6)
                     kind = 6;
                  jjAddStates(15, 17);
                  break;
               case 8:
                  if ((0x100000001000L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 11:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(33, 34);
                  break;
               case 14:
                  if ((0x5000000050L & l) != 0L && kind > 13)
                     kind = 13;
                  break;
               case 16:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 18:
                  if (curChar == 92)
                     jjAddStates(35, 37);
                  break;
               case 19:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 25:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 26:
                  if (curChar == 92)
                     jjAddStates(38, 40);
                  break;
               case 27:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 39:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(41, 42);
                  break;
               case 43:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(43, 44);
                  break;
               case 47:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(45, 46);
                  break;
               case 51:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(52);
                  break;
               case 52:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddTwoStates(52, 53);
                  break;
               case 53:
                  if ((0x100000001000L & l) != 0L && kind > 11)
                     kind = 11;
                  break;
               case 55:
                  if ((0x100000001000L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 34:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(34);
                  break;
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjAddStates(15, 17);
                  break;
               case 16:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 25:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(7, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 56 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x100L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   36, 37, 42, 43, 46, 47, 14, 25, 26, 28, 16, 18, 8, 51, 54, 1, 
   2, 4, 10, 11, 14, 25, 26, 30, 28, 38, 39, 14, 46, 47, 14, 52, 
   53, 12, 13, 19, 20, 22, 27, 29, 31, 40, 41, 44, 45, 48, 49, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, "\50", "\51", "\173", "\175", 
"\133", "\135", "\73", "\54", "\56", "\75", "\76", "\74", "\41", "\176", "\77", "\72", 
"\75\75", "\74\75", "\76\75", "\41\75", "\174\174", "\46\46", "\53\53", "\55\55", "\53", 
"\55", "\52", "\57", "\46", "\174", "\136", "\45", "\74\74", "\76\76", "\76\76\76", 
"\53\75", "\55\75", "\52\75", "\57\75", "\46\75", "\174\75", "\136\75", "\45\75", 
"\74\74\75", "\76\76\75", "\76\76\76\75", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_MULTI_LINE_COMMENT", 
};
public static final int[] jjnewLexState = {
   0, -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffe5bd41L, 0x7L, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 
};
static final long[] jjtoMore = {
   0x280L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[56];
private final int[] jjstateSet = new int[112];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public JavaParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public JavaParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 56; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      TokenLexicalActions(matchedToken);
      CommonTokenAction(matchedToken);
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 9)
         {
            jjmatchedKind = 9;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           CommonTokenAction(matchedToken);
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
//     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 6 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
   matchedToken.style=COMMENT; CommonTokenAction( matchedToken );
         break;
      case 8 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
   matchedToken.style=COMMENT; CommonTokenAction( matchedToken );
         break;
      case 10 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    matchedToken.style = CONSTANT ;
         break;
      case 11 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    matchedToken.style = CONSTANT ;
         break;
      case 12 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    matchedToken.style = CONSTANT ;
         break;
      case 13 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    matchedToken.style = CONSTANT ;
         break;
      case 15 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    matchedToken.style = CONSTANT ;
         break;
      case 16 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    matchedToken.style = CONSTANT ;
         break;
      case 18 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    matchedToken.style = IDENTIFIERS ;
         break;
      case 30 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[30]);
    matchedToken.style = OPERATORS ;
         break;
      case 37 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[37]);
  matchedToken.style = OPERATORS ;
         break;
      case 38 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[38]);
  matchedToken.style = OPERATORS ;
         break;
      case 39 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[39]);
  matchedToken.style = OPERATORS ;
         break;
      case 40 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[40]);
  matchedToken.style = OPERATORS ;
         break;
      case 41 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[41]);
  matchedToken.style = OPERATORS ;
         break;
      case 42 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[42]);
  matchedToken.style = OPERATORS ;
         break;
      case 56 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[56]);
  matchedToken.style = OPERATORS ;
         break;
      case 57 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[57]);
  matchedToken.style = OPERATORS ;
         break;
      case 58 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[58]);
  matchedToken.style = OPERATORS ;
         break;
      case 59 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[59]);
  matchedToken.style = OPERATORS ;
         break;
      case 60 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[60]);
  matchedToken.style = OPERATORS ;
         break;
      case 61 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[61]);
  matchedToken.style = OPERATORS ;
         break;
      case 62 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[62]);
  matchedToken.style = OPERATORS ;
         break;
      case 63 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[63]);
  matchedToken.style = OPERATORS ;
         break;
      case 64 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[64]);
  matchedToken.style = OPERATORS ;
         break;
      case 65 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[65]);
  matchedToken.style = OPERATORS ;
         break;
      case 66 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[66]);
  matchedToken.style = OPERATORS ;
         break;
      default : 
         break;
   }
}
}
