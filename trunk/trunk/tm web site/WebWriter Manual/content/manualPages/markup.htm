<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html401/sgml/dtd.html"><head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<script language="JavaScript">
nestingDepth = "../../";
</script>
<script language="JavaScript" src="../noteConstants.js"></script>
<script language="JavaScript" src="../../webWriter/header.js"></script>
<script language="JavaScript" src="../../webWriter/buttonClass.js"></script>
<script language="JavaScript" src="../../webWriter/parser.js"></script>
<script language="JavaScript" src="../../webWriter/web_writer.js"></script>

<!-- The next files are for markup.-->
    <script language="JavaScript" src="../../webWriter/mclexer.js"></script>
    <script language="JavaScript" src="../../webWriter/markUp.js"></script>
    <script language="JavaScript" src="../../webWriter/markUpCPP.js"></script>
    <script language="JavaScript" src="../../webWriter/markUpJava.js"></script>

<title>Pedagogical Markup</title>
<link href="../../style/notesScreen.css" rel="stylesheet" type="text/css">
</head>
<body>
<h2>Introduction</h2>
<p><span class="WW">WebWriter++</span> tries to meet a number of objectives in allowing authors to present code to students&mdash;</p>
<ol>
<li>The code should be presented in a fashion familiar to students. Typically, this means <em>syntax-staining</em> the code in a manner that is as close to the way their editor does it as possible.</li>
<li>The code should be exportable to the <span class="TM">Teaching Machine</span>.</li>
<li>The code should be isolated in a separate, compilable file, to allow an instructor to check for syntax and even debug it. </li>
<li>Markup techniques available in the <span class="WW">WebWriter++</span> toolset
  should be available for use with code.</li>
</ol>
<p>It might seem that syntax-staining (1) and code mark-up (4) would be incompatible with the other two objectives. However, (1) is easily achieved by importing the source code and parsing and staining it on the fly. <a href="insert_code.htm" onMouseOver="window.status='Jump to insert code tools.'; return true;" onMouseOut="window.status=''; return true;">This feature</a> was included in the toolset, which leaves only the fourth objective.</p>
<p>Enter <em>pedagogical mark-up</em> which is a small language that allows certain <span class="WW">WebWriter++</span> calls to be embedded in C/C++ comments.</p>
<h2><a name="tools">Supported Tools</a></h2>
<p>Currently, the following tools are supported:</p>
<ul><li><a href="#popups">pop-ups</a></li>
<li><a href="#rollovers">rollover blocks</a></li>
<li><a href="#definitions">definitions</a></li>
<li><a href="#Tagging">selection tagging and invisible code</a>.</li>
</ul>
<p>Indeed, pop-ups and rollover blocks were initially developed specifically to enable the marking of code.</p>
<h2><a name="syntax">Syntax</a></h2>
<h3>General</h3>
<p>All mark-ups must appear inside C-style (multi-line) comments ('/* */'). Currently <span class="WW">WebWriter++</span> is unforgiving about white space so that pedagogical markups must occur immediately after (and before) the comment operators, as follows:</p>
<code><pre>		/*#p="integerPopup"*/int/*#/p*/ count = 0;	</pre></code>
<p>Here, the keyword <code>int</code> has been marked as a pop link. The <code>#p="integerPopup"</code> command (which is wrapped in comment characters with no intervening spaces) declares that a pop link (which will call up a pop-up named integerPopup) starts at the keyword. Similarly, <code>#/p</code> marks the end of the link. Thus, the <code>int</code> keyword will appear as a link to the integerPopup when the code is displayed by <span class="WW">WebWriter++</span>.</p>
<h3><a name="popups">Popups</a></h3>
<code>
<pre>   /*#P="popupName" &quot;The text for the popUp&quot;*/</pre>
</code>
<p>Creates the  pop-up.  While html is
  allowed it does not currently work. A pop-up only has to be defined once (on
  a particular page). It can be linked multiple times. If you want cross-site
  pop-ups, use definitions and put them in the dictionary.</p>
<code>
<pre>   /*#p="popupName"*/</pre></code>
<p>Marks the beginning of a pop-up link. The "popupName" should be the name of the pop-up you want to see appear when the link is rolled over.</p>
<code><pre>    /*#/p*/</pre></code>
<p>Terminate a pop-up link.</p>
<h3><a name="rollovers">Rollover Blocks</a></h3>
<code><pre>   /*#B="blockName"*/</pre></code>
<p>Starts the block. The background colour of the block will change when its link is rolled over. Blocks may be wholly nested within each other.</p>
<code><pre>    /*#/B*/</pre></code>
<p>Terminate a block.</p>
<code><pre>   /*#b="blockName"*/</pre></code>
<p>Marks the beginning of a rollover block link. The "blockName" should be the name of the rollover block you want to see illuminated when the link is rolled over.</p>
<code><pre>    /*#/b*/</pre></code>
<p>Terminate a rollover block link.</p>
<h3><a name="definitions">Definitions</a></h3>
<code><pre>   /*#d="definitionName"*/</pre></code>
<p>Marks the beginning of a definition link. The "definitionName" should be the name of the definition you want to see pop-up when the link is rolled over. Definitions are kept in a separate, standard dictionary.</p>
<code><pre>    /*#/d*/</pre></code>
<p>Terminate a definition link.</p>
<h2><a name="Tagging">Tagging</a> and invisible code</h2>
<h3>Tagging with #T</h3>
<p>Any section of code can be tagged by adding before it </p>
<p><code>/*#T tagName */</code></p>
<p>and</p>
<p><code>/*#/T tagName */</code> </p>
<p>after it. tagName can be any (nonempty) sequent of ascii letters and digits, except for &quot;true&quot; and &quot;false&quot;. Leading and trailing whitespace
  are optional (that is, they are  ignored).</p>
<p>A piece of code can carry as many tags as the instructor wishes. Tags do not
  have to nest. Consider</p>
<pre class="code">/*#TA*/Bob /*#/TA*/saw /*#TA*/a /*#TB*/big
/*#/TA*/hairy /*#/TB*/monster</pre>
<p>Each section is associated with a set of tags as follows:</p>
<table width="90%" border="1">
  <tr>
    <th align="left" scope="col">Section</th>
    <th align="left" scope="col">Tag set</th>
  </tr>
  <tr>
    <td>Bob</td>
    <td>{A}</td>
  </tr>
  <tr>
    <td>saw</td>
    <td>{ }</td>
  </tr>
  <tr>
    <td>a</td>
    <td>{A}</td>
  </tr>
  <tr>
    <td>big<br>
    &nbsp; </td>
    <td>{A,B}</td>
  </tr>
  <tr>
    <td>hairy</td>
    <td>{B}</td>
  </tr>
  <tr>
    <td>monster</td>
    <td>{ }</td>
  </tr>
</table>
<p>Tags are used in conjunction with a pair of selection expressions in the <a href="insert_code.htm#insertCode">insertCode</a> command
  to control what code sections are displayed by WebWriter++ and
in the TM.  Given a selection expression E and a section S with tag set T: S is <em>selected</em> if (and only if) E evaluates to true if we replace (in E) each tag in T with &quot;true&quot; and each tag not in T with &quot;false&quot;. Only selected sections will be displayed.</p>
<table width="90%" border="1">
  <tr>
    <th align="left" scope="col">Selection expression</th>
    <th align="left" scope="col">Displayed</th>
  </tr>
  <tr>
    <td>default (!S&amp;!L)</td>
    <td><p>Bob saw a big <br>
    hairy monster</p></td>
  </tr>
  <tr>
    <td>A</td>
    <td>Bob a big <br>&nbsp; </td>
  </tr>
  <tr>
    <td>B</td>
    <td>big <br>
    hairy</td>
  </tr>
  <tr>
    <td>A|B</td>
    <td><p>Bob a big <br>
    hairy</p></td>
  </tr>
  <tr>
    <td>A&amp;B</td>
    <td>big <br>
    &nbsp; </td>
  </tr>
  <tr>
    <td>!A</td>
    <td>saw hairy monster</td>
  </tr>
  <tr>
    <td>!B</td>
    <td>Bob saw a monster</td>
  </tr>
  <tr>
    <td>!A&amp;!B</td>
    <td>saw monster</td>
  </tr>
</table>
<p>&nbsp;</p>
<p>Here is a larger example.</p>
<pre class="code">class MyString{
public:
  MyString(char* p);	// Construct using a standard string
  MyString();			// &quot;default&quot; (no arguement) constructor
  MyString(MyString&amp; orig);		// Copy constructor
  ~MyString();		// standard destructor to deal with heap

// Accessor functions - used to read object data without changing it
  int length() ;
  char getChar(int i) ;	// get char at location i
  void get(char* buff) ;	// Get the string &amp; put it into user buff
  bool compare(MyString&amp; other);	// true if equal
  
// Mutator functions - used to change string objects
  void setChar(int i, char c); // Change char at i to c
  void changeTo(char* newString);	// Change the whole string
  
/* Notice the change to pass by ref to improve efficiency */
  void changeTo(MyString&amp; newString);	// Function overload

private:
  char* mPtr;	// pointer into the heap where the actual string will be
  int mLength;	// length of the string
  };

<strong>/*#TA*/</strong>// A class of users for network management
class User{
public:
  User(char* n, char* u, char* p);

// Accessors
  MyString&amp; name();	// return reference
  int allocation();	// Disk space allowed
  MyString password();	// return value
  MyString uname() ;
  bool confirm(MyString&amp; uName, MyString&amp; pass);

// Mutators
  bool setPassword(MyString&amp; p1, MyString&amp; p2);
  void setAllocation(int a);<p></p>

protected:
  MyString mName;	// Notice attributes that are OBJECTS!
  MyString mUname;
  MyString mPassword;
  int mAllocation;	// Memory allocation, in MBytes
};<strong>/*#/TA*/</strong>

<strong>/*#TB*/</strong>class Student: public User{
public:
  Student(char* n, char* id, char* u, char* p);
  MyString id();
  void buy(long amount);
  bool approvePrint(int pages);

protected:
  MyString mId;
  long mPrintPennies;
};<strong>/*#/TB*/</strong>

/*#TC*/class Faculty: public User{
public:
  Faculty(char* n, char* u, char* p, char* today);

// accessor functions
  long pages();
  MyString cleared();

// mutator functions
  bool approvePrint(int pages);	// increases page count
  void clear(char* d);	// clears count &amp; notes date

protected:
  long mPages;	// Pages used since
  MyString mCleared;	// last date cleared
};<strong>/*#/TC*/</strong></pre>
<p>To expose only class <code>User</code> on the webSite the code is inserted
  using the <code>insertCode</code> command as follows:</p>
<p><pre class="code">function insertCode(&quot;userInherit.cpp&quot;, true, &quot;code&quot;, &quot;default.cfg&quot;, &quot;A&amp;~S&amp;~L&quot;, &quot;~S&amp;~L&quot;)</pre></p>
<p>which shows only code tagged with &quot;<code>A</code>&quot; on the eBook page, but the whole example
  when it is run in the TM. The <code>~S</code> means <em>don't display Scripts,</em> referring
  to internal scripting calls which instructors can build into the code, and &quot;~L&quot; means <em>don't show library code</em>. It's a good habit to ensure &quot;~S&amp;~L&quot; is implied by any selections, even when, as in this example, &quot;S&quot; and &quot;L&quot; tags aren't used. The final parameter in this call could be omitted, as &quot;~S&amp;~L&quot; is the default.</p>
<h3>Reserved Tags </h3>
<p>Tags &quot;<code>S</code>&quot; and &quot;<code>Script</code>&quot; are equivalent and reserved for marking intenal scripting
  calls (only &quot;<code>S</code>&quot; should be used in the <code>insertCode</code> selection strings).</p>
<p>Tags &quot;<code>L</code>&quot; and &quot;<code>Lib</code>&quot; are equivalent and reserved for
marking TM library code(only &quot;<code>L</code>&quot; should be used in the <code>insertCode</code>selection strings). </p>
<h3><a name="Invisible" id="Invisible">Invisible Code</a></h3>
<p>Code that needs to be hidden from regular compilers, but that should be compiled by the the Teaching Machine, can be put in a comment</p>
<pre class="code">/*#I code goes here*/</pre>
<p>WebWriter will not show these comments at all (not even if the selection string is &quot;S&quot;). The Teaching Machine will treat the code as if it were tagged with &quot;S&quot; (or, equivalently, &quot;Script&quot;). See below for examples.</p>
<h3><a name="TMTagging" id="Invisible2">Invisible and tagged code in the TM</a></h3>
<p>The TM will not display code that is currently unselected. Completely unselected lines are indicated by an ellipsis (...) when line numbers are displayed. For this reason, we suggest using a configuration file that turns off line numbers when scripting code is used. </p>
<p>You can use the TM's View menu to change the current selection.</p>
<p>Even white space that is selected will mean that the line is partially selected, i.e., not completely unselected.</p>
<p>Furthermore the TM will generally not stop on code that is on a completely unselected line. So scripting calls should be on completely unselected lines. The same mechanism is used to keep the TM from stopping in library code. (Library code is tagged with &quot;L&quot;, and so is not selected by default.</p>
<p>The best way to mark up TM code is like this</p>
<pre class="code">#include &lt;iostream&gt;
#include &lt;stdlib.h&gt;<strong>/*#I
#include &lt;ScriptManager&gt; */</strong>
    .
    .
    .
    int array[SIZE]; <strong>/*#I
    // Use only single line comments in invisible regions.
    ScriptManager::relay(&quot;ArrayBar&quot;, &quot;setArray&quot;, array);*/</strong>
    for (int i = 0; i &lt; SIZE; i++) {
        array[i] = 0 ; }</pre>
<p>or like this</p>
<pre class="code">#include &lt;iostream&gt;
#include &lt;stdlib.h&gt;<strong>/*#T S*/
#include &lt;ScriptManager&gt; /*#/T S*/</strong>
    .
    .
    .
    int array[SIZE]; <strong>/*#T S*/
    /* Either kind of comment is allowed here.*/
    ScriptManager::relay(&quot;ArrayBar&quot;, &quot;setArray&quot;, array);/*#/T S*/</strong>
    for (int i = 0; i &lt; SIZE; i++) {
        array[i] = 0 ; }</pre>
        
<p>The first style is best if you don't want other compilers to see the code. </p>
<p>Note that there must be nothing --not even be spaces or tab characters-- after the final &quot;*/&quot;. Whitespace characters after the final &quot;*/&quot; will be selected, by default, and so make the line appear in the TM. (This may change in the future. It's not a bug, but it is an annoyance.)</p>
<p>If the last line before the script code ends with a single line comment, you can do the following</p>
<pre class="code">    int array[SIZE]; // Make an array.
<strong>/*#I    ScriptManager::relay(&quot;ArrayBar&quot;, &quot;setArray&quot;, array);
*/</strong>    for (int i = 0; i &lt; SIZE; i++) {
        array[i] = 0 ; }
</pre>
<p>Note the funky indentation; it is deliberate. It is tempting here to put the &quot;*/&quot; before the newline. This would be fine for the TM, but WW would show a blank line before the &quot;for&quot; loop.</p>
<h2><a name="removed">Mark-Up Removed for Presentation</a></h2>
<p>While pedagogically marked code compiles just fine it is still messy and confusing
  for students to look at. Consequently, both <span class="WW">WebWriter++</span> and
  the <span class="TM">Teaching Machine</span> automatically remove pedagogical
  markups from their displays.
<p>
  <script language="JavaScript">
bottomStamp(true, true);
  </script>
</body>
</html>

