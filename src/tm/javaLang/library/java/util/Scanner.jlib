/*#TS*/
package java.util ;
import java.nio.Readable ;
import java.lang.CharBuffer ;
import java.io.Closable ;

/** Scanner for Teaching Machine
*/

// TODO move closer to the real library
public class Scanner {

	private final Readable mReadable ;
	private final Closable mClosable ;
	private final CharBuffer mBuffer ;
      
//    public Scanner(File source) {}
//    public Scanner(String source){}
//    public Scanner( InputStream source){}

    public Scanner( Readable source) {
    	mClosable = null ;
        mReadable = source ; }
    
    public void close() {
    	if( mClosable != null ) mClosable.close() ; }
    
    public boolean hasNext() {
    	skipDelimiter() ;
		return hasMoreCharacters() ; }
 
  	public String next() {
  		skipDelimiter() ;
  		String result = "" ;
  		while( hasMoreCharacters() ) {
  		    char c = peek() ;
  		    if( ! isWhileSpace(c) ) break ;
  		    result.append(c)  ;
  		    consume() ; }
  		return result ;
    }
    
    private void skipDelimiter() {
    	while( hasMoreCharacters() ) {
    		char c = peek() ;
    		if( isWhiteSpace(c) ) break ;
    		consume() ; }
    }

    
//	public Pattern delimiter();
        // Returns the Pattern this Scanner is currently using to match delimiters. 
// 	public String findInLine(Pattern pattern);
        // Attempts to find the next occurrence of the specified pattern ignoring delimiters. 
//	public String findInLine(String pattern);
        // Attempts to find the next occurrence of a pattern constructed from the specified string, ignoring delimiters. 
// 	public String findWithinHorizon(Pattern pattern, int horizon);
        // Attempts to find the next occurrence of the specified pattern. 
// 	public String findWithinHorizon(String pattern, int horizon);
        // Attempts to find the next occurrence of a pattern constructed from the specified string, ignoring delimiters. 
// 	public native boolean hasNext(Pattern pattern);
        // Returns true if the next complete token matches the specified pattern. 
// 	public native boolean hasNextBigDecimal();
        // Returns true if the next token in this scanner's input can be interpreted as a BigDecimal using the nextBigDecimal();method. 
// 	public native boolean hasNextBigInteger();
        // Returns true if the next token in this scanner's input can be interpreted as a BigInteger in the default radix using the nextBigInteger();method. 
// 	public native boolean hasNextBigInteger(int radix);
        // Returns true if the next token in this scanner's input can be interpreted as a BigInteger in the specified radix using the nextBigInteger();method. 
// 	public native boolean hasNextBoolean();
        // Returns true if the next token in this scanner's input can be interpreted as a boolean value using a case insensitive pattern created from the string "true|false". 
// 	public native boolean hasNextByte();
        // Returns true if the next token in this scanner's input can be interpreted as a byte value in the default radix using the nextByte();method. 
// 	public native boolean hasNextByte(int radix);
        // Returns true if the next token in this scanner's input can be interpreted as a byte value in the specified radix using the nextByte();method. 
// 	public native boolean hasNextDouble();
        // Returns true if the next token in this scanner's input can be interpreted as a double value using the nextDouble();method. 
// 	public native boolean hasNextFloat();
        // Returns true if the next token in this scanner's input can be interpreted as a float value using the nextFloat();method. 
// 	public native boolean hasNextInt();
        // Returns true if the next token in this scanner's input can be interpreted as an int value in the default radix using the nextInt();method. 
// 	public native boolean hasNextInt(int radix);
        // Returns true if the next token in this scanner's input can be interpreted as an int value in the specified radix using the nextInt();method. 
// 	public native boolean hasNextLine();
        // Returns true if there is another line in the input of this scanner. 
// 	public native boolean hasNextLong();
        // Returns true if the next token in this scanner's input can be interpreted as a long value in the default radix using the nextLong();method. 
// 	public native boolean hasNextLong(int radix);
        // Returns true if the next token in this scanner's input can be interpreted as a long value in the specified radix using the nextLong();method. 
// 	public native boolean hasNextShort();
        // Returns true if the next token in this scanner's input can be interpreted as a short value in the default radix using the nextShort();method. 
// 	public native boolean hasNextShort(int radix);
        // Returns true if the next token in this scanner's input can be interpreted as a short value in the specified radix using the nextShort();method. 
// 	public native IOException ioException(); Causes TM compiler error
        // Returns the IOException last thrown by this Scanner's underlying Readable. 
// 	public native Locale locale();
        // Returns this scanner's locale. 
// 	public native MatchResult match();
        // Returns the match result of the last scanning operation performed by this scanner. 
// 	public native String next(Pattern pattern);
        // Returns the next token if it matches the specified pattern. 
// 	public native String next(String pattern);
        // Returns the next token if it matches the pattern constructed from the specified string. 
// 	public native BigDecimal nextBigDecimal();
        // Scans the next token of the input as a BigDecimal. 
// 	public native BigInteger nextBigInteger();
        // Scans the next token of the input as a BigInteger. 
// 	public native BigInteger nextBigInteger(int radix);
        // Scans the next token of the input as a BigInteger. 
// 	public native boolean nextBoolean();
        // Scans the next token of the input into a boolean value and returns that value. 
 	public native byte nextByte();
        // Scans the next token of the input as a byte. 
// 	public native byte nextByte(int radix);
        // Scans the next token of the input as a byte. 
 	public native double nextDouble();
        // Scans the next token of the input as a double. 
 	public native float nextFloat();
        // Scans the next token of the input as a float. 
 	public native int nextInt();
        // Scans the next token of the input as an int. 
 	public native int nextInt(int radix);
        // Scans the next token of the input as an int. 
 	public native String nextLine();
        // Advances this scanner past the current line and returns the input that was skipped. 
 	public native long nextLong();
        // Scans the next token of the input as a long. 
 	public native long nextLong(int radix);
        // Scans the next token of the input as a long. 
 	public native short nextShort();
        // Scans the next token of the input as a short. 
 	public native short nextShort(int radix);
        // Scans the next token of the input as a short. 
 	public native int radix();
        // Returns this scanner's default radix. 
 	public native void remove();
        // The remove operation is not supported by this implementation of Iterator. 
// 	public native Scanner skip(Pattern pattern);
        // Skips input that matches the specified pattern, ignoring delimiters. 
 	public native Scanner skip(String pattern);
        // Skips input that matches a pattern constructed from the specified string. 
 	public native String toString();
        // Returns the string representation of this Scanner. 
// 	public native Scanner useDelimiter(Pattern pattern);
        // Sets this scanner's delimiting pattern to the specified pattern. 
 	public native Scanner useDelimiter(String pattern);
        // Sets this scanner's delimiting pattern to a pattern constructed from the specified String. 
// 	public native Scanner useLocale(Locale locale);
        // Sets this scanner's locale to the specified locale. 
 	public native Scanner useRadix(int radix);
        // Sets this scanner's default radix to the specified radix. 
    
}