/* Java Tokenizer
 * 
 * Copyright (C) 2004 Theodore S. Norvell
 * Permission is granted to use this file
 * provided you respect the Sun copyright below
 * and that you understand that there may be
 * errors in this file. 
 * Based on Java1.2-b.jjt (original header follows)
 */

/**
 * Copyright (C) 1996, 1997 Sun Microsystems Inc.
 *
 * Use of this file and the system it is part of is constrained by the
 * file COPYRIGHT in the root directory of this system.  You may, however,
 * make any modifications you wish to this file.
 *
 * Java files generated by running JavaCC on this file (or modified versions
 * of this file) may be used in exactly the same manner as Java files
 * generated from any grammar developed by you.
 *
 * Author: Sriram Sankar
 * Date: 3/5/97
 *
 * This file contains a Java grammar and actions that implement a front-end.
 */


options {
  JAVA_UNICODE_ESCAPE = true;
  STATIC=false;
  COMMON_TOKEN_ACTION = true ;
  BUILD_PARSER = false ;
}

PARSER_BEGIN(JavaParser)
package editor.controller.parser.java;

import java.io.* ;
import java.util.* ;

import javax.swing.text.SimpleAttributeSet;

import editor.controller.parser.Token;
import editor.controller.parser.TokenStyleConstants;

public class JavaParser {}

PARSER_END(JavaParser)

TOKEN_MGR_DECLS : {

    private static final Integer dummy = new Integer(0);
    private static Hashtable<String,Integer> keywords = new Hashtable<String,Integer>() ;
    private static boolean hashtable_initialized = false ;

    private static void initialize_the_hashtable() {
        keywords.put( "abstract"  , dummy ) ;
        keywords.put( "boolean"  , dummy ) ;
        keywords.put( "break"  , dummy ) ;
        keywords.put( "byte"  , dummy ) ;
        keywords.put( "case"  , dummy ) ;
        keywords.put( "catch"  , dummy ) ;
        keywords.put( "char"  , dummy ) ;
        keywords.put( "class"  , dummy ) ;
        keywords.put( "const"  , dummy ) ;
        keywords.put( "continue"  , dummy ) ;
        keywords.put( "default"  , dummy ) ;
        keywords.put( "do"  , dummy ) ;
        keywords.put( "double"  , dummy ) ;
        keywords.put( "else"  , dummy ) ;
        keywords.put( "extends"  , dummy ) ;
        keywords.put( "false"  , dummy ) ;
        keywords.put( "final"  , dummy ) ;
        keywords.put( "finally"  , dummy ) ;
        keywords.put( "float"  , dummy ) ;
        keywords.put( "for"  , dummy ) ;
        keywords.put( "goto"  , dummy ) ;
        keywords.put( "if"  , dummy ) ;
        keywords.put( "implements"  , dummy ) ;
        keywords.put( "import"  , dummy ) ;
        keywords.put( "instanceof"  , dummy ) ;
        keywords.put( "int"  , dummy ) ;
        keywords.put( "interface"  , dummy ) ;
        keywords.put( "long"  , dummy ) ;
        keywords.put( "native"  , dummy ) ;
        keywords.put( "new"  , dummy ) ;
        keywords.put( "null"  , dummy ) ;
        keywords.put( "package" , dummy ) ;
        keywords.put( "private"  , dummy ) ;
        keywords.put( "protected"  , dummy ) ;
        keywords.put( "public"  , dummy ) ;
        keywords.put( "return"  , dummy ) ;
        keywords.put( "short"  , dummy ) ;
        keywords.put( "static"  , dummy ) ;
        keywords.put( "super"  , dummy ) ;
        keywords.put( "switch"  , dummy ) ;
        keywords.put( "synchronized"  , dummy ) ;
        keywords.put( "this"  , dummy ) ;
        keywords.put( "throw"  , dummy ) ;
        keywords.put( "throws"  , dummy ) ;
        keywords.put( "transient"  , dummy ) ;
        keywords.put( "true"  , dummy ) ;
        keywords.put( "try"  , dummy ) ;
        keywords.put( "void"  , dummy ) ;
        keywords.put( "volatile"  , dummy ) ;
        keywords.put( "while"  , dummy ) ;
        keywords.put( "strictfp"  , dummy ) ;

        hashtable_initialized = true ; }

    private static final SimpleAttributeSet PLAIN = TokenStyleConstants.PLAINTEXT_COLOR ;
    private static final SimpleAttributeSet KEYWORD = TokenStyleConstants.KEYWORD_COLOR ;
    private static final SimpleAttributeSet COMMENT = TokenStyleConstants.COMMENT_COLOR ;
    private static final SimpleAttributeSet CONSTANT = TokenStyleConstants.CONSTANT_COLOR ;
    private static final SimpleAttributeSet PREPROCESSOR = TokenStyleConstants.PREPROCESSOR_COLOR ;
    private static final SimpleAttributeSet OPERATORS = TokenStyleConstants.OPERATORS_COLOR ;

    void CommonTokenAction(Token token) {
        if( ! hashtable_initialized ) {
            initialize_the_hashtable() ; }

        if( token.kind == ID_OR_KEYWORD
         && keywords.containsKey( token.image ) ) {
            token.style = KEYWORD ; }
        if(token.style == null)
            token.style = PLAIN ;
    }
}

/* WHITE SPACE */

SPECIAL_TOKEN :
{
  " "   {CommonTokenAction( matchedToken );}
| "\t"  {CommonTokenAction( matchedToken );}
| "\n"  {CommonTokenAction( matchedToken );}
| "\r"  {CommonTokenAction( matchedToken );}
| "\f"  {CommonTokenAction( matchedToken );}
| < "//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")? >
        {matchedToken.style=COMMENT; CommonTokenAction( matchedToken );}
}

/* COMMENTS */

MORE :
{
  < SINGLE_LINE_COMMENT: "/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > 
  {matchedToken.style=COMMENT; CommonTokenAction( matchedToken );}
  : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" >
  {matchedToken.style=COMMENT; CommonTokenAction( matchedToken );}
  : DEFAULT
}

<IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* LITERALS */

TOKEN :
{
  < DECIMAL_LITERAL: (["1"-"9"] (["0"-"9"])* | "0") (["l","L"])? >
  { matchedToken.style = CONSTANT ; } 
|
  < HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ (["l","L"])? >
  { matchedToken.style = CONSTANT ; }
|
  < OCTAL_LITERAL: "0" (["0"-"7"])+ (["l","L"])? >
  { matchedToken.style = CONSTANT ; }
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
  { matchedToken.style = CONSTANT ; }
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | <ESCAPESEQ>
      )
      "'"
  >
  { matchedToken.style = CONSTANT ; }
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | <ESCAPESEQ>
      )*
      "\""
  >
  { matchedToken.style = CONSTANT ; }
|
  < #ESCAPESEQ: "\\" ( ["n","t","b","r","f","\\","'","\""]
                     | ["0"-"7"] ( ["0"-"7"] )?
                     | ["0"-"3"] ["0"-"7"] ["0"-"7"] ) >
}

/* IDENTIFIERS */

TOKEN :
{
  < ID_OR_KEYWORD: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
  { matchedToken.style = OPERATORS ; }
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
{ matchedToken.style = OPERATORS ; }
| < LE: "<=" >
{ matchedToken.style = OPERATORS ; }
| < GE: ">=" >
{ matchedToken.style = OPERATORS ; }
| < NE: "!=" >
{ matchedToken.style = OPERATORS ; }
| < SC_OR: "||" >
{ matchedToken.style = OPERATORS ; }
| < SC_AND: "&&" >
{ matchedToken.style = OPERATORS ; }
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < RUNSIGNEDSHIFT: ">>>" >
| < PLUSASSIGN: "+=" >
{ matchedToken.style = OPERATORS ; }
| < MINUSASSIGN: "-=" >
{ matchedToken.style = OPERATORS ; }
| < STARASSIGN: "*=" >
{ matchedToken.style = OPERATORS ; }
| < SLASHASSIGN: "/=" >
{ matchedToken.style = OPERATORS ; }
| < ANDASSIGN: "&=" >
{ matchedToken.style = OPERATORS ; }
| < ORASSIGN: "|=" >
{ matchedToken.style = OPERATORS ; }
| < XORASSIGN: "^=" >
{ matchedToken.style = OPERATORS ; }
| < REMASSIGN: "%=" >
{ matchedToken.style = OPERATORS ; }
| < LSHIFTASSIGN: "<<=" >
{ matchedToken.style = OPERATORS ; }
| < RSIGNEDSHIFTASSIGN: ">>=" >
{ matchedToken.style = OPERATORS ; }
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
{ matchedToken.style = OPERATORS ; }
}
