/* (C) Theodore S. Norvell 2005 */import java.applet.*;public class MarkUp extends java.applet.Applet{    static final int UNKNOWN = 0, CPP = 1, JAVA = 2 ;    public String markUpString(String str, String url) {    	int lang = UNKNOWN ;    	url = url.toLowerCase() ;    	if( url.endsWith(".jav") || url.endsWith( ".java" ) )    		lang = JAVA ;    	else if( url.endsWith( ".c" ) || url.endsWith( ".cpp" ) || url.endsWith( ".cxx") || url.endsWith( ".c++" )    			|| url.endsWith( ".h" ) || url.endsWith( ".hpp" ) || url.endsWith( ".hxx") || url.endsWith( ".h++" ) )    		lang = CPP ;    	return markUpStringInGivenLang( str, lang) ; }    public String markUpStringInGivenLang(String str, int lang )    {        java.io.Reader inputReader = new java.io.StringReader( str ) ;        if( lang == CPP ) {            final SimpleCharStream scs = new SimpleCharStream( inputReader ) ;            final cppparserTokenManager tm = new cppparserTokenManager( scs ) ;            try {                Token t ;                do {                    t = tm.getNextToken() ;                } while( t.kind != 0) ;                tm.builder.flush() ;                return tm.builder.getCodeLines() ; }            catch( TokenMgrError e ) {                 // This should not happen.                 return( "Lexical Error: " + e.getMessage() ) ; } }        else if( lang == JAVA ) {            final JavaCharStream jcs = new JavaCharStream( inputReader ) ;            final JavaParserTokenManager tm = new JavaParserTokenManager( jcs ) ;            try {                Token t ;                do {                    t = tm.getNextToken() ;                } while( t.kind != 0) ;                tm.builder.flush() ;                return tm.builder.getCodeLines() ; }            catch( TokenMgrError e ) {                 // This should not happen.                 return( "Lexical Error: " + e.getMessage() ) ; } }        else {          return "Unrecognized language" ; }    }    public String toString() { return "MarkUp Applet" ; }    static public void main( String[] args )    {        // Test it a bit        MarkUp markUp = new MarkUp() ;        System.out.println( markUp.toString() ) ;        String cppin = "#include<iostream>\n"                  + "using namespace std ;\n"                  + "\n"                  + "int main() {/* a multi-\n"                  + "line comment *//*Another*/{\n"                  + "    cout << \"Hello World\" << endl ; // <-- not that original\n"                  + "    i = i + 10.3e+55 * 0xABC123 - '\\\\' ;\n"                  + "} /* A final comment!*/" ;        String cppout = markUp.markUpString( cppin, "file.cpp" ) ;        System.out.println( "<<<" + cppout + ">>>" ) ;        // Test it a bit        String javaIn = "import java.io.* ; \n"                  + "\n"                  + "class Hello {/* a multi-\n"                  + "line comment */{\n"                  + "    public static void main() {/* a multi-\n"                  + "line comment *//*Another*/\n"                  + "        System.out.println(\"Hello World\") ; // <-- not that original\n"                  + "    i = i + 10.3e+55 * 0xABC123 - '\\\\' ;\n"                  + "}  // and a final comment" ;        String javaOut = markUp.markUpString( javaIn, "file.JAV" ) ;        System.out.println( "<<<" + javaOut +">>>" ) ;    }}