/*#TS*/
package java.lang;

import java.util.Locale;
import java.util.Vector;


/** String class for the Teaching Machine.
 * @author mpbl
 *
 */
 
public final class String implements CharSequence /*,java.io.Serializable*/{
	private char[] myString;
	//private Vector canonicalPool;
	
	//  Initializes a newly created String object so that it represents an empty character sequence.
	String() {
		myString = new char[0];
	}
	//  Constructs a new String by decoding the specified array of bytes using the platform's default charset.
	String(byte[] bytes){
		this(bytes, 0, bytes.length);
	}
	
    //Constructs a new String by decoding the specified subarray of bytes using the platform's default charset.
	String(byte[] bytes, int offset, int length) throws IndexOutOfBoundsException{
		//if (offset + length > bytes.length) throw new IndexOutOfBoundsException();
		myString = new char[length];
		for (int i = 0; i < length; i++)
			myString[i] = (char)bytes[i + offset];		
	}
	
    // Constructs a new String by decoding the specified subarray of bytes using the specified charset.
	String(byte[] bytes, int offset, int length, String charsetName){
		/*Assert.unsupported("character sets");	*/	
	}
	
    // Constructs a new String by decoding the specified array of bytes using the specified charset.
	String(byte[] bytes, String charsetName){
		this(bytes,0,bytes.length,charsetName);
	}
	
    // Allocates a new String so that it represents the sequence of characters currently contained in the character array argument.
	String(char[] value){
		this(value, 0, value.length);
	}
	
    // Allocates a new String that contains characters from a subarray of the character array argument.
	String(char[] value, int offset, int count) throws IndexOutOfBoundsException{
		//if (offset + count > value.length) throw new IndexOutOfBoundsException();
		myString = new char[count];
		for (int i = 0; i < count; i++)
			myString[i] = value[i + offset];		
		
	}
    //Allocates a new String that contains characters from a subarray of the Unicode code point array argument.
	String(int[] codePoints, int offset, int count){
		/*Assert.unsupported("unicode", true);*/
	}
    // Initializes a newly created String object so that it represents the same sequence of characters as the argument; in other words, the newly created string is a copy of the argument string.
	String(String original){
		this((CharSequence)original);
	}
	
 /*   // Allocates a new string that contains the sequence of characters currently contained in the string buffer argument.
	String(StringBuffer buffer){
		this((CharSequence)buffer);
	}*/
	
    /* Allocates a new string that contains the sequence of characters currently contained in the string builder argument
	String(StringBuilder builder){
		this((CharSequence)builder);
	}*/
	
	private String(CharSequence source){
		myString = new char[source.length()];
		for (int i = 0; i < source.length(); i++)
			myString[i] = source.charAt(i);		
		
	}

	/* (non-Javadoc)
	 * @see java.lang.CharSequence#length()
	 */
	public int length() {
		return myString.length;
	}

	/* (non-Javadoc)
	 * @see java.lang.CharSequence#charAt(int)
	 */
	public char charAt(int arg0) throws IndexOutOfBoundsException{
		return myString[arg0];
	}

	/* (non-Javadoc)
	 * @see java.lang.CharSequence#subSequence(int, int)
	 */
	public CharSequence subSequence(int arg0, int arg1) throws IndexOutOfBoundsException {
		return substring(arg0, arg1);
	}
	
	public native int codePointAt(int index);
	
	public native int codePointBefore(int index);

	public native int codePointCount(int beginIndex, int endIndex);
	
	public int compareTo(String anotherString) {
		return compareTo((CharSequence)anotherString);
	}
	
	private int compareTo(CharSequence sequence) {
		int shortLength;
		if (length() > sequence.length())
			shortLength = sequence.length();
		else shortLength = length();
		for (int i = 0; i < shortLength; i++){
			int diff = charAt(i) - sequence.charAt(i);
			if (diff != 0) return diff;
		}
		return length() - sequence.length();
	}
	
	public int compareToIgnoreCase(String str) {
		String thisString = new String(this);
		String thatString = new String(str);
		thisString.toUpperCase();
		thatString.toUpperCase();
		return thisString.compareTo(thatString);
	}
		
	public String concat(String str) {
		return concat((CharSequence)str);
	}
	
	private String concat(CharSequence seq) {
		if (seq.length() > 0) {
			char[] temp = new char[myString.length + seq.length()];
			int i = 0;
			for (; i < myString.length; i++)
				temp[i] = myString[i];
			for (; i < temp.length; i++)
				temp[i] = seq.charAt(i - myString.length);
			myString = temp;
		}
		return this;
	}
	
	public boolean contains(CharSequence s){
		return indexOf(s, 0) != -1;
	}
	
	public boolean contentEquals(CharSequence cs){
		return compareTo(cs) == 0;
	}

/*	public boolean contentEquals(StringBuffer sb){
		return compareTo((CharSequence)sb) == 0;
	}*/

	public static String copyValueOf(char[] data){
		return copyValueOf(data, 0, data.length);
	}

	public static String copyValueOf(char[] data, int offset, int count){
		return new String(data, offset, count);
	}

	public boolean endsWith(String suffix){
		int offset = length() - suffix.length();
		if ( offset <  0) return false;
		String ending = new String(myString, offset, suffix.length());
		return suffix.compareTo(ending) == 0;
	}

/*	public boolean equals(Object anObject){
		if (! (anObject instanceof String)) return false;
		return compareTo((String)anObject) == 0;
	}  Cast not being done */

	public boolean equalsIgnoreCase(String anotherString){
		return compareToIgnoreCase(anotherString) == 0;
	}

/*	public static String format(Locale l, String format, Object... args){
	}
     // Returns a formatted string using the specified locale, format string, and arguments.

	public static String format(String format, Object... args){
	}*/
     // Returns a formatted string using the specified format string and arguments.

	public byte[] getBytes(){
		byte[] wanted = new byte[myString.length];
		for (int c = 0; c < myString.length; c++)
			wanted[c] = (byte) myString[c];
		return wanted;  // = not a recogized expression
	}

	public native byte[]getBytes(String charsetName);

	public void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin) throws IndexOutOfBoundsException{
		for (int i = srcBegin; i < srcEnd; i++)
			dst[dstBegin + i] = myString[i];
	}

	public int	hashCode(){
		int code = 0;
		for (int i = 0; i < length(); i++)
			code += charAt(i)*13;
		return code;	
	}

	public int indexOf(int ch){
		return indexOf(ch, 0);
	}

	public int indexOf(int ch, int fromIndex){
		if (fromIndex >= 0 && fromIndex < length() )
			for (int i = fromIndex; i < length(); i++)
				if (charAt(i) == ch) return i;
		return -1;
	}

	public int indexOf(String str){
		return indexOf(str, 0);
	}
 
	public int indexOf(String str, int fromIndex){
		return indexOf((String)str, fromIndex);
	}

// Required to support contains(CharSequence) method
	private int indexOf(CharSequence seq, int fromIndex){
		int seqLength = seq.length(); // suppress repeated lookups
		int myLength = length();
		
		if (fromIndex >= 0)
			for (int i = fromIndex; i + seqLength < myLength; i++){
				int j = 0;
				for ( ; j < seqLength; j++)
					if (charAt(i+j) != seq.charAt(j))
						break;
				if (j == seqLength) return i;	// didn't break so equal
			}
		return -1;		
	}

/*	public String intern(){
		if(canonicalPool == null)
			canonicalPool = new Vector();
		for (int i = 0; i < canonicalPool.size(); i++){
			String current = (String) canonicalPool.get(i);
			if (this.equals(current))
				return current;
		}
		canonicalPool.add(this);
		return this;
	}*/

	public int lastIndexOf(int ch){
		return lastIndexOf(ch, length()-1);
	}

	public int lastIndexOf(int ch, int fromIndex){
		if (fromIndex >= 0 && fromIndex < length() )
			for (int i = fromIndex; i >= 0; i--)
				if (charAt(i) == ch) return i;
		return -1;
		
	}
     // Returns the index within this string of the last occurrence of the specified character, searching backward starting at the specified index.

	public int lastIndexOf(String str){
		return lastIndexOf(str, length() - 1);
	}
     // Returns the index within this string of the rightmost occurrence of the specified substring.

	public int lastIndexOf(String str, int fromIndex){
		int strLength = str.length(); // suppress repeated lookups
		int myLength = length();
		
		if (fromIndex < myLength)
			for (int i = fromIndex; i >= strLength; i--){
				int j = 0;
				for ( ; j < strLength; j++)
					if (myString[i+j] != str.myString[j])
						break;
				if (j == strLength) return i;	// didn't break so equal
			}
		return -1;		
	}
 
	public native boolean matches(String regex);

	public native int offsetByCodePoints(int index, int codePointOffset);

	public boolean regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len){
		if (toffset >= 0 && ooffset >= 0 && toffset + len < length() && ooffset + len < other.length() ){
			for (int i = 0; i < len; i++)
				if (charAt(toffset + i) != other.charAt(ooffset + i))
					return false;
			return true;
		}
		return false;
	}

	public boolean regionMatches(int toffset, String other, int ooffset, int len){
		return regionMatches(false,toffset, other, ooffset, len);
	}

/*	public String replace(char oldChar, char newChar){
		String newString = null;
		for (int i = 0; i < length(); i++){
			if (charAt(i) == oldChar){
				if (newString == null)
					newString = new String(this);
				newString.myString[i] = newChar;
			}
		}
		if (newString == null) return this;
		return newString;
	}  having trouble comparing String to null  */

	public String replace(CharSequence target, CharSequence replacement){
		String newString = new String();
		int index = 0;
		int lastIndex = 0;
		while (index != -1){
			index = indexOf(target,index);
			if (index > -1) {
				newString = newString.concat(substring(lastIndex,index));
				newString = newString.concat(replacement);
				lastIndex = index + target.length();
			}
		}
		if (newString.length() == 0) return this;
		return newString;
	}

	public native String replaceAll(String regex, String replacement);

	public native String replaceFirst(String regex, String replacement);
	
	public String[] split(String regex) {
		return split(regex, 0);
	}
	
	public native String[] split(String regex, int limit);
	
	public boolean startsWith(String prefix){
		return startsWith(prefix, 0);
	}

	public boolean startsWith(String prefix, int offset){
		if (offset <  0 || offset + prefix.length() > length()) return false;
		String start = new String(myString, offset, prefix.length());
		return prefix.compareTo(start) == 0;
	}

	public String substring(int beginIndex){
		return substring(beginIndex, length() - 1);
	}

	public String substring(int beginIndex, int endIndex){
		return new String(myString, beginIndex, endIndex - beginIndex);
	}

	public char[] toCharArray(){
		char[] clone = new char[myString.length];
		for (int c = 0; c < myString.length; c++)
			clone[c] = myString[c];
		return clone;  // = not a recogized expression
	}

	public String toLowerCase(){
		for (int i = 0; i < length(); i++)
			if (myString[i] >= 'A' && myString[i] <= 'Z')
				myString[i] += 'a' - 'A';  // violates immutability
		return this; 
	}

/*	public String toLowerCase(Locale locale){
	}*/

	public String toString(){
		return this;
	}

	public String toUpperCase(){
		for (int i = 0; i < length(); i++)
			if (myString[i] >= 'a' && myString[i] <= 'z')
				myString[i] += 'A' - 'a';  // violates immutability
		return this; 
	}

/*	public String toUpperCase(Locale locale){
	} */
	

	public String trim(){
		int i = 0;
		for (; i < length(); i++)
			if (charAt(i) > ' ') break;
		if (i == length()) return new String();  // only whitespace
		int start = i;
		for (i = length() - 1; i > start; i--)
			if (charAt(i) > ' ') break;
		return new String(myString, start, i-start);
	}
 
	public static String valueOf(boolean b){
		if (b) return "true";
		return "false";
	}

	public static String valueOf(char c){
		char cArray[] = new char[1];
		cArray[0] = c;
		return new String(cArray);
	}

	public static String valueOf(char[] data){
		return new String(data);
	}

	public static String valueOf(char[] data, int offset, int count){
		return new String(data, offset, count);
	}

	public static native String valueOf(double d);

	public static native String valueOf(float f);

	public static native String valueOf(int i);

	public static native String valueOf(long l);

	public static native String valueOf(Object obj);
	
}
