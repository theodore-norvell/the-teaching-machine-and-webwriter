/* Generated By:JavaCC: Do not edit this line. cppparserTokenManager.java */
import java.io.* ;
import java.util.* ;

public class cppparserTokenManager implements cppparserConstants
{
    public HTMLBuilder builder = new HTMLBuilder() ;
    private static final Integer dummy = new Integer(0);
    private static Hashtable keywords = new Hashtable() ;
    private static boolean hashtable_initialized = false ;

    private static void initialize_the_hashtable() {
        keywords.put( "auto" , dummy ) ;
        keywords.put( "bool" , dummy ) ;
        keywords.put( "break" , dummy ) ;
        keywords.put( "case" , dummy ) ;
        keywords.put( "catch" , dummy ) ;
        keywords.put( "char" , dummy ) ;
        keywords.put( "const" , dummy ) ;
        keywords.put( "continue" , dummy ) ;
        keywords.put( "default" , dummy ) ;
        keywords.put( "delete" , dummy ) ;
        keywords.put( "do" , dummy ) ;
        keywords.put( "double" , dummy ) ;
        keywords.put( "else" , dummy ) ;
        keywords.put( "enum" , dummy ) ;
        keywords.put( "extern" , dummy ) ;
        keywords.put( "float" , dummy ) ;
        keywords.put( "for" , dummy ) ;
        keywords.put( "friend" , dummy ) ;
        keywords.put( "goto" , dummy ) ;
        keywords.put( "if" , dummy ) ;
        keywords.put( "inline" , dummy ) ;
        keywords.put( "int" , dummy ) ;
        keywords.put( "long" , dummy ) ;
        keywords.put( "namespace" , dummy ) ;
        keywords.put( "new" , dummy ) ;
        keywords.put( "private" , dummy ) ;
        keywords.put( "protected" , dummy ) ;
        keywords.put( "public" , dummy ) ;
        keywords.put( "redeclared" , dummy ) ;
        keywords.put( "register" , dummy ) ;
        keywords.put( "return" , dummy ) ;
        keywords.put( "short" , dummy ) ;
        keywords.put( "signed" , dummy ) ;
        keywords.put( "sizeof" , dummy ) ;
        keywords.put( "static" , dummy ) ;
        keywords.put( "struct" , dummy ) ;
        keywords.put( "class" , dummy ) ;
        keywords.put( "switch" , dummy ) ;
        keywords.put( "template" , dummy ) ;
        keywords.put( "this" , dummy ) ;
        keywords.put( "try" , dummy ) ;
        keywords.put( "typedef" , dummy ) ;
        keywords.put( "union" , dummy ) ;
        keywords.put( "unsigned" , dummy ) ;
        keywords.put( "using" , dummy ) ;
        keywords.put( "virtual" , dummy ) ;
        keywords.put( "void" , dummy ) ;
        keywords.put( "volatile" , dummy ) ;
        keywords.put( "while" , dummy ) ;
        keywords.put( "operator" , dummy ) ;
        keywords.put( "true" , dummy ) ;
        keywords.put( "false" , dummy ) ;
        keywords.put( "throw" , dummy ) ;
        hashtable_initialized = true ; }

    private static final int PLAIN = TokenClassConstants.PLAIN ;
    private static final int KEYWORD = TokenClassConstants.KEYWORD ;
    private static final int COMMENT = TokenClassConstants.COMMENT ;
    private static final int CONSTANT = TokenClassConstants.CONSTANT ;
    private static final int PREPROCESSOR = TokenClassConstants.PREPROCESSOR ;

    private int colourClass = PLAIN ;  // Used to communicate from lex actions 
    private boolean forceEndAfter = false ;

    void CommonTokenAction(Token token) {
        if( ! hashtable_initialized ) {
            initialize_the_hashtable() ; }

        if( token.kind == ID_OR_KEYWORD
         && keywords.containsKey( token.image ) ) {
            colourClass = KEYWORD ; }

                builder.digestToken( token, colourClass, forceEndAfter ) ;
                colourClass = PLAIN ;
        forceEndAfter = false ;
    }
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x40L) != 0L)
            return 0;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 2);
      case 10:
         return jjStopAtPos(0, 3);
      case 13:
         return jjStopAtPos(0, 4);
      case 32:
         return jjStopAtPos(0, 1);
      case 35:
         return jjStopAtPos(0, 7);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x40L);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 33;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x3ff400000000000L & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                     jjCheckNAdd(7);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 39)
                     jjAddStates(3, 4);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar != 47)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddStates(5, 7);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddStates(5, 7);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 3:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
               case 7:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(7);
                  break;
               case 8:
                  if (curChar == 39)
                     jjAddStates(3, 4);
                  break;
               case 9:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if (curChar == 39 && kind > 13)
                     kind = 13;
                  break;
               case 12:
                  if ((0x8000008400000000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 13:
                  if (curChar == 48)
                     jjCheckNAddTwoStates(10, 14);
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 16:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 10);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(18, 10);
                  break;
               case 19:
                  if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  break;
               case 20:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 22:
                  if ((0x8000008400000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 23:
                  if (curChar == 34 && kind > 14)
                     kind = 14;
                  break;
               case 24:
                  if (curChar == 48)
                     jjCheckNAddStates(11, 14);
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(15, 19);
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(20, 23);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(24, 27);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjstateSet[jjnewStateCnt++] = 31;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 15)
                        kind = 15;
                     jjCheckNAdd(31);
                  }
                  if (curChar == 76)
                     jjAddStates(28, 29);
                  break;
               case 1:
                  if (kind > 5)
                     kind = 5;
                  jjAddStates(5, 7);
                  break;
               case 7:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 11:
                  if (curChar == 92)
                     jjAddStates(30, 32);
                  break;
               case 12:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 17:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(18, 10);
                  break;
               case 20:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 21:
                  if (curChar == 92)
                     jjAddStates(33, 35);
                  break;
               case 22:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 28:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(24, 27);
                  break;
               case 30:
               case 31:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAdd(31);
                  break;
               case 32:
                  if (curChar == 76)
                     jjAddStates(28, 29);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjAddStates(5, 7);
                  break;
               case 9:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 20:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 33 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 10);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x100L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   20, 21, 23, 9, 11, 1, 2, 4, 15, 10, 16, 20, 21, 23, 25, 20, 
   21, 26, 23, 27, 20, 21, 26, 23, 20, 21, 29, 23, 8, 19, 12, 13, 
   17, 22, 24, 28, 
};
public static final String[] jjstrLiteralImages = {
"", "\40", "\11", "\12", "\15", null, "\57\52", "\43", null, null, null, null, 
null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_COMMENT", 
   "PREPROCESSOR_OUTPUT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 2, 0, -1, 0, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x1f5ffL, 
};
static final long[] jjtoMore = {
   0xa00L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[33];
private final int[] jjstateSet = new int[66];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public cppparserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public cppparserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 33; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      CommonTokenAction(matchedToken);
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 16)
         {
            jjmatchedKind = 16;
         }
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 9)
         {
            jjmatchedKind = 9;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 11)
         {
            jjmatchedKind = 11;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           CommonTokenAction(matchedToken);
           return matchedToken;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 5 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                         colourClass = COMMENT;
         break;
      case 6 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[6]);
        colourClass = COMMENT;
         break;
      case 7 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[7]);
        colourClass = PREPROCESSOR;
         break;
      case 8 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
          colourClass = COMMENT ; forceEndAfter = true ;
         break;
      case 10 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
          colourClass = PREPROCESSOR ;
         break;
      case 12 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                   colourClass = CONSTANT ;
         break;
      case 13 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
           colourClass = CONSTANT ;
         break;
      case 14 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
            colourClass = CONSTANT ;
         break;
      default : 
         break;
   }
}
}
