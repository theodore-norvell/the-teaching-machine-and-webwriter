<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html401/sgml/dtd.html"><head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<script language="JavaScript">
nestingDepth = "../../";
</script>
<script language="JavaScript" src="../noteConstants.js"></script>
<script language="JavaScript" src="../../webWriter/header.js"></script>
<script language="JavaScript" src="../../webWriter/buttonClass.js"></script>
<script language="JavaScript" src="../../webWriter/parser.js"></script>
<script language="JavaScript" src="../../webWriter/web_writer.js"></script>
<title>Running Examples</title>
</head>
<body>
<p>We are going to create three classes that we will improve as we go along. An 
  array class, a string class and an Account class. </p>
<p>Array and string will have to wait until the next topic.</p>
<h2><a name="account"></a>The Account Class</h2>
<p>Similar to what we did in the first assignment.</p>
<p> 
  <script language="JavaScript">
setButtons(true, false, true,"","");
insertCode("account1.cpp", true, "code", "3891lecture.tmcfg");
</script>
</p>
<p>In C, we are able to bundle data and functions together into files. Thus you 
  built a model of an account that had data for the account and some functions 
  that manipulated it.</p>
<p>Now, in C++, our unit of modularization is the <i>class</i>.</p>
<p>The account class lets us declare as many accounts (account objects) as we 
  want.</p>
<p>Each account has its own data. (Objects have their own state)</p>
<p>The functions are used to manipulate the data of any of the account objects. 
  (Classes are characterised by commonality of behaviour)</p>
<script language="JavaScript">
bottomStamp(true, true);
</script>
</html>
