/* Generated By:JavaCC: Do not edit this line. Preprocessor.java */
package tm.cpp.preprocessor ;

import java.io.* ;
import java.util.* ;
import tm.clc.parser.* ;
import tm.cpp.analysis.FileMap ;
import tm.utilities.Assert ;
import tm.utilities.TMFile ;
import tm.utilities.FileSource ;
import tm.virtualMachine.CodeStore ;

public class Preprocessor implements PreprocessorConstants {

    int currentLine = 1 ;

    FileMap fileMap  ;
    TMFile file ;
    FileSource stdFileSource ;
    CodeStore codeStore ;

    public Preprocessor( Reader reader, TMFile file, FileMap fileMap, CodeStore codeStore, FileSource stdFileSource ) {
        this( reader ) ;
        this.file = file ;
        this.fileMap = fileMap ;
        this.codeStore = codeStore ;
        this.stdFileSource = stdFileSource ;
        fileMap.put( file ) ;
        codeStore.startNewFile( file ) ;
        token_source.setCodeStore( codeStore, file ) ; }

    void includeStandardFile( StringBuffer sb, String fileName )
    throws ParseException {
        TMFile includedFile = new TMFile( stdFileSource, fileName ) ;
        Reader reader =  includedFile.toReader() ;
        Assert.error( reader != null,
            "Can not find include file <" + fileName + ">" ) ;
        includeFile( sb, includedFile, reader ) ; }

    void includeFile( StringBuffer sb, String fileName )
    throws ParseException {
        TMFile includedFile = new TMFile( file.getFileSource(), fileName ) ;
        Reader reader = includedFile.toReader() ;
        if( reader == null ) {
            includedFile = new TMFile( stdFileSource, fileName ) ;
            reader = includedFile.toReader() ;
            Assert.error( reader != null,
                "Can not find include file \u005c"" + fileName + "\u005c"" ) ; }
        includeFile( sb, includedFile, reader ) ; }

    void includeFile( StringBuffer sb, TMFile includedFile, Reader reader  )
    throws ParseException {
        Preprocessor pp = new Preprocessor( reader, includedFile, fileMap, codeStore, stdFileSource ) ;
        pp.translation_unit( sb ) ;

        sb.append( "#line "+ getToken(1).beginLine + " \u005c"" +file.getUniqueNumber() +"\u005c"\u005cn" ) ;
    }


    void output_token (Token keep, StringBuffer sb)
    {
        //System.out.println( "Keeping token of kind "+keep.kind+". Image is <"+keep.image+">. Line num is "+keep.beginLine ) ;
        if (keep.beginLine > currentLine) {
                if (keep.beginLine > currentLine + 1) {
                        // emit line directive
                        sb.append ("\u005cn"); sb.append ("#line ");
                        sb.append (keep.beginLine);
                }
                // emit a newline
                sb.append ("\u005cn");
        }
        // emit the token image
        sb.append (keep.image);

        // update the current line number
        currentLine = keep.beginLine;
    }

///////////////////////////////////////////////////////////////////
// Here begins the context free grammar
// This grammar follows the ISO standard grammar to
// the extent possible.
// Deviations are noted.
///////////////////////////////////////////////////////////////////


// translation_unit --> group ? EOF
  final public void translation_unit(StringBuffer sb) throws ParseException {
      sb.append( "#line "+ 1 + " \u005c"" +file.getUniqueNumber() +"\u005c"\u005cn" ) ;
    opt_group(true, sb);
    jj_consume_token(0);
      sb.append( "\u005cn" ) ;
  }

// opt_group --> group_part *
  final public void opt_group(boolean record, StringBuffer sb) throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KEEP_SPACE:
      case CSTYLECOMMENTSTART:
      case NEWLINE:
      case LINECOMMENTSTART:
      case STARTDIRECTIVE:
      case KEEP_KEYWORD:
      case KEEP_NCONST:
      case KEEP_ACONST:
      case KEEP_ID:
      case KEEP_REST:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      group_part(record, sb);
    }
  }

// group_part --> pp-token | new_line | if-section | control-line
  final public void group_part(boolean record, StringBuffer sb) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KEEP_SPACE:
    case CSTYLECOMMENTSTART:
    case LINECOMMENTSTART:
    case KEEP_KEYWORD:
    case KEEP_NCONST:
    case KEEP_ACONST:
    case KEEP_ID:
    case KEEP_REST:
      pp_token(record, sb);
      break;
    case NEWLINE:
      newline();
      break;
    default:
      jj_la1[1] = jj_gen;
      if (jj_2_1(2147483647)) {
        if_section(record, sb);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STARTDIRECTIVE:
          control_line(record, sb);
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

// if_section --> if_group elif_groups * else_group ? endif-line
  final public void if_section(boolean record, StringBuffer sb) throws ParseException {
    if_group(record, sb);
    label_2:
    while (true) {
      if (jj_2_2(2147483647)) {
        ;
      } else {
        break label_2;
      }
      elif_group(record, sb);
    }
    if (jj_2_3(2147483647)) {
      else_group(record, sb);
    } else {
      ;
    }
    endif_line();
  }

// if_group
  final public void if_group(boolean record, StringBuffer sb) throws ParseException {
    if (jj_2_4(2147483647)) {
      jj_consume_token(STARTDIRECTIVE);
      jj_consume_token(PPIF);
                              Assert.apology( "#if is not supported" ) ;
    } else if (jj_2_5(2147483647)) {
      jj_consume_token(STARTDIRECTIVE);
      jj_consume_token(PPIFDEF);
                                  Assert.apology( "#ifdef is not supported" ) ;
    } else if (jj_2_6(2147483647)) {
      jj_consume_token(STARTDIRECTIVE);
      jj_consume_token(PPIFNDEF);
                                   Assert.apology( "#ifndef is not supported" ) ;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// elif_group
  final public void elif_group(boolean record, StringBuffer sb) throws ParseException {
    jj_consume_token(STARTDIRECTIVE);
    jj_consume_token(PPELIF);
  }

// else_group
  final public void else_group(boolean record, StringBuffer sb) throws ParseException {
    jj_consume_token(STARTDIRECTIVE);
    jj_consume_token(PPELSE);
  }

// endif_line
  final public void endif_line() throws ParseException {
    jj_consume_token(STARTDIRECTIVE);
    jj_consume_token(PPENDIF);
  }

// control_line
  final public void control_line(boolean record, StringBuffer sb) throws ParseException {
    jj_consume_token(STARTDIRECTIVE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PPINCLUDE:
      jj_consume_token(PPINCLUDE);
      more_include(record, sb);
      break;
    case PPDEFINE:
      jj_consume_token(PPDEFINE);
                     Assert.apology( "#define is not supported" ) ;
      break;
    case PPUNDEF:
      jj_consume_token(PPUNDEF);
                    Assert.apology( "#undef is not supported" ) ;
      break;
    case PPLINE:
      jj_consume_token(PPLINE);
                   Assert.apology( "#line is not supported" ) ;
      break;
    case PPPRAGMA:
      jj_consume_token(PPPRAGMA);
                     Assert.apology( "#pragma is not supported" ) ;
      break;
    case NEWLINE:
      jj_consume_token(NEWLINE);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// more_include
  final public void more_include(boolean record, StringBuffer sb) throws ParseException {
    Token t ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DQFILENAME:
      t = jj_consume_token(DQFILENAME);
      spaces();
      newline();
          includeFile( sb, t.image.substring( 1, t.image.length()-1 ) ) ;
      break;
    case AQFILENAME:
      t = jj_consume_token(AQFILENAME);
      spaces();
      newline();
          includeStandardFile( sb, t.image.substring( 1, t.image.length()-1 ) ) ;
      break;
    default:
      jj_la1[4] = jj_gen;
          Assert.apology( "Fancy includes are not supported" ) ;
    }
  }

// pp_token 
  final public void pp_token(boolean record, StringBuffer sb) throws ParseException {
   Token keep ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KEEP_KEYWORD:
      keep = jj_consume_token(KEEP_KEYWORD);
                                  if( record )output_token( keep, sb) ;
      break;
    case KEEP_NCONST:
      keep = jj_consume_token(KEEP_NCONST);
                                 output_token( keep, sb) ;
      break;
    case KEEP_ACONST:
      keep = jj_consume_token(KEEP_ACONST);
                                 output_token( keep, sb) ;
      break;
    case KEEP_ID:
      keep = jj_consume_token(KEEP_ID);
                             output_token( keep, sb) ;
      break;
    case KEEP_REST:
      keep = jj_consume_token(KEEP_REST);
                               output_token( keep, sb) ;
      break;
    case KEEP_SPACE:
      keep = jj_consume_token(KEEP_SPACE);
                                output_token( keep, sb) ;
      break;
    case CSTYLECOMMENTSTART:
      keep = jj_consume_token(CSTYLECOMMENTSTART);
                                        keep.image = " " ; output_token( keep, sb) ;
      break;
    case LINECOMMENTSTART:
      keep = jj_consume_token(LINECOMMENTSTART);
                                      keep.image = " " ; output_token( keep, sb) ;
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// newline
  final public void newline() throws ParseException {
   Token keep ;
    keep = jj_consume_token(NEWLINE);
  }

// spaces
  final public void spaces() throws ParseException {
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KEEP_SPACE:
      case CSTYLECOMMENTSTART:
      case LINECOMMENTSTART:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KEEP_SPACE:
        jj_consume_token(KEEP_SPACE);
        break;
      case CSTYLECOMMENTSTART:
        jj_consume_token(CSTYLECOMMENTSTART);
        break;
      case LINECOMMENTSTART:
        jj_consume_token(LINECOMMENTSTART);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_3_5() {
    if (jj_scan_token(STARTDIRECTIVE)) return true;
    if (jj_scan_token(PPIFDEF)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(STARTDIRECTIVE)) return true;
    if (jj_scan_token(PPELSE)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(STARTDIRECTIVE)) return true;
    if (jj_scan_token(PPELIF)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(STARTDIRECTIVE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(STARTDIRECTIVE)) return true;
    if (jj_scan_token(PPIF)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(STARTDIRECTIVE)) return true;
    if (jj_scan_token(PPIFNDEF)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public PreprocessorTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3e00,0x1e00,0x2000,0x5c080800,0x0,0x1600,0x1600,0x1600,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x18040c,0x18040c,0x0,0x0,0x3,0x18040c,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[6];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Preprocessor(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Preprocessor(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PreprocessorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Preprocessor(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PreprocessorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Preprocessor(PreprocessorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PreprocessorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[53];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 53; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
