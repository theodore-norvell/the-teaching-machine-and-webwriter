/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package tm.cpp.parser ;
import java.io.* ;
import java.util.* ;
import tm.cpp.analysis.* ;
import tm.cpp.ast.* ;
import tm.clc.ast.* ;
import tm.clc.analysis.* ;
import tm.interfaces.SourceCoords ;
import tm.utilities.* ;

/** Token Manager. */
public class ParserTokenManager implements ParserConstants
{
    private int tokenLine ;
    private int sourceLine ;
    private TMFile file = null ;
    private ParserContext pc ;
    private FileMap fileMap ;
    public void set_parser_context( ParserContext pc ) { this.pc = pc ; }
    public void setFileMap( FileMap fileMap ) { this.fileMap = fileMap ; }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xa000000008000000L) != 0L)
            return 23;
         if ((active1 & 0xfffffffffffffffeL) != 0L)
         {
            jjmatchedKind = 144;
            return 67;
         }
         return -1;
      case 1:
         if ((active1 & 0xfffffffff7ff3ffeL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 144;
               jjmatchedPos = 1;
            }
            return 67;
         }
         if ((active1 & 0x800c000L) != 0L)
            return 67;
         return -1;
      case 2:
         if ((active1 & 0xffeffffdd6ffbffcL) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 2;
            return 67;
         }
         if ((active1 & 0x10000221000002L) != 0L)
            return 67;
         return -1;
      case 3:
         if ((active1 & 0x100a0000440600acL) != 0L)
            return 67;
         if ((active1 & 0xefe5fffd92f9bf50L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 3;
            return 67;
         }
         return -1;
      case 4:
         if ((active1 & 0x8504020000c00750L) != 0L)
            return 67;
         if ((active1 & 0x6ae1fdfd9239b800L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 144;
               jjmatchedPos = 4;
            }
            return 67;
         }
         return -1;
      case 5:
         if ((active1 & 0x6aa100dd80091c00L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 144;
               jjmatchedPos = 5;
            }
            return 67;
         }
         if ((active1 & 0x40fd201230a000L) != 0L)
            return 67;
         return -1;
      case 6:
         if ((active1 & 0x4820000880001000L) != 0L)
            return 67;
         if ((active1 & 0x228120d500090c00L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 6;
            return 67;
         }
         return -1;
      case 7:
         if ((active1 & 0x2281004400080800L) != 0L)
            return 67;
         if ((active1 & 0x209100010400L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 7;
            return 67;
         }
         return -1;
      case 8:
         if ((active1 & 0x208000010400L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 8;
            return 67;
         }
         if ((active1 & 0x1100000000L) != 0L)
            return 67;
         return -1;
      case 9:
         if ((active1 & 0x208000010000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 9;
            return 67;
         }
         if ((active1 & 0x400L) != 0L)
            return 67;
         return -1;
      case 10:
         if ((active1 & 0x200000000000L) != 0L)
            return 67;
         if ((active1 & 0x8000010000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 10;
            return 67;
         }
         return -1;
      case 11:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 11;
            return 67;
         }
         if ((active1 & 0x10000L) != 0L)
            return 67;
         return -1;
      case 12:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 12;
            return 67;
         }
         return -1;
      case 13:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 13;
            return 67;
         }
         return -1;
      case 14:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 14;
            return 67;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 60;
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x2L, 0x0L);
      case 37:
         jjmatchedKind = 56;
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L);
      case 38:
         jjmatchedKind = 43;
         return jjMoveStringLiteralDfa1_0(0x11000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 20);
      case 41:
         return jjStopAtPos(0, 21);
      case 42:
         jjmatchedKind = 54;
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L);
      case 43:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x200000100000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 25);
      case 45:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_0(0x4400000200000000L, 0x1L);
      case 46:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0x8000000008000000L, 0x0L);
      case 47:
         jjmatchedKind = 55;
         return jjMoveStringLiteralDfa1_0(0x40000c00L, 0x0L);
      case 58:
         jjmatchedKind = 23;
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 24);
      case 60:
         jjmatchedKind = 46;
         return jjMoveStringLiteralDfa1_0(0x5000400000000L, 0x0L);
      case 61:
         jjmatchedKind = 28;
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
      case 62:
         jjmatchedKind = 47;
         return jjMoveStringLiteralDfa1_0(0xa000800000000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 26);
      case 91:
         return jjStopAtPos(0, 18);
      case 93:
         return jjStopAtPos(0, 19);
      case 94:
         jjmatchedKind = 42;
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x6L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x18L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfe0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1f000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3e0000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3c00000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x38000000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x300000000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3800000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1c000000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfe0000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xff000000000000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x700000000000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3800000000000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc000000000000000L);
      case 123:
         return jjStopAtPos(0, 16);
      case 124:
         jjmatchedKind = 41;
         return jjMoveStringLiteralDfa1_0(0xc000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 17);
      case 126:
         return jjStopAtPos(0, 59);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         break;
      case 42:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         break;
      case 43:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         break;
      case 45:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0L);
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      case 58:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         break;
      case 60:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L);
      case 61:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 29);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 30);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 31);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 32);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 33);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         break;
      case 62:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0x1L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100400060L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x101c200003000L);
      case 102:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(1, 91, 67);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8006020000000080L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000c0000000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2L, active1, 0x820100L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x300000030040000L);
      case 111:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3000000045008e08L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x18001802000010L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000000002L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x700000000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2080000004L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000000000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x380000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xe0000000010000L);
      case 124:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 42:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(2, 64);
         break;
      case 46:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(2, 27);
         break;
      case 61:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(2, 34);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(2, 35);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x300000000180L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000010L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x44000000000L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2L, active1, 0x9502808802000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000010402000L);
      case 109:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(2, 65, 67);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000100000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40010e00L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x21000800008L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xe0000000180000L);
      case 114:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 88, 67);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x804400000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000020020L);
      case 116:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 93, 67);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10084200044L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000048000L);
      case 119:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 97, 67);
         break;
      case 121:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 116, 67);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x6000000080811010L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40L);
      case 100:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 124, 67);
         break;
      case 101:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 69, 67);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 81, 67);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 115, 67);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xe0080102202000L);
      case 103:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 94, 67);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200004010000000L);
      case 108:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 67, 67);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000002000080000L);
      case 109:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 82, 67);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x2L, active1, 0x400048000000000L);
      case 111:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 66, 67);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 90, 67);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x104000000100000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000000L);
      case 114:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 71, 67);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20400000000L);
      case 115:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 113, 67);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400700L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800b01000000800L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x410000000000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc00000000L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc00000000000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000000000L);
      case 101:
         if ((active0 & 0x2L) != 0L)
            return jjStopAtPos(4, 1);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 86, 67);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 127, 67);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x41000000000L);
      case 103:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 122, 67);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000000000000L);
      case 104:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 70, 67);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40302000080800L);
      case 107:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 68, 67);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000008000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000L);
      case 110:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 120, 67);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000012000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000010000300000L);
      case 115:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 72, 67);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4100000000L);
      case 116:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 87, 67);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 105, 67);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000008000002400L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000001000L);
      case 119:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 114, 67);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, 0L, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active1, 0x4000000000000400L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active1, 0x881000000000000L);
      case 99:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 101, 67);
         else if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0x201000080000L);
      case 100:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 89, 67);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 106, 67);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 118, 67);
         break;
      case 101:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 77, 67);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 79, 67);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 92, 67);
         return jjMoveStringLiteralDfa6_0(active1, 0x20008000000000L);
      case 102:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 107, 67);
         break;
      case 104:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 111, 67);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active1, 0x2000000000010000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active1, 0x80001000L);
      case 110:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 85, 67);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 104, 67);
         return jjMoveStringLiteralDfa6_0(active1, 0x200000000000800L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active1, 0x100000000L);
      case 116:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 84, 67);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 110, 67);
         return jjMoveStringLiteralDfa6_0(active1, 0x4c00000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(4, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, 0L, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active1, 0x200000000000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active1, 0x100000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active1, 0x10400L);
      case 101:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 95, 67);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 99, 67);
         return jjMoveStringLiteralDfa7_0(active1, 0x200004000000000L);
      case 102:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 117, 67);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active1, 0x80000L);
      case 108:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 123, 67);
         return jjMoveStringLiteralDfa7_0(active1, 0x2000000000000000L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active1, 0x80000000000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active1, 0x400000000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active1, 0x8000000000L);
      case 116:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 76, 67);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 126, 67);
         return jjMoveStringLiteralDfa7_0(active1, 0x1001000000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active1, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(5, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(5, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, 0L, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active1, 0x10000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active1, 0x400L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active1, 0x200100000000L);
      case 100:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 121, 67);
         break;
      case 101:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 75, 67);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 112, 67);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 119, 67);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 125, 67);
         return jjMoveStringLiteralDfa8_0(active1, 0x1000000000L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active1, 0x8000000000L);
      case 114:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 98, 67);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 102, 67);
         break;
      case 116:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 83, 67);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(6, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, 0L, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active1, 0x200000000000L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active1, 0x10000L);
      case 100:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 100, 67);
         break;
      case 101:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(8, 96, 67);
         break;
      case 114:
         return jjMoveStringLiteralDfa9_0(active1, 0x8000000000L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active1, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(7, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(7, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, 0L, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active1, 0x10000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active1, 0x8000000000L);
      case 115:
         return jjMoveStringLiteralDfa10_0(active1, 0x200000000000L);
      case 116:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(9, 74, 67);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(8, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, 0L, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa11_0(active1, 0x10000L);
      case 116:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 109, 67);
         return jjMoveStringLiteralDfa11_0(active1, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(9, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa12_0(active1, 0x8000000000L);
      case 116:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(11, 80, 67);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(10, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa13_0(active1, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(11, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa14_0(active1, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(12, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa15_0(active1, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(13, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 116:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 103, 67);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 80;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  else if (curChar == 34)
                     jjCheckNAddStates(4, 6);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(29, 31);
                  else if (curChar == 46)
                     jjCheckNAdd(23);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 129)
                        kind = 129;
                     jjCheckNAddStates(7, 10);
                  }
                  else if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 14;
                  if (curChar == 48)
                  {
                     if (kind > 128)
                        kind = 128;
                     jjCheckNAddStates(11, 14);
                  }
                  break;
               case 1:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjCheckNAddStates(11, 14);
                  break;
               case 7:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 129)
                     kind = 129;
                  jjCheckNAddStates(7, 10);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 129)
                     kind = 129;
                  jjCheckNAddStates(7, 10);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 130)
                     kind = 130;
                  jjAddStates(15, 18);
                  break;
               case 21:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 22:
                  if (curChar == 46)
                     jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAddStates(19, 21);
                  break;
               case 25:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(26);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAddTwoStates(26, 27);
                  break;
               case 28:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(29, 31);
                  break;
               case 29:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 30:
                  if (curChar == 39 && kind > 136)
                     kind = 136;
                  break;
               case 32:
                  if ((0x8000008400000000L & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 33:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(25, 28);
                  break;
               case 34:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(29, 32);
                  break;
               case 35:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(33, 36);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(37, 40);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 47:
                  if (curChar == 34)
                     jjCheckNAddStates(4, 6);
                  break;
               case 48:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  break;
               case 49:
                  if (curChar == 34 && kind > 137)
                     kind = 137;
                  break;
               case 51:
                  if ((0x8000008400000000L & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  break;
               case 52:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(41, 44);
                  break;
               case 53:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(45, 48);
                  break;
               case 54:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(49, 52);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(53, 56);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(69, 70);
                  break;
               case 70:
                  if (curChar != 46)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAddStates(57, 59);
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAddStates(57, 59);
                  break;
               case 73:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(74);
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAddTwoStates(74, 27);
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(75, 76);
                  break;
               case 77:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(78);
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAddTwoStates(78, 27);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 144)
                        kind = 144;
                     jjCheckNAdd(67);
                  }
                  if (curChar == 76)
                     jjAddStates(60, 61);
                  break;
               case 2:
                  if ((0x20100000201000L & l) != 0L && kind > 128)
                     kind = 128;
                  break;
               case 3:
                  if ((0x20000000200000L & l) != 0L && kind > 128)
                     kind = 128;
                  break;
               case 4:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if ((0x100000001000L & l) != 0L && kind > 128)
                     kind = 128;
                  break;
               case 6:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 9:
                  if ((0x20100000201000L & l) != 0L && kind > 129)
                     kind = 129;
                  break;
               case 10:
                  if ((0x20000000200000L & l) != 0L && kind > 129)
                     kind = 129;
                  break;
               case 11:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if ((0x100000001000L & l) != 0L && kind > 129)
                     kind = 129;
                  break;
               case 13:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 130)
                     kind = 130;
                  jjCheckNAddStates(15, 18);
                  break;
               case 16:
                  if ((0x20100000201000L & l) != 0L && kind > 130)
                     kind = 130;
                  break;
               case 17:
                  if ((0x20000000200000L & l) != 0L && kind > 130)
                     kind = 130;
                  break;
               case 18:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if ((0x100000001000L & l) != 0L && kind > 130)
                     kind = 130;
                  break;
               case 20:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 24:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(62, 63);
                  break;
               case 27:
                  if ((0x104000001040L & l) != 0L && kind > 132)
                     kind = 132;
                  break;
               case 29:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 31:
                  if (curChar == 92)
                     jjAddStates(64, 67);
                  break;
               case 32:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 36:
                  if (curChar == 120)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(33, 36);
                  break;
               case 38:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 42:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(37, 40);
                  break;
               case 43:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 46:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 48:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  break;
               case 50:
                  if (curChar == 92)
                     jjAddStates(68, 71);
                  break;
               case 51:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  break;
               case 55:
                  if (curChar == 120)
                     jjCheckNAdd(56);
                  break;
               case 56:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(49, 52);
                  break;
               case 57:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 58:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 59:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 60:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 61:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(53, 56);
                  break;
               case 62:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 63:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 64:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 65:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  break;
               case 66:
               case 67:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAdd(67);
                  break;
               case 72:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(72, 73);
                  break;
               case 76:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(74, 75);
                  break;
               case 79:
                  if (curChar == 76)
                     jjAddStates(60, 61);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 29:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(22, 24);
                  break;
               case 48:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(4, 6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 80 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 5);
      case 32:
         return jjStopAtPos(0, 4);
      default :
         return jjMoveNfa_1(1, 0);
   }
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 2)
                        kind = 2;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 34)
                     jjCheckNAdd(2);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 3:
                  if (curChar == 34 && kind > 3)
                     kind = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 12);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x4000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   69, 70, 75, 76, 48, 49, 50, 8, 9, 11, 13, 1, 2, 4, 6, 15, 
   16, 18, 20, 23, 24, 27, 29, 30, 31, 29, 30, 31, 34, 29, 35, 30, 
   31, 29, 37, 30, 31, 29, 43, 30, 31, 48, 49, 50, 53, 48, 54, 49, 
   50, 48, 56, 49, 50, 48, 62, 49, 50, 71, 72, 27, 28, 47, 25, 26, 
   32, 33, 36, 38, 51, 52, 55, 57, 73, 74, 77, 78, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, "\173", "\175", "\133", "\135", "\50", "\51", "\72\72", "\72", 
"\73", "\54", "\77", "\56\56\56", "\75", "\52\75", "\57\75", "\45\75", "\53\75", 
"\55\75", "\74\74\75", "\76\76\75", "\46\75", "\136\75", "\174\75", "\174\174", 
"\46\46", "\174", "\136", "\46", "\75\75", "\41\75", "\74", "\76", "\74\75", "\76\75", 
"\74\74", "\76\76", "\53", "\55", "\52", "\57", "\45", "\53\53", "\55\55", "\176", 
"\41", "\56", "\55\76", "\56\52", "\55\76\52", "\141\163\155", "\141\165\164\157", 
"\142\157\157\154", "\142\162\145\141\153", "\143\141\163\145", "\143\141\164\143\150", 
"\143\150\141\162", "\143\154\141\163\163", "\143\157\156\163\164", 
"\143\157\156\163\164\137\143\141\163\164", "\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", 
"\144\145\154\145\164\145", "\144\157", "\144\157\165\142\154\145", 
"\144\171\156\141\155\151\143\137\143\141\163\164", "\145\154\163\145", "\145\156\165\155", "\145\170\160\154\151\143\151\164", 
"\145\170\160\157\162\164", "\145\170\164\145\162\156", "\146\141\154\163\145", "\146\154\157\141\164", 
"\146\157\162", "\146\162\151\145\156\144", "\147\157\164\157", "\151\146", 
"\151\156\154\151\156\145", "\151\156\164", "\154\157\156\147", "\155\165\164\141\142\154\145", 
"\156\141\155\145\163\160\141\143\145", "\156\145\167", "\157\160\145\162\141\164\157\162", 
"\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", 
"\162\145\147\151\163\164\145\162", "\162\145\151\156\164\145\162\160\162\145\164\137\143\141\163\164", 
"\162\145\164\165\162\156", "\163\150\157\162\164", "\163\151\147\156\145\144", 
"\163\151\172\145\157\146", "\163\164\141\164\151\143", "\163\164\141\164\151\143\137\143\141\163\164", 
"\163\164\162\165\143\164", "\163\167\151\164\143\150", "\164\145\155\160\154\141\164\145", 
"\164\150\151\163", "\164\150\162\157\167", "\164\162\165\145", "\164\162\171", 
"\164\171\160\145\144\145\146", "\164\171\160\145\151\144", "\164\171\160\145\156\141\155\145", 
"\165\156\151\157\156", "\165\156\163\151\147\156\145\144", "\165\163\151\156\147", 
"\166\151\162\164\165\141\154", "\166\157\151\144", "\166\157\154\141\164\151\154\145", 
"\167\143\150\141\162\137\164", "\167\150\151\154\145", null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "LINE_DIRECTIVE",
   "IN_LINE_COMMENT",
   "IN_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, 1, -1, -1, -1, 0, -1, -1, -1, -1, 2, 3, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffff0001L, 0xffffffffffffffffL, 0x30317L, 
};
static final long[] jjtoSkip = {
   0x5ffeL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x3eL, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0xa000L, 0x0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[80];
private final int[] jjstateSet = new int[160];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public ParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 80; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   t.image = curTokenImage;

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 145)
         {
            jjmatchedKind = 145;
         }
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 145)
         {
            jjmatchedKind = 145;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 13)
         {
            jjmatchedKind = 13;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 15)
         {
            jjmatchedKind = 15;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 2 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
          tokenLine = matchedToken.beginLine+1 ;
          sourceLine = Integer.parseInt (matchedToken.image.trim());
         break;
      case 3 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
     file = fileMap.get( new Integer(matchedToken.image.substring(1, matchedToken.image.length()-1) ) );
         break;
      case 5 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
           pc.line_map.add (tokenLine, sourceLine, file);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
