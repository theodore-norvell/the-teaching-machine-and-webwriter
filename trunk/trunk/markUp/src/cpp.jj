/**
 * C++ Mark up
 *
 * Author: Theodore Norvell
 * (C) 2005 Theodore Norvell and Michael Bruce-Lockart
 * except for the lexer, which is based on a lexer (C) sun microsystems.
 *
 * TODO:
 *
 * Lexical grammar based on:
 *
 * Author: Sreenivasa Viswanadha
 * Date: 3/20/97
 *
 * This file contains a Java grammar and actions that implement a front-end.
 *
 *
 * Derived in part from the following work:
 *
 * PUBLIC DOMAIN PCCTS-BASED C++ GRAMMAR (cplusplus.g, stat.g, expr.g)
 *
 * Authors: Sumana Srinivasan, Next Inc.;            sumana_srinivasan@next.com
 *          Terence Parr, Parr Research Corporation; parrt@parr-research.com
 *          Russell Quong, Purdue University;        quong@ecn.purdue.edu
 *
 * VERSION 1.1
 *
 */
options {
        STATIC = false ;
        ERROR_REPORTING = true ;
        COMMON_TOKEN_ACTION = true ;
        BUILD_PARSER = false ;
}

PARSER_BEGIN(cppparser)

import java.io.* ;
import java.util.* ;

public class cppparser {}

PARSER_END(cppparser)


TOKEN_MGR_DECLS : {

    public HTMLBuilder builder = new HTMLBuilder() ;
    private static final Integer dummy = new Integer(0);
    private static Hashtable keywords = new Hashtable() ;
    private static boolean hashtable_initialized = false ;
    
    private static void initialize_the_hashtable() {
        keywords.put( "auto" , dummy ) ;
        keywords.put( "bool" , dummy ) ;
        keywords.put( "break" , dummy ) ;
        keywords.put( "case" , dummy ) ;
        keywords.put( "catch" , dummy ) ;
        keywords.put( "char" , dummy ) ;
        keywords.put( "const" , dummy ) ;
        keywords.put( "continue" , dummy ) ;
        keywords.put( "default" , dummy ) ;
        keywords.put( "delete" , dummy ) ;
        keywords.put( "do" , dummy ) ;
        keywords.put( "double" , dummy ) ;
        keywords.put( "else" , dummy ) ;
        keywords.put( "enum" , dummy ) ;
        keywords.put( "extern" , dummy ) ;
        keywords.put( "float" , dummy ) ;
        keywords.put( "for" , dummy ) ;
        keywords.put( "friend" , dummy ) ;
        keywords.put( "goto" , dummy ) ;
        keywords.put( "if" , dummy ) ;
        keywords.put( "inline" , dummy ) ;
        keywords.put( "int" , dummy ) ;
        keywords.put( "long" , dummy ) ;
        keywords.put( "namespace" , dummy ) ;
        keywords.put( "new" , dummy ) ;
        keywords.put( "private" , dummy ) ;
        keywords.put( "protected" , dummy ) ;
        keywords.put( "public" , dummy ) ;
        keywords.put( "redeclared" , dummy ) ;
        keywords.put( "register" , dummy ) ;
        keywords.put( "return" , dummy ) ;
        keywords.put( "short" , dummy ) ;
        keywords.put( "signed" , dummy ) ;
        keywords.put( "sizeof" , dummy ) ;
        keywords.put( "static" , dummy ) ;
        keywords.put( "struct" , dummy ) ;
        keywords.put( "class" , dummy ) ;
        keywords.put( "switch" , dummy ) ;
        keywords.put( "template" , dummy ) ;
        keywords.put( "this" , dummy ) ;
        keywords.put( "try" , dummy ) ;
        keywords.put( "typedef" , dummy ) ;
        keywords.put( "union" , dummy ) ;
        keywords.put( "unsigned" , dummy ) ;
        keywords.put( "using" , dummy ) ;
        keywords.put( "virtual" , dummy ) ;
        keywords.put( "void" , dummy ) ;
        keywords.put( "volatile" , dummy ) ;
        keywords.put( "while" , dummy ) ;
        keywords.put( "operator" , dummy ) ;
        keywords.put( "true" , dummy ) ;
        keywords.put( "false" , dummy ) ;
        keywords.put( "throw" , dummy ) ;
        hashtable_initialized = true ; }
    
    private static final int PLAIN = TokenClassConstants.PLAIN ;
    private static final int KEYWORD = TokenClassConstants.KEYWORD ;
    private static final int COMMENT = TokenClassConstants.COMMENT ;
    private static final int CONSTANT = TokenClassConstants.CONSTANT ;
    private static final int PREPROCESSOR = TokenClassConstants.PREPROCESSOR ;
    
    private int colourClass = PLAIN ;  // Used to communicate from lex actions 
    private boolean forceEndAfter = false ;
    
    void CommonTokenAction(Token token) {
    	if( ! hashtable_initialized ) {
    	    initialize_the_hashtable() ; }
    	    
    	if( token.kind == ID_OR_KEYWORD
    	 && keywords.containsKey( token.image ) ) {
    	    colourClass = KEYWORD ; }
	
		builder.digestToken( token, colourClass, forceEndAfter ) ;
		colourClass = PLAIN ;
    	forceEndAfter = false ;
    }        
}


TOKEN :
{
  " " 
|
  "\t"
|
  "\n"
|
  "\r"
| 
  < SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")? > {colourClass = COMMENT;}
|
  "/*" {colourClass = COMMENT;} : IN_COMMENT
|
  "#"  {colourClass = PREPROCESSOR; } : PREPROCESSOR_OUTPUT
}

<IN_COMMENT> TOKEN:
{
   "*/"  {colourClass = COMMENT ; forceEndAfter = true ; } : DEFAULT
}

<IN_COMMENT> MORE:
{
  < ~[] >
}

<PREPROCESSOR_OUTPUT> TOKEN:
{
   "\n" { colourClass = PREPROCESSOR ; } : DEFAULT
}

<PREPROCESSOR_OUTPUT> MORE:
{
  < ~[] >
}


// Number Constants are over simplified.  E.g. 123ABC is a number
// rather than a number followied by an identifier. But since identifiers
// never immediately follow numbers in a real C++ program, its a
// reasonable simplification.

// Note that this does not correctly deal with 
// exponential notation involving + and - signs: E.g. 12.5E+4
// Will be analysed as 3 tokens: 12.5E, +, and 4, and so won't
// colourize correctly.  

TOKEN [IGNORE_CASE] :
{
  <  NUMBERCONSTANT : (["0"-"9","."]) (["0"-"9","a"-"z","."])* > { colourClass = CONSTANT ; }
}

// Characters and strings in all their glory.
TOKEN :
{

  <  CHARACTER : ("L")? "'"
   (   (~["'","\\","\n","\r"])
   | ("\\" (
             ["n","t","v","b","r","f","a","\\","?","'","\""]
            |
             "0" (["0"-"7"])? (["0"-"7"])? (["0"-"7"])?
            |
             ("x" | "X") (["0"-"9","a"-"f","A"-"F"])+
           )
     )
   )
   "'" > { colourClass = CONSTANT ; }

| <  STRING : ("L")? "\""
   ( ( ~["\"","\\","\n","\r"])
   | ("\\" (
             ["n","t","v","b","r","f","a","\\","?","'","\""]
            |
             "0" (["0"-"7"])? (["0"-"7"])? (["0"-"7"])?
            |
             ("x" | "X") (["0"-"9","a"-"f","A"-"F"])+
           )
     )
   )*
   "\"" > { colourClass = CONSTANT ; }
}


// The following production serves for both identifiers and keywords.
// These classes of token are distinguished in the common token action
// subroutine, according to membership in the keywords set.

TOKEN :
{
  <  ID_OR_KEYWORD : ["a"-"z","A"-"Z", "_"] (["a"-"z","A"-"Z","0"-"9","_"])* >
}

// Any other characters
// For example == will be treated as two = tokens.
// For parsing this would be unacceptable, but for colourizing,
// it is fine as long as == and = are both PLAIN coloured.
TOKEN :
{ < CATCHALL : ~[] >
}
