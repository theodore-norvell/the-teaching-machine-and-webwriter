/* Generated By:JavaCC: Do not edit this line. ConfTesterParser.java */
package tm.confTester ;

import tm.utilities.Assert ;

public class ConfTesterParser implements ConfTesterParserConstants {


    static private String unformatString( String str, char escapeChar ) {
        StringBuffer buf = new StringBuffer() ;

        int i = 1 ;
        int sz = str.length() - 1 ;
        while( i < sz ) {
            char[] charResult = new char[1] ;
            int[]  lenResult = new int[1] ;
            charToAscii( str, i, charResult, lenResult, escapeChar ) ;
            buf.append( charResult[0] ) ;
            i += lenResult[0] ; }
        return buf.toString() ;
    }

    static String formatString( String str, char delimiter, char escapeChar ) {
        StringBuffer buf = new StringBuffer() ;
                for( int i = 0 ; i < str.length() ; ++ i ) {
                        char ch = str.charAt(i) ;
                        switch( ch ) {
                                case '\n' : buf.append( escapeChar) ; buf.append( "n" ) ; break ;
                                case '\r' : buf.append( escapeChar) ; buf.append( "r" ) ; break ;
                                case '\t' : buf.append( escapeChar) ; buf.append( "t" ) ; break ;
                                default :
                                    if( ch == escapeChar ) {
                                        buf.append( escapeChar) ; buf.append( escapeChar ) ; }
                                    else if( ch == delimiter ) {
                                        buf.append( escapeChar) ; buf.append( delimiter ) ; }
                                    else if( ' ' <= ch && ch <= '~' ) {
                                        buf.append( ch ) ; }
                                    else {
                                        buf.append( escapeChar) ; buf.append( 'u' ) ;
                                        int j = (int) ch ;
                                        int hd0 = j % 16 ;
                                        j = j / 16 ;
                                        int hd1 = j % 16 ;
                                        j = j / 16 ;
                                        int hd2 = j % 16 ;
                                        j = j / 16 ;
                                        int hd3 = j ;
                                        Assert.check( hd3 < 16 ) ;
                                        char hch0 = (char)( hd0 < 10 ? '0'+hd0 : 'A'+hd0-10 ) ;
                                        char hch1 = (char)( hd1 < 10 ? '0'+hd1 : 'A'+hd1-10 ) ;
                                        char hch2 = (char)( hd2 < 10 ? '0'+hd2 : 'A'+hd2-10 ) ;
                                        char hch3 = (char)( hd3 < 10 ? '0'+hd3 : 'A'+hd3-10 ) ;
                                        buf.append( hch3 ) ;
                                        buf.append( hch2 ) ;
                                        buf.append( hch1 ) ;
                                        buf.append( hch0 ) ; } } }
        return buf.toString() ;
    }

    static private void charToAscii( String image,
                                     int start,
                                     char[] charResult,
                                     int[] lenResult,
                                     char escapeChar ) {
        int ascii ;
        int len ;
        if( image.charAt(start) != escapeChar ) {
            ascii = (int) image.charAt( start ) ;
            len = 1 ; }
        else {
            switch( image.charAt(start+1) ) {
            case 'n' :
                ascii = 10 ;
                len = 2 ;
                break ;
            case 'r' :
                ascii = 13 ;
                len = 2 ;
                break ;
            case 't' :
                ascii = 9 ;
                len = 2 ;
                break ;
            case '\\' :
                ascii = 92 ;
                len = 2 ;
                break ;
            case '"' :
                ascii = 34 ;
                len = 2 ;
                break ;
            case '/' :
                ascii = 47 ; ;
                len = 2 ;
                break ;
            case '%' :
                ascii = 37 ;
                len = 2 ;
                break ;
            case 'u' : case 'U' :
                // Unicode
                ascii = 0 ;
                len = 2 ;
                for( int i=0 ; i < 4 && start+len < image.length(); ++i ) {
                    int ch = (int) image.charAt( start+len ) ;
                    if( (int)'0' <= ch && ch <= (int) '9' ) {
                        ascii *= 16 ;
                        ascii += ch - (int)'0' ;
                        len += 1 ;}
                    else if( (int) 'A' <= ch && ch <= (int) 'F' ) {
                        ascii *= 16 ;
                        ascii += ch - (int)'A' + 10 ;
                        len += 1 ; }
                    else if( (int) 'a' <= ch && ch <= (int) 'f' ) {
                        ascii *= 16 ;
                        ascii += ch - (int)'a' + 10 ;
                        len += 1 ; }
                    else break ; }
                break ;
                default :
                        // Anything else is a lexical error.
                        // and should already have been caught.
                        len = ascii = 0 ; /*Make compiler happy*/} }

        charResult[0] = (char) ascii ;
        lenResult[0] = len ; }

  final public void start(TestDescription description) throws ParseException {
    compile(description);
    jj_consume_token(0);
  }

  final public void compile(TestDescription description) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMPILE:
      jj_consume_token(COMPILE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case THIS:
        jj_consume_token(THIS);
        jj_consume_token(FILE);
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
         description.setDoCompile( true ) ;
      error(description);
      break;
    case EXECUTE:
     description.setDoCompile( true ) ;
     description.setExpectedCompileError( TestDescription.NONE, "" ) ;
      execute(description);
      executes(description);
      break;
    default:
      jj_la1[1] = jj_gen;
     description.setDoCompile( false ) ;
    }
  }

  final public void error(TestDescription description) throws ParseException {
        String str ;
        int equalsOrMatches ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXPECT:
      jj_consume_token(EXPECT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANY:
        jj_consume_token(ANY);
        jj_consume_token(ERROR);
                      description.setExpectedCompileError( TestDescription.ANY, "" ) ;
        break;
      case ERROR:
        jj_consume_token(ERROR);
                  equalsOrMatches = TestDescription.EQUALS ;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUALS:
        case MATCHES:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EQUALS:
            jj_consume_token(EQUALS);
            break;
          case MATCHES:
            jj_consume_token(MATCHES);
                               equalsOrMatches = TestDescription.MATCHES ;
            break;
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[3] = jj_gen;
          ;
        }
        str = string();
                  description.setExpectedCompileError( equalsOrMatches, str ) ;
        break;
      default:
        jj_la1[5] = jj_gen;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NO:
          jj_consume_token(NO);
          jj_consume_token(ERROR);
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
                  description.setExpectedCompileError( TestDescription.NONE, "" ) ;
        executes(description);
      }
      break;
    default:
      jj_la1[6] = jj_gen;
       description.setExpectedCompileError( TestDescription.NONE, "" ) ;
      executes(description);
    }
  }

  final public void executes(TestDescription description) throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXECUTE:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_1;
      }
      execute(description);
    }
  }

  final public void execute(TestDescription description) throws ParseException {
    jj_consume_token(EXECUTE);
         description.addExecutionCase( ) ;
    input(description);
    output(description);
  }

  final public void input(TestDescription description) throws ParseException {
    String str = "" ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WITH:
    case INPUT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WITH:
        jj_consume_token(WITH);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(INPUT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        jj_consume_token(EQUALS);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      str = string();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
          description.setInputString( str ) ;
  }

  final public void output(TestDescription description) throws ParseException {
    String str = "" ;
    int equalsOrMatches ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXPECT:
      jj_consume_token(EXPECT);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NO:
      jj_consume_token(NO);
      jj_consume_token(OUTPUT);
                       description.setExpectedExecuteError( TestDescription.NONE, "" ) ;
                       description.setExpectedExecuteOutput( TestDescription.EQUALS, "" ) ;
      break;
    case OUTPUT:
      jj_consume_token(OUTPUT);
                   description.setExpectedExecuteError( TestDescription.NONE, "" ) ;
                    equalsOrMatches = TestDescription.EQUALS ;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
      case MATCHES:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUALS:
          jj_consume_token(EQUALS);
          break;
        case MATCHES:
          jj_consume_token(MATCHES);
                                equalsOrMatches = TestDescription.MATCHES ;
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      str = string();
                   description.setExpectedExecuteOutput( equalsOrMatches, str ) ;
      break;
    default:
      jj_la1[17] = jj_gen;
      if (jj_2_1(2147483647)) {
        jj_consume_token(ANY);
        jj_consume_token(ERROR);
                   description.setExpectedExecuteError( TestDescription.ANY, "" ) ;
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ERROR:
          jj_consume_token(ERROR);
                    equalsOrMatches = TestDescription.EQUALS ;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EQUALS:
          case MATCHES:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EQUALS:
              jj_consume_token(EQUALS);
              break;
            case MATCHES:
              jj_consume_token(MATCHES);
                                equalsOrMatches = TestDescription.MATCHES ;
              break;
            default:
              jj_la1[14] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[15] = jj_gen;
            ;
          }
          str = string();
                   description.setExpectedExecuteError( equalsOrMatches, str ) ;
          break;
        default:
          jj_la1[18] = jj_gen;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ANY:
            jj_consume_token(ANY);
            jj_consume_token(OUTPUT);
            break;
          default:
            jj_la1[16] = jj_gen;
            ;
          }
                   description.setExpectedExecuteError( TestDescription.NONE, "" ) ;
                       description.setExpectedExecuteOutput( TestDescription.ANY, "" ) ;
        }
      }
    }
  }

  final public String string() throws ParseException {
    Token t ;
    String s = "" ;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        t = jj_consume_token(STRING);
        s += unformatString( t.image, '\\' ) ;
        break;
      case SLASHSTRING:
        t = jj_consume_token(SLASHSTRING);
        s += unformatString( t.image, '%' ) ;
        break;
      case ENDL:
        jj_consume_token(ENDL);
        s += '\n' ;
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENDL:
      case STRING:
      case SLASHSTRING:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_2;
      }
    }
      {if (true) return s ;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(ANY)) return true;
    if (jj_scan_token(ERROR)) return true;
    return false;
  }

  public ConfTesterParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[21];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x8000,0x2100,0x11000,0x11000,0x20000,0x480,0x800,0x2000,0x40000,0x1000,0xc0000,0x800,0x11000,0x11000,0x11000,0x11000,0x80,0x120000,0x400,0x600200,0x600200,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public ConfTesterParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ConfTesterParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ConfTesterParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ConfTesterParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ConfTesterParser(ConfTesterParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(ConfTesterParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[30];
    for (int i = 0; i < 30; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 21; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 30; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
