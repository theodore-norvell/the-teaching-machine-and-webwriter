/*#TS*/
package java.lang;


/** Integer class for the Teaching Machine.
 * @author mpbl
 *
 */
 
public final class Integer extends java.lang.Number /*implements Comparable<Integer>*/{
//	public static int MAX_VALUE = java.lang.Integer.MAX_VALUE;
//	public static int MIN_VALUE = java.lang.Integer.MIN_VALUE;
//	public static int SIZE = java.lang.Integer.SIZE;
//	public static Class<Integer> TYPE = java.lang.Integer.TYPE;
	private int myInt;
	
	//  Initializes a newly created Integer object wrapped around value.
	Integer(int value) {
		myInt = value;
	}
	//  Constructs a newly allocated Integer object that represents the int value indicated by the String parameter
	Integer(String s){
		myInt = parseInt(s);
	}
	
	public native static int bitCount(int i);
	public int compareTo(Integer anotherInteger){
		return myInt-anotherInteger.myInt;
	}
	public native static Integer decode(String nm);
	
	public byte byteValue(){return (byte)myInt;}
	
	public double doubleValue() { return (double)myInt; } 
/* 	public boolean equals(Object obj) { // cast can never succeed
 		return (obj != null) && (obj instanceof Integer) && ((Integer)obj).myInt == myInt; }*/
	public float floatValue() { return (float)myInt; }
	public native static Integer getInteger(String nm); 
	public native static Integer getInteger(String nm, int val); 
	public native static Integer getInteger(String nm, Integer val); 
	public int hashCode() { return myInt; }
	public native static int highestOneBit(int i); 
	public int intValue(){ return myInt; } 
	public long longValue() { return (long)myInt; }
	public native static int lowestOneBit(int i); 
	public native static int numberOfLeadingZeros(int i); 
	public native static int numberOfTrailingZeros(int i); 
	public native static int parseInt(String s); 
	public native static int parseInt(String s, int radix); 
	public native static int reverse(int i); 
	public native static int reverseBytes(int i); 
	public native static int rotateLeft(int i, int distance); 
	public native static int rotateRight(int i, int distance); 
	public native static int signum(int i); 
	public short shortValue() { return (short) myInt; }  
	public native static String toBinaryString(int i) ;
	public native static String toHexString(int i); 
	public native static String toOctalString(int i); 
	public String toString() { return toString(myInt); } 
	public native static String toString(int i); 
	public native static String toString(int i, int radix); 
 	public native static Integer valueOf(int i) ;
 	public native static Integer valueOf(String s); 
	public native static Integer valueOf(String s, int radix);
} 
