/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
package tm.cpp.parser ;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LINE_NO = 2;
  /** RegularExpression Id. */
  int FILE_NM = 3;
  /** RegularExpression Id. */
  int OPEN_BRACE = 16;
  /** RegularExpression Id. */
  int CLOSE_BRACE = 17;
  /** RegularExpression Id. */
  int OPEN_BRACKET = 18;
  /** RegularExpression Id. */
  int CLOSE_BRACKET = 19;
  /** RegularExpression Id. */
  int OPEN_PAREN = 20;
  /** RegularExpression Id. */
  int CLOSE_PAREN = 21;
  /** RegularExpression Id. */
  int SCOPE = 22;
  /** RegularExpression Id. */
  int COLON = 23;
  /** RegularExpression Id. */
  int SEMICOLON = 24;
  /** RegularExpression Id. */
  int COMMA = 25;
  /** RegularExpression Id. */
  int QUESTIONMARK = 26;
  /** RegularExpression Id. */
  int ELLIPSIS = 27;
  /** RegularExpression Id. */
  int ASSIGN = 28;
  /** RegularExpression Id. */
  int STARASSIGN = 29;
  /** RegularExpression Id. */
  int SLASHASSIGN = 30;
  /** RegularExpression Id. */
  int PERCENTASSIGN = 31;
  /** RegularExpression Id. */
  int PLUSASSIGN = 32;
  /** RegularExpression Id. */
  int MINUSASSIGN = 33;
  /** RegularExpression Id. */
  int SHIFTLEFTASSIGN = 34;
  /** RegularExpression Id. */
  int SHIFTRIGHTASSIGN = 35;
  /** RegularExpression Id. */
  int BITWISEANDASSIGN = 36;
  /** RegularExpression Id. */
  int BITWISEXORASSIGN = 37;
  /** RegularExpression Id. */
  int BITWISEORASSIGN = 38;
  /** RegularExpression Id. */
  int OR = 39;
  /** RegularExpression Id. */
  int AND = 40;
  /** RegularExpression Id. */
  int BITWISEOR = 41;
  /** RegularExpression Id. */
  int BITWISEXOR = 42;
  /** RegularExpression Id. */
  int AMPERSAND = 43;
  /** RegularExpression Id. */
  int EQUAL = 44;
  /** RegularExpression Id. */
  int NOTEQUAL = 45;
  /** RegularExpression Id. */
  int LESSTHAN = 46;
  /** RegularExpression Id. */
  int GREATERTHAN = 47;
  /** RegularExpression Id. */
  int LESSTHANOREQUALTO = 48;
  /** RegularExpression Id. */
  int GREATERTHANOREQUALTO = 49;
  /** RegularExpression Id. */
  int SHIFTLEFT = 50;
  /** RegularExpression Id. */
  int SHIFTRIGHT = 51;
  /** RegularExpression Id. */
  int PLUS = 52;
  /** RegularExpression Id. */
  int MINUS = 53;
  /** RegularExpression Id. */
  int STAR = 54;
  /** RegularExpression Id. */
  int SLASH = 55;
  /** RegularExpression Id. */
  int PERCENT = 56;
  /** RegularExpression Id. */
  int PLUSPLUS = 57;
  /** RegularExpression Id. */
  int MINUSMINUS = 58;
  /** RegularExpression Id. */
  int TILDE = 59;
  /** RegularExpression Id. */
  int BANG = 60;
  /** RegularExpression Id. */
  int DOT = 61;
  /** RegularExpression Id. */
  int ARROW = 62;
  /** RegularExpression Id. */
  int DOTSTAR = 63;
  /** RegularExpression Id. */
  int ARROWSTAR = 64;
  /** RegularExpression Id. */
  int ASM = 65;
  /** RegularExpression Id. */
  int AUTO = 66;
  /** RegularExpression Id. */
  int BOOL = 67;
  /** RegularExpression Id. */
  int BREAK = 68;
  /** RegularExpression Id. */
  int CASE = 69;
  /** RegularExpression Id. */
  int CATCH = 70;
  /** RegularExpression Id. */
  int CHAR = 71;
  /** RegularExpression Id. */
  int CLASS = 72;
  /** RegularExpression Id. */
  int CONST = 73;
  /** RegularExpression Id. */
  int CONST_CAST = 74;
  /** RegularExpression Id. */
  int CONTINUE = 75;
  /** RegularExpression Id. */
  int KEYWORD_DEFAULT = 76;
  /** RegularExpression Id. */
  int DELETE = 77;
  /** RegularExpression Id. */
  int DO = 78;
  /** RegularExpression Id. */
  int DOUBLE = 79;
  /** RegularExpression Id. */
  int DYNAMIC_CAST = 80;
  /** RegularExpression Id. */
  int ELSE = 81;
  /** RegularExpression Id. */
  int ENUM = 82;
  /** RegularExpression Id. */
  int EXPLICIT = 83;
  /** RegularExpression Id. */
  int EXPORT = 84;
  /** RegularExpression Id. */
  int EXTERN = 85;
  /** RegularExpression Id. */
  int FALSE = 86;
  /** RegularExpression Id. */
  int FLOAT = 87;
  /** RegularExpression Id. */
  int FOR = 88;
  /** RegularExpression Id. */
  int FRIEND = 89;
  /** RegularExpression Id. */
  int GOTO = 90;
  /** RegularExpression Id. */
  int IF = 91;
  /** RegularExpression Id. */
  int INLINE = 92;
  /** RegularExpression Id. */
  int INT = 93;
  /** RegularExpression Id. */
  int LONG = 94;
  /** RegularExpression Id. */
  int MUTABLE = 95;
  /** RegularExpression Id. */
  int NAMESPACE = 96;
  /** RegularExpression Id. */
  int NEW = 97;
  /** RegularExpression Id. */
  int OPERATOR = 98;
  /** RegularExpression Id. */
  int PRIVATE = 99;
  /** RegularExpression Id. */
  int PROTECTED = 100;
  /** RegularExpression Id. */
  int PUBLIC = 101;
  /** RegularExpression Id. */
  int REGISTER = 102;
  /** RegularExpression Id. */
  int REINTERPRET_CAST = 103;
  /** RegularExpression Id. */
  int RETURN = 104;
  /** RegularExpression Id. */
  int SHORT = 105;
  /** RegularExpression Id. */
  int SIGNED = 106;
  /** RegularExpression Id. */
  int SIZEOF = 107;
  /** RegularExpression Id. */
  int STATIC = 108;
  /** RegularExpression Id. */
  int STATIC_CAST = 109;
  /** RegularExpression Id. */
  int STRUCT = 110;
  /** RegularExpression Id. */
  int SWITCH = 111;
  /** RegularExpression Id. */
  int TEMPLATE = 112;
  /** RegularExpression Id. */
  int THIS = 113;
  /** RegularExpression Id. */
  int THROW = 114;
  /** RegularExpression Id. */
  int TRUE = 115;
  /** RegularExpression Id. */
  int TRY = 116;
  /** RegularExpression Id. */
  int TYPEDEF = 117;
  /** RegularExpression Id. */
  int TYPEID = 118;
  /** RegularExpression Id. */
  int TYPENAME = 119;
  /** RegularExpression Id. */
  int UNION = 120;
  /** RegularExpression Id. */
  int UNSIGNED = 121;
  /** RegularExpression Id. */
  int USING = 122;
  /** RegularExpression Id. */
  int VIRTUAL = 123;
  /** RegularExpression Id. */
  int VOID = 124;
  /** RegularExpression Id. */
  int VOLATILE = 125;
  /** RegularExpression Id. */
  int WCHAR_T = 126;
  /** RegularExpression Id. */
  int WHILE = 127;
  /** RegularExpression Id. */
  int OCTALINT = 128;
  /** RegularExpression Id. */
  int DECIMALINT = 129;
  /** RegularExpression Id. */
  int HEXINT = 130;
  /** RegularExpression Id. */
  int INTSUFFIX = 131;
  /** RegularExpression Id. */
  int FLOATCONST = 132;
  /** RegularExpression Id. */
  int LOCAL_FLOATCONST = 133;
  /** RegularExpression Id. */
  int DIGITS = 134;
  /** RegularExpression Id. */
  int EXPPART = 135;
  /** RegularExpression Id. */
  int CHARACTER = 136;
  /** RegularExpression Id. */
  int STRING = 137;
  /** RegularExpression Id. */
  int SIMPLEESCAPESEQ = 138;
  /** RegularExpression Id. */
  int OCTALESCAPESEQ = 139;
  /** RegularExpression Id. */
  int HEXESCAPESEQ = 140;
  /** RegularExpression Id. */
  int UCODENAME = 141;
  /** RegularExpression Id. */
  int HEXQUAD = 142;
  /** RegularExpression Id. */
  int HEXDIG = 143;
  /** RegularExpression Id. */
  int ID = 144;
  /** RegularExpression Id. */
  int UNEXPECTED_CHAR = 145;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int LINE_DIRECTIVE = 1;
  /** Lexical state. */
  int IN_LINE_COMMENT = 2;
  /** Lexical state. */
  int IN_COMMENT = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"#line\"",
    "<LINE_NO>",
    "<FILE_NM>",
    "\" \"",
    "\"\\n\"",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"//\"",
    "\"/*\"",
    "\"\\n\"",
    "<token of kind 13>",
    "\"*/\"",
    "<token of kind 15>",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\"::\"",
    "\":\"",
    "\";\"",
    "\",\"",
    "\"?\"",
    "\"...\"",
    "\"=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"+=\"",
    "\"-=\"",
    "\"<<=\"",
    "\">>=\"",
    "\"&=\"",
    "\"^=\"",
    "\"|=\"",
    "\"||\"",
    "\"&&\"",
    "\"|\"",
    "\"^\"",
    "\"&\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"<<\"",
    "\">>\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"++\"",
    "\"--\"",
    "\"~\"",
    "\"!\"",
    "\".\"",
    "\"->\"",
    "\".*\"",
    "\"->*\"",
    "\"asm\"",
    "\"auto\"",
    "\"bool\"",
    "\"break\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"class\"",
    "\"const\"",
    "\"const_cast\"",
    "\"continue\"",
    "\"default\"",
    "\"delete\"",
    "\"do\"",
    "\"double\"",
    "\"dynamic_cast\"",
    "\"else\"",
    "\"enum\"",
    "\"explicit\"",
    "\"export\"",
    "\"extern\"",
    "\"false\"",
    "\"float\"",
    "\"for\"",
    "\"friend\"",
    "\"goto\"",
    "\"if\"",
    "\"inline\"",
    "\"int\"",
    "\"long\"",
    "\"mutable\"",
    "\"namespace\"",
    "\"new\"",
    "\"operator\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"register\"",
    "\"reinterpret_cast\"",
    "\"return\"",
    "\"short\"",
    "\"signed\"",
    "\"sizeof\"",
    "\"static\"",
    "\"static_cast\"",
    "\"struct\"",
    "\"switch\"",
    "\"template\"",
    "\"this\"",
    "\"throw\"",
    "\"true\"",
    "\"try\"",
    "\"typedef\"",
    "\"typeid\"",
    "\"typename\"",
    "\"union\"",
    "\"unsigned\"",
    "\"using\"",
    "\"virtual\"",
    "\"void\"",
    "\"volatile\"",
    "\"wchar_t\"",
    "\"while\"",
    "<OCTALINT>",
    "<DECIMALINT>",
    "<HEXINT>",
    "<INTSUFFIX>",
    "<FLOATCONST>",
    "<LOCAL_FLOATCONST>",
    "<DIGITS>",
    "<EXPPART>",
    "<CHARACTER>",
    "<STRING>",
    "<SIMPLEESCAPESEQ>",
    "<OCTALESCAPESEQ>",
    "<HEXESCAPESEQ>",
    "<UCODENAME>",
    "<HEXQUAD>",
    "<HEXDIG>",
    "<ID>",
    "<UNEXPECTED_CHAR>",
  };

}
